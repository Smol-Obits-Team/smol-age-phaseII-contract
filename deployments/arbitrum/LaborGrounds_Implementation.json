{
  "address": "0x0fb4027f54072e983a41ffb5A6fA196c8F6BC06E",
  "abi": [
    {
      "inputs": [],
      "name": "CannotClaimNow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CsToHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DevelopmentGroundIsLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenForThisJob",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthsNotEqual",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewOwnerIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoHandoverRequest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoMoreAnimalsAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenIsStaked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "animalsId",
          "type": "uint256"
        }
      ],
      "name": "BringInAnimalsToLaborGround",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ClaimCollectable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "supplyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Jobs",
          "name": "job",
          "type": "uint8"
        }
      ],
      "name": "EnterLaborGround",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "LeaveLaborGround",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipHandoverCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipHandoverRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "animalsId",
          "type": "uint256"
        }
      ],
      "name": "RemoveAnimalsFromLaborGround",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "animals",
      "outputs": [
        {
          "internalType": "contract IERC1155Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_animalsId",
          "type": "uint256[]"
        }
      ],
      "name": "bringInAnimalsToLaborGround",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelOwnershipHandover",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "claimCollectables",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "completeOwnershipHandover",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "consumables",
      "outputs": [
        {
          "internalType": "contract IConsumables",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_supplyId",
          "type": "uint256[]"
        },
        {
          "internalType": "enum Jobs[]",
          "name": "_job",
          "type": "uint8[]"
        }
      ],
      "name": "enterLaborGround",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getLaborGroundFeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "timeLeft",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "tokenId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "animalId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "supplyId",
              "type": "uint64"
            }
          ],
          "internalType": "struct LaborGroundFeInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getLaborGroundInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "lockTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "supplyId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "animalId",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "requestId",
              "type": "uint256"
            },
            {
              "internalType": "enum Jobs",
              "name": "job",
              "type": "uint8"
            }
          ],
          "internalType": "struct LaborGround",
          "name": "lg",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getStakedTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pits",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_animals",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_supplies",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_consumables",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_neandersmol",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_randomizer",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "leaveLaborGround",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "neandersmol",
      "outputs": [
        {
          "internalType": "contract INeandersmol",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "result",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "ownershipHandoverExpiresAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownershipHandoverValidFor",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pits",
      "outputs": [
        {
          "internalType": "contract IPits",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "removeAnimalsFromLaborGround",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestOwnershipHandover",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pits",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_animals",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_supplies",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_consumables",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_neandersmol",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_randomizer",
          "type": "address"
        }
      ],
      "name": "setAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplies",
      "outputs": [
        {
          "internalType": "contract IERC1155Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4df5b8f491ba7e6b5c96c85337d65543e18096c934e07d53a2a7fdb2f0eaa693",
  "receipt": {
    "to": null,
    "from": "0xc8dd8da93c79F00FbFcdDb5bBbb1233A02cF0296",
    "contractAddress": "0x0fb4027f54072e983a41ffb5A6fA196c8F6BC06E",
    "transactionIndex": 2,
    "gasUsed": "22487855",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x486cc130e68a87a9623929fbe0366e0e21aebb24f8ffd5d3704ebcfe4c795225",
    "transactionHash": "0x4df5b8f491ba7e6b5c96c85337d65543e18096c934e07d53a2a7fdb2f0eaa693",
    "logs": [],
    "blockNumber": 92720338,
    "cumulativeGasUsed": "24193446",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "1bf3a2ea9c4874b44cf17aa1ddce101d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CannotClaimNow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CsToHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DevelopmentGroundIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenForThisJob\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthsNotEqual\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoHandoverRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoMoreAnimalsAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIsStaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"animalsId\",\"type\":\"uint256\"}],\"name\":\"BringInAnimalsToLaborGround\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ClaimCollectable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"supplyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Jobs\",\"name\":\"job\",\"type\":\"uint8\"}],\"name\":\"EnterLaborGround\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LeaveLaborGround\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"animalsId\",\"type\":\"uint256\"}],\"name\":\"RemoveAnimalsFromLaborGround\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"animals\",\"outputs\":[{\"internalType\":\"contract IERC1155Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_animalsId\",\"type\":\"uint256[]\"}],\"name\":\"bringInAnimalsToLaborGround\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"claimCollectables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"completeOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consumables\",\"outputs\":[{\"internalType\":\"contract IConsumables\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_supplyId\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Jobs[]\",\"name\":\"_job\",\"type\":\"uint8[]\"}],\"name\":\"enterLaborGround\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getLaborGroundFeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"timeLeft\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tokenId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"animalId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"supplyId\",\"type\":\"uint64\"}],\"internalType\":\"struct LaborGroundFeInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLaborGroundInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"supplyId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"animalId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"enum Jobs\",\"name\":\"job\",\"type\":\"uint8\"}],\"internalType\":\"struct LaborGround\",\"name\":\"lg\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getStakedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pits\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_animals\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_supplies\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consumables\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_neandersmol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomizer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"leaveLaborGround\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"neandersmol\",\"outputs\":[{\"internalType\":\"contract INeandersmol\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"ownershipHandoverExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipHandoverValidFor\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pits\",\"outputs\":[{\"internalType\":\"contract IPits\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"removeAnimalsFromLaborGround\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pits\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_animals\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_supplies\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consumables\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_neandersmol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomizer\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplies\",\"outputs\":[{\"internalType\":\"contract IERC1155Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NewOwnerIsZeroAddress()\":[{\"details\":\"The `newOwner` cannot be the zero address.\"}],\"NoHandoverRequest()\":[{\"details\":\"The `pendingOwner` does not have a valid handover request.\"}],\"Unauthorized()\":[{\"details\":\"The caller is not authorized to call the function.\"}]},\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"OwnershipHandoverCanceled(address)\":{\"details\":\"The ownership handover to `pendingOwner` has been canceled.\"},\"OwnershipHandoverRequested(address)\":{\"details\":\"An ownership handover to `pendingOwner` has been requested.\"},\"OwnershipTransferred(address,address)\":{\"details\":\"The ownership is transferred from `oldOwner` to `newOwner`. This event is intentionally kept the same as OpenZeppelin's Ownable to be compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173), despite it not being as lightweight as a single argument event.\"}},\"kind\":\"dev\",\"methods\":{\"bringInAnimalsToLaborGround(uint256[],uint256[])\":{\"params\":{\"_animalsId\":\"An array of token IDs representing the animals.\",\"_tokenId\":\"An array of token IDs representing the labor grounds.\"}},\"cancelOwnershipHandover()\":{\"details\":\"Cancels the two-step ownership handover to the caller, if any.\"},\"claimCollectables(uint256[])\":{\"details\":\"This function allows a user to claim multiple collectables at once by providing an array of token IDs.\",\"params\":{\"_tokenId\":\"An array of token IDs that the user wants to claim.\"}},\"completeOwnershipHandover(address)\":{\"details\":\"Allows the owner to complete the two-step ownership handover to `pendingOwner`. Reverts if there is no existing ownership handover requested by `pendingOwner`.\"},\"enterLaborGround(uint256[],uint256[],uint8[])\":{\"params\":{\"_job\":\"Array of jobs assigned to the labor grounds.\",\"_supplyId\":\"Array of supply IDs associated with the labor grounds.\",\"_tokenId\":\"Array of token IDs of the labor grounds.\"}},\"getLaborGroundInfo(uint256)\":{\"details\":\"This function returns a LaborGround struct containing information about a Labor Ground token, specified by its ID, _tokenId.\",\"params\":{\"_tokenId\":\"ID of the Labor Ground token to retrieve information for\"},\"returns\":{\"lg\":\"The LaborGround struct containing information about the specified Labor Ground token.\"}},\"getStakedTokens(address)\":{\"details\":\"Returns an array of token IDs that are currently staked by the given owner.\",\"params\":{\"_owner\":\"The address of the owner.\"},\"returns\":{\"_0\":\"An array of staked token IDs.\"}},\"leaveLaborGround(uint256[])\":{\"details\":\"This function allows a user to leave the LaborGround and receive their animal, supply, and collectable.\",\"params\":{\"_tokenId\":\"An array of token IDs that the user wants to leave.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"This function is the onERC1155Received fallback function for the contract, which is triggered when the contract receives an ERC1155 token transfer.\",\"returns\":{\"_0\":\"The selector for this function, \\\"0x20f90a7e\\\".\"}},\"owner()\":{\"details\":\"Returns the owner of the contract.\"},\"ownershipHandoverExpiresAt(address)\":{\"details\":\"Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\"},\"ownershipHandoverValidFor()\":{\"details\":\"Returns how long a two-step ownership handover is valid for in seconds.\"},\"removeAnimalsFromLaborGround(uint256[])\":{\"params\":{\"_tokenId\":\"Array of token IDs of the labor grounds.\"}},\"renounceOwnership()\":{\"details\":\"Allows the owner to renounce their ownership.\"},\"requestOwnershipHandover()\":{\"details\":\"Request a two-step ownership handover to the caller. The request will be automatically expire in 48 hours (172800 seconds) by default.\"},\"transferOwnership(address)\":{\"details\":\"Allows the owner to transfer the ownership to `newOwner`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bringInAnimalsToLaborGround(uint256[],uint256[])\":{\"notice\":\"Brings in animals to the labor ground by calling the bringInAnimalsToLaborGround function in the Lib library and transferring the ownership of the animal token from the sender to the contract.\"},\"enterLaborGround(uint256[],uint256[],uint8[])\":{\"notice\":\"Enters the labor ground with specified token ID and supply ID, and assigns the job to it. Transfers the token and supply ownership to the contract. Emits the \\\"EnterLaborGround\\\" event.\"},\"getLaborGroundInfo(uint256)\":{\"notice\":\"Retrieve information about a Labor Ground token.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handle incoming ERC1155 token transfers.\"},\"removeAnimalsFromLaborGround(uint256[])\":{\"notice\":\"Removes the animals from the specified labor ground. Transfers the ownership of the animals back to the sender.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LaborGrounds.sol\":\"LaborGrounds\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/LaborGrounds.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { Lib } from \\\"./library/Lib.sol\\\";\\nimport { IPits } from \\\"./interfaces/IPits.sol\\\";\\nimport { IRandomizer } from \\\"./interfaces/IRandomizer.sol\\\";\\nimport { INeandersmol } from \\\"./interfaces/INeandersmol.sol\\\";\\nimport { SafeTransferLib } from \\\"solady/src/utils/SafeTransferLib.sol\\\";\\nimport { Ownable } from \\\"solady/src/auth/Ownable.sol\\\";\\nimport {\\n    IConsumables,\\n    IERC1155Upgradeable\\n} from \\\"./interfaces/IConsumables.sol\\\";\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport {\\n    LengthsNotEqual,\\n    NotYourToken,\\n    CannotClaimNow,\\n    InvalidTokenForThisJob,\\n    CsToHigh,\\n    NoMoreAnimalsAllowed,\\n    TokenIsStaked\\n} from \\\"./library/Error.sol\\\";\\n\\nimport {\\n    Jobs,\\n    Grounds,\\n    LaborGround,\\n    LaborGroundFeInfo\\n} from \\\"./library/StructsEnums.sol\\\";\\n\\nimport { ISupplies } from \\\"./interfaces/ISupplies.sol\\\";\\n\\ncontract LaborGrounds is Initializable, Ownable {\\n    IPits public pits;\\n    IRandomizer private randomizer;\\n    IConsumables public consumables;\\n    INeandersmol public neandersmol;\\n    IERC1155Upgradeable public animals;\\n    IERC1155Upgradeable public supplies;\\n\\n    uint32 constant MAX_UINT32 = type(uint32).max;\\n\\n    mapping(uint256 => LaborGround) private laborGround;\\n\\n    mapping(address => uint256[]) private ownerToTokens;\\n\\n    function initialize(\\n        address _pits,\\n        address _animals,\\n        address _supplies,\\n        address _consumables,\\n        address _neandersmol,\\n        address _randomizer\\n    ) external initializer {\\n        _initializeOwner(msg.sender);\\n        setAddress(\\n            _pits,\\n            _animals,\\n            _supplies,\\n            _consumables,\\n            _neandersmol,\\n            _randomizer\\n        );\\n    }\\n\\n    function setAddress(\\n        address _pits,\\n        address _animals,\\n        address _supplies,\\n        address _consumables,\\n        address _neandersmol,\\n        address _randomizer\\n    ) public onlyOwner {\\n        animals = IERC1155Upgradeable(_animals);\\n        pits = IPits(_pits);\\n        supplies = IERC1155Upgradeable(_supplies);\\n        randomizer = IRandomizer(_randomizer);\\n        consumables = IConsumables(_consumables);\\n        neandersmol = INeandersmol(_neandersmol);\\n    }\\n\\n    /**\\n     * @notice Enters the labor ground with specified token ID and supply ID,\\n     * and assigns the job to it. Transfers the token and supply ownership to the contract.\\n     * Emits the \\\"EnterLaborGround\\\" event.\\n     * @param _tokenId Array of token IDs of the labor grounds.\\n     * @param _supplyId Array of supply IDs associated with the labor grounds.\\n     * @param _job Array of jobs assigned to the labor grounds.\\n     */\\n\\n    function enterLaborGround(\\n        uint256[] calldata _tokenId,\\n        uint256[] calldata _supplyId,\\n        Jobs[] calldata _job\\n    ) external {\\n        Lib.pitsValidation(pits);\\n        checkLength(_tokenId, _supplyId);\\n        if (_supplyId.length != _job.length) revert LengthsNotEqual();\\n        uint256 i;\\n        for (; i < _tokenId.length; ++i) {\\n            (uint256 tokenId, uint256 supplyId) = (_tokenId[i], _supplyId[i]);\\n            if (neandersmol.staked(tokenId)) revert TokenIsStaked();\\n            if (neandersmol.ownerOf(tokenId) != msg.sender)\\n                revert NotYourToken();\\n            if (neandersmol.getCommonSense(tokenId) > 99) revert CsToHigh();\\n            if (!validateTokenId(supplyId, _job[i]))\\n                revert InvalidTokenForThisJob();\\n            supplies.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                supplyId,\\n                1,\\n                \\\"\\\"\\n            );\\n\\n            laborGround[tokenId] = LaborGround(\\n                msg.sender,\\n                uint32(block.timestamp),\\n                uint32(supplyId),\\n                MAX_UINT32,\\n                randomizer.requestRandomNumber(),\\n                _job[i]\\n            );\\n            neandersmol.stakingHandler(tokenId, true);\\n            ownerToTokens[msg.sender].push(tokenId);\\n            emit EnterLaborGround(msg.sender, tokenId, supplyId, _job[i]);\\n        }\\n    }\\n\\n    /**\\n     *  Brings in animals to the labor ground by calling the bringInAnimalsToLaborGround function in the Lib library and transferring the ownership of the animal token from the sender to the contract.\\n     * @param _tokenId An array of token IDs representing the labor grounds.\\n     * @param _animalsId An array of token IDs representing the animals.\\n     */\\n\\n    function bringInAnimalsToLaborGround(\\n        uint256[] calldata _tokenId,\\n        uint256[] calldata _animalsId\\n    ) external {\\n        checkLength(_tokenId, _animalsId);\\n        uint256 i;\\n        for (; i < _tokenId.length; ++i) {\\n            uint256 animalsId = _animalsId[i];\\n            LaborGround memory labor = laborGround[_tokenId[i]];\\n            if (labor.owner != msg.sender) revert NotYourToken();\\n            if (labor.animalId != MAX_UINT32) revert NoMoreAnimalsAllowed();\\n            animals.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                animalsId,\\n                1,\\n                \\\"\\\"\\n            );\\n            laborGround[_tokenId[i]].animalId = uint32(animalsId);\\n\\n            emit BringInAnimalsToLaborGround(\\n                msg.sender,\\n                _tokenId[i],\\n                animalsId\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes the animals from the specified labor ground.\\n     * Transfers the ownership of the animals back to the sender.\\n     * @param _tokenId Array of token IDs of the labor grounds.\\n\\n     */\\n    function removeAnimalsFromLaborGround(\\n        uint256[] calldata _tokenId\\n    ) external {\\n        uint256 i;\\n        for (; i < _tokenId.length; ++i) {\\n            LaborGround memory labor = laborGround[_tokenId[i]];\\n            uint256 animalsId = labor.animalId;\\n            if (labor.owner != msg.sender || animalsId == MAX_UINT32)\\n                revert NotYourToken();\\n            laborGround[_tokenId[i]].animalId = MAX_UINT32;\\n            animals.safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                animalsId,\\n                1,\\n                \\\"\\\"\\n            );\\n\\n            emit RemoveAnimalsFromLaborGround(\\n                msg.sender,\\n                _tokenId[i],\\n                animalsId\\n            );\\n        }\\n    }\\n\\n    /**\\n     * This function allows the token owner to claim a collectable. If the token owner is not the same as the\\n     * stored owner or the lock time has not yet passed, the function will revert. If there are possible claims,\\n     * a consumables token will be minted for the token owner. The lock time for the labor ground is then updated.\\n     * @param _tokenId The id of the labor ground token being claimed.\\n     */\\n\\n    function claimCollectable(uint256 _tokenId) internal returns (bool) {\\n        LaborGround memory labor = laborGround[_tokenId];\\n        if (msg.sender != labor.owner) revert NotYourToken();\\n        if (block.timestamp < labor.lockTime + 3 days) revert CannotClaimNow();\\n        (uint256 consumablesTokenId, bool broken) = checkPossibleClaims(\\n            _tokenId,\\n            labor\\n        );\\n        if (consumablesTokenId != 0)\\n            consumables.mint(msg.sender, consumablesTokenId, 1);\\n\\n        laborGround[_tokenId].lockTime = uint32(block.timestamp);\\n        emit ClaimCollectable(msg.sender, _tokenId);\\n\\n        return broken;\\n    }\\n\\n    /** \\n    *@dev This function allows a user to claim multiple collectables at once by providing an array of token IDs.\\n     @param _tokenId An array of token IDs that the user wants to claim.\\n*/\\n    function claimCollectables(uint256[] calldata _tokenId) external {\\n        for (uint256 i; i < _tokenId.length; ++i) claimCollectable(_tokenId[i]);\\n    }\\n\\n    /**\\n     * @dev This function decides whether the supply will break or fail when the random number generated is smaller than `_min`.\\n     * @param _tokenId ID of the token that the supply is associated with.\\n     * @param _supplyId ID of the supply.\\n     */\\n\\n    function breakOrFailed(\\n        uint256 _tokenId,\\n        uint256 _supplyId,\\n        uint256 _random\\n    ) internal returns (bool) {\\n        if (_random == 0) {\\n            laborGround[_tokenId].supplyId = 0;\\n            ISupplies(address(supplies)).burn(address(this), _supplyId, 1);\\n            leaveLg(_tokenId);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function leaveLg(uint256 _tokenId) internal {\\n        LaborGround memory labor = laborGround[_tokenId];\\n        if (labor.owner != msg.sender) revert NotYourToken();\\n        delete laborGround[_tokenId];\\n        Lib.removeItem(ownerToTokens[msg.sender], _tokenId);\\n        if (labor.animalId != MAX_UINT32)\\n            animals.safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                labor.animalId,\\n                1,\\n                \\\"\\\"\\n            );\\n\\n        if (labor.supplyId != 0)\\n            supplies.safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                labor.supplyId,\\n                1,\\n                \\\"\\\"\\n            );\\n        if (neandersmol.staked(_tokenId))\\n            neandersmol.stakingHandler(_tokenId, false);\\n        emit LeaveLaborGround(msg.sender, _tokenId);\\n    }\\n\\n    /**\\n     * @dev This function allows a user to leave the LaborGround and receive their animal, supply, and collectable.\\n     * @param _tokenId An array of token IDs that the user wants to leave.\\n     */\\n\\n    function leaveLaborGround(uint256[] calldata _tokenId) external {\\n        uint256 i;\\n\\n        for (; i < _tokenId.length; ++i) {\\n            uint256 tokenId = _tokenId[i];\\n            if (!claimCollectable(tokenId)) leaveLg(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check the possible claims of an animal job\\n     * @param _tokenId ID of the token\\n     * @param labor LaborGround struct with the information of the job\\n     * @return consumablesTokenId The token ID of the consumables to be claimed\\n     */\\n\\n    function checkPossibleClaims(\\n        uint256 _tokenId,\\n        LaborGround memory labor\\n    ) internal returns (uint256, bool) {\\n        uint256 rnd = randomizer.revealRandomNumber(labor.requestId) % 101;\\n        uint256 animalId = labor.animalId;\\n        uint256 consumablesTokenId;\\n        (uint256 tokenOne, uint256 tokenTwo) = getConsumablesTokenId(labor.job);\\n        bool breakTool;\\n        if (animalId == MAX_UINT32) {\\n            if (rnd < 61) {\\n                consumablesTokenId = tokenOne;\\n            } else if (rnd > 60 && rnd < 81) {\\n                consumablesTokenId = tokenTwo;\\n            } else {\\n                breakTool = true;\\n            }\\n        }\\n        if (animalId == 0) {\\n            if (rnd < 66) {\\n                consumablesTokenId = tokenOne;\\n            } else if (rnd > 66 && rnd < 86) {\\n                consumablesTokenId = tokenTwo;\\n            } else {\\n                breakTool = true;\\n            }\\n        }\\n        if (animalId == 1) {\\n            if (rnd < 66) {\\n                consumablesTokenId = tokenOne;\\n            } else if (rnd > 65 && rnd < 96) {\\n                consumablesTokenId = tokenTwo;\\n            } else {\\n                breakTool = true;\\n            }\\n        }\\n        if (animalId == 2) {\\n            if (rnd < 71) {\\n                consumablesTokenId = tokenOne;\\n            } else if (rnd > 70 && rnd < 96) {\\n                consumablesTokenId = tokenTwo;\\n            } else {\\n                return (0, false);\\n            }\\n        }\\n        bool broken;\\n        if (breakTool)\\n            broken = breakOrFailed(\\n                _tokenId,\\n                labor.supplyId,\\n                randomizer.revealRandomNumber(labor.requestId) % 2\\n            );\\n\\n        if (animalId == 3) consumablesTokenId = rnd < 71 ? tokenOne : tokenTwo;\\n\\n        if (animalId == 4) consumablesTokenId = rnd < 66 ? tokenOne : tokenTwo;\\n\\n        if (animalId == 5) consumablesTokenId = rnd < 61 ? tokenOne : tokenTwo;\\n\\n        return (consumablesTokenId, broken);\\n    }\\n\\n    /**\\n     * @dev Function to get the consumables token IDs based on the job type\\n     * @param _job Job type\\n     * @return tokenIdOne and tokenIdTwo The token IDs of the consumables for the job\\n     */\\n\\n    function getConsumablesTokenId(\\n        Jobs _job\\n    ) internal pure returns (uint256 tokenIdOne, uint256 tokenIdTwo) {\\n        if (_job == Jobs.Digging) (tokenIdOne, tokenIdTwo) = (1, 4);\\n        if (_job == Jobs.Foraging) (tokenIdOne, tokenIdTwo) = (2, 5);\\n        if (_job == Jobs.Mining) (tokenIdOne, tokenIdTwo) = (3, 6);\\n    }\\n\\n    /**\\n     *Check the length of two input arrays, _tokenId and _animalsId, for equality.\\n     *If the lengths are not equal, the function will revert with the error \\\"LengthsNotEqual\\\".\\n     *@dev Internal function called by other functions within the contract.\\n     *@param _tokenId Array of token IDs\\n     */\\n\\n    function checkLength(\\n        uint256[] calldata _tokenId,\\n        uint256[] calldata _animalsId\\n    ) internal pure {\\n        if (_tokenId.length != _animalsId.length) revert LengthsNotEqual();\\n    }\\n\\n    /**\\n     * Handle incoming ERC1155 token transfers.\\n     * @dev This function is the onERC1155Received fallback function for the contract, which is triggered when the contract receives an ERC1155 token transfer.\\n     * @return The selector for this function, \\\"0x20f90a7e\\\".\\n     */\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function validateTokenId(\\n        uint256 _tokenId,\\n        Jobs _job\\n    ) internal pure returns (bool res) {\\n        if (_job == Jobs.Digging) return _tokenId == 1;\\n        if (_job == Jobs.Foraging) return _tokenId == 2;\\n        if (_job == Jobs.Mining) return _tokenId == 3;\\n    }\\n\\n    /*                                                                           */\\n    /*                           VIEW FUNCTIONS                                  */\\n    /*                                                                           */\\n\\n    /**\\n     * Retrieve information about a Labor Ground token.\\n     * @dev This function returns a LaborGround struct containing information about a Labor Ground token, specified by its ID, _tokenId.\\n     * @param _tokenId ID of the Labor Ground token to retrieve information for\\n     * @return lg The LaborGround struct containing information about the specified Labor Ground token.\\n     */\\n\\n    function getLaborGroundInfo(\\n        uint256 _tokenId\\n    ) public view returns (LaborGround memory lg) {\\n        return laborGround[_tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs that are currently staked by the given owner.\\n     * @param _owner The address of the owner.\\n     * @return An array of staked token IDs.\\n     */\\n\\n    function getStakedTokens(\\n        address _owner\\n    ) external view returns (uint256[] memory) {\\n        return ownerToTokens[_owner];\\n    }\\n\\n    function getLaborGroundFeInfo(\\n        address _owner\\n    ) external view returns (LaborGroundFeInfo[] memory) {\\n        uint256[] memory stakedTokens = ownerToTokens[_owner];\\n        LaborGroundFeInfo[] memory userInfo = new LaborGroundFeInfo[](\\n            stakedTokens.length\\n        );\\n\\n        uint256 i;\\n        for (; i < stakedTokens.length; ++i) {\\n            uint256 tokenId = stakedTokens[i];\\n            uint256 animalId = getLaborGroundInfo(tokenId).animalId;\\n            uint256 timeLeft = block.timestamp <\\n                3 days + getLaborGroundInfo(tokenId).lockTime\\n                ? 3 days -\\n                    (block.timestamp - getLaborGroundInfo(tokenId).lockTime)\\n                : 0;\\n            userInfo[i] = LaborGroundFeInfo(\\n                uint64(timeLeft),\\n                uint64(tokenId),\\n                uint64(animalId),\\n                uint64(getLaborGroundInfo(tokenId).supplyId)\\n            );\\n        }\\n\\n        return userInfo;\\n    }\\n\\n    event ClaimCollectable(address indexed owner, uint256 indexed tokenId);\\n\\n    event LeaveLaborGround(address indexed owner, uint256 indexed tokenId);\\n\\n    event RemoveAnimalsFromLaborGround(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 indexed animalsId\\n    );\\n\\n    event BringInAnimalsToLaborGround(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 indexed animalsId\\n    );\\n\\n    event EnterLaborGround(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 indexed supplyId,\\n        Jobs job\\n    );\\n}\\n\",\"keccak256\":\"0x8cf249ecf85c2adba4bd13bfa0cc1b6220c4f545ce70052fa2a91859877c69b9\",\"license\":\"MIT\"},\"contracts/interfaces/IConsumables.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IERC1155Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface IConsumables is IERC1155Upgradeable {\\n    function mint(address _to, uint256 _tokenId, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x792adb45e0e08fd91bce129ddb88c547a29dc3226c6a977d91770ac18baf1f0b\",\"license\":\"MIT\"},\"contracts/interfaces/INeandersmol.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {\\n    IERC721Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface INeandersmol is IERC721Upgradeable {\\n    function getCommonSense(uint256 _tokenId) external view returns (uint256);\\n\\n    function staked(uint256 _tokenId) external view returns (bool);\\n\\n    function developMystics(uint256 _tokenId, uint256 _amount) external;\\n\\n    function developFarmers(uint256 _tokenId, uint256 _amount) external;\\n\\n    function developFighter(uint256 _tokenId, uint256 _amount) external;\\n\\n    function stakingHandler(uint256 _tokenId, bool _state) external;\\n}\\n\",\"keccak256\":\"0x009d81425f2e93c76d30ce6b9710f2917bb404048631fc7c4a94a522fdb8b079\",\"license\":\"MIT\"},\"contracts/interfaces/IPits.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\ninterface IPits {\\n    function validation() external view returns (bool);\\n\\n    function getTimeOut() external view returns (uint256);\\n\\n    function getTimeBelowMinimum() external view returns (uint256);\\n\\n    function getDaysOff(uint256 _timestamp) external view returns (uint256);\\n\\n    function getTotalDaysOff() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x78f6bd4f83335ef0ba713cc1a9b42c6ed988422dd53468e72c0c86526acdedff\",\"license\":\"MIT\"},\"contracts/interfaces/IRandomizer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\ninterface IRandomizer {\\n    // Returns a request ID for a random number. This is unique.\\n    function requestRandomNumber() external returns (uint256);\\n\\n    // Returns the random number for the given request ID. Will revert\\n    // if the random is not ready.\\n    function revealRandomNumber(\\n        uint256 _requestId\\n    ) external view returns (uint256);\\n\\n    // Returns if the random number for the given request ID is ready or not. Call\\n    // before calling revealRandomNumber.\\n    function isRandomReady(uint256 _requestId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x93a0e61fc97c543da993320b700966b07ca068c49324369daa35deddd2762b7d\",\"license\":\"MIT\"},\"contracts/interfaces/ISupplies.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface ISupplies {\\n    function burn(address _from, uint256 _id, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xdf09d7d70b300ff0b3dd5c1344838a0ba5f7490d11f25c07bc1919073700b170\",\"license\":\"MIT\"},\"contracts/library/Error.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nerror CsToHigh();\\nerror InvalidPos();\\nerror NotAContract();\\nerror NotYourToken();\\nerror NotAuthorized();\\nerror WrongMultiple();\\nerror CannotClaimNow();\\nerror TokenIsStaked();\\nerror TransferFailed();\\nerror InvalidTokenId();\\nerror InvalidLockTime();\\nerror NoMoreAnimalsAllowed();\\nerror LengthsNotEqual();\\nerror ZeroBalanceError();\\nerror CsIsBellowHundred();\\nerror NeandersmolsIsLocked();\\nerror BalanceIsInsufficient();\\nerror InvalidTokenForThisJob();\\nerror DevelopmentGroundIsLocked();\\nerror NeandersmolIsNotInDevelopmentGround();\\n\",\"keccak256\":\"0x56051af5581bf87b8516ff3dd73a00f3d48ac3aa631dfa2926525587aaad2e93\",\"license\":\"MIT\"},\"contracts/library/Lib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IPits } from \\\"../interfaces/IPits.sol\\\";\\nimport { DevelopmentGroundIsLocked } from \\\"./Error.sol\\\";\\n\\nlibrary Lib {\\n    function getDevGroundBonesReward(\\n        uint256 _currentLockPeriod,\\n        uint256 _lockPeriod,\\n        uint256 _lastRewardTime,\\n        IPits _pits\\n    ) internal view returns (uint256) {\\n        if (_lockPeriod == 0) return 0;\\n        uint256 rewardRate = getRewardRate(_lockPeriod);\\n\\n        uint256 time = (block.timestamp - _lastRewardTime) / 1 days;\\n\\n        if (time == 0) return 0;\\n        uint256 toBeRomoved = calculateFinalReward(_currentLockPeriod, _pits);\\n        return ((rewardRate * time) - (toBeRomoved * rewardRate)) * 10 ** 18;\\n    }\\n\\n    function calculatePrimarySkill(\\n        uint256 _bonesStaked,\\n        uint256 _amountPosition,\\n        uint256 _currentLockPeriod,\\n        uint256 _tokenId,\\n        IPits _pits,\\n        mapping(uint256 => mapping(uint256 => uint256)) storage trackTime,\\n        mapping(uint256 => mapping(uint256 => uint256)) storage trackToken\\n    ) internal view returns (uint256) {\\n        if (_bonesStaked == 0) return 0;\\n        uint256 amount;\\n        uint256 i = 1;\\n        for (; i <= _amountPosition; ) {\\n            uint256 time = (block.timestamp - trackTime[_tokenId][i]) / 1 days;\\n            uint256 stakedAmount = trackToken[_tokenId][trackTime[_tokenId][i]];\\n            amount += (time * stakedAmount);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        uint256 toBeRemoved = calculateFinalReward(_currentLockPeriod, _pits);\\n        return (amount - (toBeRemoved * 10 ** 21)) / 10 ** 4;\\n    }\\n\\n    function calculateFinalReward(\\n        uint256 /* _currentLockPeriod*/,\\n        IPits /*_pits*/\\n    ) internal view returns (uint256) {\\n        return 0;\\n        // if (_currentLockPeriod == 0) {\\n        //     console.log(_currentLockPeriod);\\n        //     if (_pits.getTotalDaysOff() == 0) {\\n        //         return\\n        //             _pits.getTimeOut() == 0\\n        //                 ? 0\\n        //                 : (block.timestamp - _pits.getTimeOut()) / 1 days;\\n        //     } else {\\n        //         return _pits.getTotalDaysOff();\\n        //     }\\n        // } else {\\n        //     uint256 howLong = (block.timestamp - _pits.getTimeOut()) / 1 days;\\n\\n        //     if (_pits.getTotalDaysOff() == 0) {\\n        //         return 0;\\n        //     } else {\\n        //         return\\n        //             _pits.getTimeOut() == _currentLockPeriod &&\\n        //                 _pits.validation()\\n        //                 ? 0\\n        //                 : (_pits.getTotalDaysOff() -\\n        //                     (_pits.getDaysOff(_currentLockPeriod) + howLong));\\n        //     }\\n        // }\\n    }\\n\\n    function getRewardRate(\\n        uint _lockTime\\n    ) internal pure returns (uint256 rewardRate) {\\n        if (_lockTime == 50 days) rewardRate = 10;\\n        if (_lockTime == 100 days) rewardRate = 50;\\n        if (_lockTime == 150 days) rewardRate = 100;\\n    }\\n\\n    function pitsValidation(IPits _pits) internal view {\\n        if (!_pits.validation()) revert DevelopmentGroundIsLocked();\\n    }\\n\\n    function removeItem(\\n        uint256[] storage _element,\\n        uint256 _removeElement\\n    ) internal {\\n        uint256 i;\\n        for (; i < _element.length; ) {\\n            if (_element[i] == _removeElement) {\\n                _element[i] = _element[_element.length - 1];\\n                _element.pop();\\n                break;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x891f41e94892a20be5ff767eb29b897990d0c067a5e7dd6328b08c486777aa0c\",\"license\":\"MIT\"},\"contracts/library/StructsEnums.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nstruct DevelopmentGround {\\n    address owner;\\n    uint64 lockPeriod;\\n    uint64 amountPosition;\\n    uint64 entryTime;\\n    uint64 lastRewardTime;\\n    uint256 bonesStaked;\\n    uint256 currentPitsLockPeriod;\\n    Grounds ground;\\n}\\n\\nstruct LaborGround {\\n    address owner;\\n    uint32 lockTime;\\n    uint32 supplyId;\\n    uint32 animalId;\\n    uint256 requestId;\\n    Jobs job;\\n}\\n\\nstruct Cave {\\n    address owner;\\n    uint48 stakingTime;\\n    uint48 lastRewardTimestamp;\\n}\\n\\nstruct CavesFeInfo {\\n    uint256 reward;\\n    uint128 stakedSmols;\\n    uint128 timeLeft;\\n}\\n\\nstruct DevGroundFeInfo {\\n    uint96 timeLeft;\\n    uint96 daysStaked;\\n    uint64 stakedSmols;\\n    uint256 skillLevel;\\n    uint256 bonesAccured;\\n    uint256 totalBonesStaked;\\n    Grounds ground;\\n}\\n\\nstruct BonesFeInfo {\\n    uint256 balance;\\n    uint256 timeStaked;\\n}\\n\\nstruct LaborGroundFeInfo {\\n    uint64 timeLeft;\\n    uint64 tokenId;\\n    uint64 animalId;\\n    uint64 supplyId;\\n}\\n\\n/**\\n * token id\\n * bones occured\\n * primary skill level\\n * days left\\n */\\n\\nenum Jobs {\\n    Digging,\\n    Foraging,\\n    Mining\\n}\\n\\nenum Grounds {\\n    Chambers,\\n    Garden,\\n    Battlefield\\n}\\n\",\"keccak256\":\"0x81c31e6fb0100f35f8e1ffa09ae954eb32bc120c1e977eb9028e7f3e8acb812b\",\"license\":\"MIT\"},\"solady/src/auth/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\\n/// @dev While the ownable portion follows [EIP-173](https://eips.ethereum.org/EIPS/eip-173)\\n/// for compatibility, the nomenclature for the 2-step ownership handover\\n/// may be unique to this codebase.\\nabstract contract Ownable {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The caller is not authorized to call the function.\\n    error Unauthorized();\\n\\n    /// @dev The `newOwner` cannot be the zero address.\\n    error NewOwnerIsZeroAddress();\\n\\n    /// @dev The `pendingOwner` does not have a valid handover request.\\n    error NoHandoverRequest();\\n\\n    /// @dev `bytes4(keccak256(bytes(\\\"Unauthorized()\\\")))`.\\n    uint256 private constant _UNAUTHORIZED_ERROR_SELECTOR = 0x82b42900;\\n\\n    /// @dev `bytes4(keccak256(bytes(\\\"NewOwnerIsZeroAddress()\\\")))`.\\n    uint256 private constant _NEW_OWNER_IS_ZERO_ADDRESS_ERROR_SELECTOR = 0x7448fbae;\\n\\n    /// @dev `bytes4(keccak256(bytes(\\\"NoHandoverRequest()\\\")))`.\\n    uint256 private constant _NO_HANDOVER_REQUEST_ERROR_SELECTOR = 0x6f5e8818;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\\n    /// despite it not being as lightweight as a single argument event.\\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @dev An ownership handover to `pendingOwner` has been requested.\\n    event OwnershipHandoverRequested(address indexed pendingOwner);\\n\\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipTransferred(address,address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverRequested(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverCanceled(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The owner slot is given by: `not(_OWNER_SLOT_NOT)`.\\n    /// It is intentionally choosen to be a high value\\n    /// to avoid collision with lower slots.\\n    /// The choice of manual storage layout is to enable compatibility\\n    /// with both regular and upgradeable contracts.\\n    uint256 private constant _OWNER_SLOT_NOT = 0x8b78c6d8;\\n\\n    /// The ownership handover slot of `newOwner` is given by:\\n    /// ```\\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\\n    ///     let handoverSlot := keccak256(0x00, 0x20)\\n    /// ```\\n    /// It stores the expiry timestamp of the two-step ownership handover.\\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     INTERNAL FUNCTIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Initializes the owner directly without authorization guard.\\n    /// This function must be called upon initialization,\\n    /// regardless of whether the contract is upgradeable or not.\\n    /// This is to enable generalization to both regular and upgradeable contracts,\\n    /// and to save gas in case the initial owner is not the caller.\\n    /// For performance reasons, this function will not check if there\\n    /// is an existing owner.\\n    function _initializeOwner(address newOwner) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clean the upper 96 bits.\\n            newOwner := shr(96, shl(96, newOwner))\\n            // Store the new value.\\n            sstore(not(_OWNER_SLOT_NOT), newOwner)\\n            // Emit the {OwnershipTransferred} event.\\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\\n        }\\n    }\\n\\n    /// @dev Sets the owner directly without authorization guard.\\n    function _setOwner(address newOwner) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ownerSlot := not(_OWNER_SLOT_NOT)\\n            // Clean the upper 96 bits.\\n            newOwner := shr(96, shl(96, newOwner))\\n            // Emit the {OwnershipTransferred} event.\\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\\n            // Store the new value.\\n            sstore(ownerSlot, newOwner)\\n        }\\n    }\\n\\n    /// @dev Throws if the sender is not the owner.\\n    function _checkOwner() internal view virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If the caller is not the stored owner, revert.\\n            if iszero(eq(caller(), sload(not(_OWNER_SLOT_NOT)))) {\\n                mstore(0x00, _UNAUTHORIZED_ERROR_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(shl(96, newOwner)) {\\n                mstore(0x00, _NEW_OWNER_IS_ZERO_ADDRESS_ERROR_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /// @dev Allows the owner to renounce their ownership.\\n    function renounceOwnership() public payable virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /// @dev Request a two-step ownership handover to the caller.\\n    /// The request will be automatically expire in 48 hours (172800 seconds) by default.\\n    function requestOwnershipHandover() public payable virtual {\\n        unchecked {\\n            uint256 expires = block.timestamp + ownershipHandoverValidFor();\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Compute and set the handover slot to `expires`.\\n                mstore(0x0c, _HANDOVER_SLOT_SEED)\\n                mstore(0x00, caller())\\n                sstore(keccak256(0x0c, 0x20), expires)\\n                // Emit the {OwnershipHandoverRequested} event.\\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\\n            }\\n        }\\n    }\\n\\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\\n    function cancelOwnershipHandover() public payable virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x20), 0)\\n            // Emit the {OwnershipHandoverCanceled} event.\\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\\n        }\\n    }\\n\\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            let handoverSlot := keccak256(0x0c, 0x20)\\n            // If the handover does not exist, or has expired.\\n            if gt(timestamp(), sload(handoverSlot)) {\\n                mstore(0x00, _NO_HANDOVER_REQUEST_ERROR_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n            // Set the handover slot to 0.\\n            sstore(handoverSlot, 0)\\n        }\\n        _setOwner(pendingOwner);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   PUBLIC READ FUNCTIONS                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the owner of the contract.\\n    function owner() public view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := sload(not(_OWNER_SLOT_NOT))\\n        }\\n    }\\n\\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\\n    function ownershipHandoverExpiresAt(address pendingOwner)\\n        public\\n        view\\n        virtual\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the handover slot.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            // Load the handover slot.\\n            result := sload(keccak256(0x0c, 0x20))\\n        }\\n    }\\n\\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\\n    function ownershipHandoverValidFor() public view virtual returns (uint64) {\\n        return 48 * 3600;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         MODIFIERS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Marks a function as only callable by the owner.\\n    modifier onlyOwner() virtual {\\n        _checkOwner();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdbe39ea9c0007f470d5c9b54dc21d7d41e4580a8ec57a81d183fc5ce3815ce75\",\"license\":\"MIT\"},\"solady/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Caution! This library won't check that a token has code, responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ETH transfer has failed.\\n    error ETHTransferFailed();\\n\\n    /// @dev The ERC20 `transferFrom` has failed.\\n    error TransferFromFailed();\\n\\n    /// @dev The ERC20 `transfer` has failed.\\n    error TransferFailed();\\n\\n    /// @dev The ERC20 `approve` has failed.\\n    error ApproveFailed();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH\\n    /// that disallows any storage writes.\\n    uint256 internal constant _GAS_STIPEND_NO_STORAGE_WRITES = 2300;\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\\n    /// storage reads and writes, but low enough to prevent griefing.\\n    /// Multiply by a small constant (e.g. 2), if needed.\\n    uint256 internal constant _GAS_STIPEND_NO_GRIEF = 100000;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       ETH OPERATIONS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gasStipend, to, amount, 0, 0, 0, 0)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                pop(create(amount, 0x0b, 0x16))\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a gas stipend\\n    /// equal to `_GAS_STIPEND_NO_GRIEF`. This gas stipend is a reasonable default\\n    /// for 99% of cases and can be overriden with the three-argument version of this\\n    /// function if necessary.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount) internal {\\n        // Manually inlined because the compiler doesn't inline functions with branches.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(_GAS_STIPEND_NO_GRIEF, to, amount, 0, 0, 0, 0)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                pop(create(amount, 0x0b, 0x16))\\n            }\\n        }\\n    }\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// Simply use `gasleft()` for `gasStipend` if you don't need a gas stipend.\\n    ///\\n    /// Note: Does NOT revert upon failure.\\n    /// Returns whether the transfer of ETH is successful instead.\\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\\n        internal\\n        returns (bool success)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            success := call(gasStipend, to, amount, 0, 0, 0, 0)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC20 OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x00, 0x23b872dd)\\n            mstore(0x20, from) // Store the `from` argument.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x60, amount) // Store the `amount` argument.\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferAllFrom(address token, address from, address to)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, from) // Store the `from` argument.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x00, 0x23b872dd)\\n            mstore(0x40, to) // Store the `to` argument.\\n            // The `amount` argument is already written to the memory word at 0x6a.\\n            amount := mload(0x60)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1a, to) // Store the `to` argument.\\n            mstore(0x3a, amount) // Store the `amount` argument.\\n            // Store the function selector of `transfer(address,uint256)`,\\n            // left by 6 bytes (enough for 8tb of memory represented by the free memory pointer).\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\n            mstore(0x00, 0xa9059cbb000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x16, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, address()) // Store the address of the current contract.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x3a, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x1a, to) // Store the `to` argument.\\n            // The `amount` argument is already written to the memory word at 0x3a.\\n            amount := mload(0x3a)\\n            // Store the function selector of `transfer(address,uint256)`,\\n            // left by 6 bytes (enough for 8tb of memory represented by the free memory pointer).\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\n            mstore(0x00, 0xa9059cbb000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x16, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// Reverts upon failure.\\n    function safeApprove(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1a, to) // Store the `to` argument.\\n            mstore(0x3a, amount) // Store the `amount` argument.\\n            // Store the function selector of `approve(address,uint256)`,\\n            // left by 6 bytes (enough for 8tb of memory represented by the free memory pointer).\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\n            mstore(0x00, 0x095ea7b3000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x16, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `ApproveFailed()`.\\n                mstore(0x00, 0x3e3f8f73)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\\n    /// Returns zero if the `token` does not exist.\\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, account) // Store the `account` argument.\\n            amount :=\\n                mul(\\n                    mload(0x20),\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                        staticcall(gas(), token, 0x1c, 0x24, 0x20, 0x20)\\n                    )\\n                )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd90b1d9017a6969dce31df5199f92f1b6f5a0a59fa2ac06217a83a2815700082\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613ecd806100206000396000f3fe60806040526004361061014b5760003560e01c8063b3259e14116100b6578063e95252441161006f578063e95252441461041d578063f04e283e14610448578063f23a6e6114610464578063f2fde38b146104a1578063fda72552146104bd578063fee81cf4146104e65761014b565b8063b3259e1414610311578063bd69b1571461034e578063c7db6e4314610377578063cc2a9a5b146103a0578063d4053d5b146103c9578063d7533f02146103f25761014b565b80637fd4bfd5116101085780637fd4bfd5146102115780638da5cb5b1461023c5780638efa88741461026757806390528e11146102925780639c1a2678146102bd578063b00bec65146102e65761014b565b8063256929621461015057806354d1f13d1461015a57806363c28db1146101645780636addfe57146101a157806370914034146101de578063715018a614610207575b600080fd5b610158610523565b005b610162610577565b005b34801561017057600080fd5b5061018b60048036038101906101869190612ef4565b6105b3565b6040516101989190612fe9565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c39190612ef4565b61064a565b6040516101d59190613132565b60405180910390f35b3480156101ea57600080fd5b50610205600480360381019061020091906131b9565b610870565b005b61020f610bfc565b005b34801561021d57600080fd5b50610226610c10565b6040516102339190613299565b60405180910390f35b34801561024857600080fd5b50610251610c36565b60405161025e91906132c3565b60405180910390f35b34801561027357600080fd5b5061027c610c44565b60405161028991906132ff565b60405180910390f35b34801561029e57600080fd5b506102a7610c6a565b6040516102b4919061333b565b60405180910390f35b3480156102c957600080fd5b506102e460048036038101906102df91906133ac565b610c90565b005b3480156102f257600080fd5b506102fb6114a8565b6040516103089190613481565b60405180910390f35b34801561031d57600080fd5b50610338600480360381019061033391906134c8565b6114ce565b6040516103459190613615565b60405180910390f35b34801561035a57600080fd5b5061037560048036038101906103709190613630565b611608565b005b34801561038357600080fd5b5061039e60048036038101906103999190613630565b61164f565b005b3480156103ac57600080fd5b506103c760048036038101906103c2919061367d565b61198b565b005b3480156103d557600080fd5b506103f060048036038101906103eb9190613630565b611ade565b005b3480156103fe57600080fd5b50610407611b38565b6040516104149190613719565b60405180910390f35b34801561042957600080fd5b50610432611b43565b60405161043f91906132ff565b60405180910390f35b610462600480360381019061045d9190612ef4565b611b69565b005b34801561047057600080fd5b5061048b6004803603810190610486919061378a565b611baa565b604051610498919061385f565b60405180910390f35b6104bb60048036038101906104b69190612ef4565b611bc0565b005b3480156104c957600080fd5b506104e460048036038101906104df919061367d565b611bea565b005b3480156104f257600080fd5b5061050d60048036038101906105089190612ef4565b611d80565b60405161051a9190613889565b60405180910390f35b600061052d611b38565b67ffffffffffffffff164201905063389a75e1600c5233600052806020600c2055337fdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d600080a250565b63389a75e1600c523360005260006020600c2055337ffa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92600080a2565b6060600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561063e57602002820191906000526020600020905b81548152602001906001019080831161062a575b50505050509050919050565b60606000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156106d757602002820191906000526020600020905b8154815260200190600101908083116106c3575b505050505090506000815167ffffffffffffffff8111156106fb576106fa6138a4565b5b60405190808252806020026020018201604052801561073457816020015b610721612dcc565b8152602001906001900390816107195790505b50905060005b8251811015610865576000838281518110610758576107576138d3565b5b60200260200101519050600061076d826114ce565b6060015163ffffffff1690506000610784836114ce565b602001516203f4806107969190613931565b63ffffffff1642106107a95760006107d6565b6107b2836114ce565b6020015163ffffffff16426107c79190613969565b6203f4806107d59190613969565b5b905060405180608001604052808267ffffffffffffffff1681526020018467ffffffffffffffff1681526020018367ffffffffffffffff16815260200161081c856114ce565b6040015163ffffffff1667ffffffffffffffff16815250858581518110610846576108456138d3565b5b60200260200101819052505050508061085e9061399d565b905061073a565b819350505050919050565b61087c84848484611d9b565b60005b84849050811015610bf557600083838381811061089f5761089e6138d3565b5b9050602002013590506000600660008888868181106108c1576108c06138d3565b5b9050602002013581526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820160009054906101000a900460ff1660028111156109d8576109d7613523565b5b60028111156109ea576109e9613523565b5b8152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614610a59576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff8016816060015163ffffffff1614610aa2576040517f8dca9f6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a33308560016040518563ffffffff1660e01b8152600401610b049493929190613a57565b600060405180830381600087803b158015610b1e57600080fd5b505af1158015610b32573d6000803e3d6000fd5b505050508160066000898987818110610b4e57610b4d6138d3565b5b905060200201358152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff16021790555081878785818110610b9857610b976138d3565b5b905060200201353373ffffffffffffffffffffffffffffffffffffffff167f085b924bab9c71a3a17b45cf23191479522f5088263b5d8e87eb68f16ac1a0a860405160405180910390a4505080610bee9061399d565b905061087f565b5050505050565b610c04611de0565b610c0e6000611dfd565b565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000638b78c6d81954905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610cbb600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e3b565b610cc786868686611d9b565b818190508484905014610d06576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8686905081101561149f57600080888884818110610d2a57610d296138d3565b5b90506020020135878785818110610d4457610d436138d3565b5b9050602002013591509150600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e1bef32836040518263ffffffff1660e01b8152600401610daa9190613889565b602060405180830381865afa158015610dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610deb9190613ae7565b15610e22576040517f3899ae3600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610e949190613889565b602060405180830381865afa158015610eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed59190613b29565b73ffffffffffffffffffffffffffffffffffffffff1614610f22576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6063600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f822a5b2846040518263ffffffff1660e01b8152600401610f7f9190613889565b602060405180830381865afa158015610f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc09190613b6b565b1115610ff8576040517fc0b81fcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110298186868681811061100f5761100e6138d3565b5b90506020020160208101906110249190613bbd565b611ee3565b61105f576040517f3189b2eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a33308460016040518563ffffffff1660e01b81526004016110c19493929190613a57565b600060405180830381600087803b1580156110db57600080fd5b505af11580156110ef573d6000803e3d6000fd5b505050506040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014263ffffffff1681526020018263ffffffff16815260200163ffffffff80168152602001600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638678a7b26040518163ffffffff1660e01b81526004016020604051808303816000875af11580156111ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d19190613b6b565b81526020018686868181106111e9576111e86138d3565b5b90506020020160208101906111fe9190613bbd565b60028111156112105761120f613523565b5b8152506006600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff1602179055506080820151816001015560a08201518160020160006101000a81548160ff0219169083600281111561131757611316613523565b5b0217905550905050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166337bf06a68360016040518363ffffffff1660e01b815260040161137d929190613bf9565b600060405180830381600087803b15801561139757600080fd5b505af11580156113ab573d6000803e3d6000fd5b50505050600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505060019003906000526020600020016000909190919091505580823373ffffffffffffffffffffffffffffffffffffffff167faf1d047d6158df0c7beade7a6810e77e0817265bf671190ebad2b03dd889a2b2888888818110611462576114616138d3565b5b90506020020160208101906114779190613bbd565b6040516114849190613c31565b60405180910390a45050806114989061399d565b9050610d09565b50505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6114d6612e1c565b600660008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820160009054906101000a900460ff1660028111156115eb576115ea613523565b5b60028111156115fd576115fc613523565b5b815250509050919050565b60005b8282905081101561164a5761163883838381811061162c5761162b6138d3565b5b90506020020135611f8f565b50806116439061399d565b905061160b565b505050565b60005b8282905081101561198657600060066000858585818110611676576116756138d3565b5b9050602002013581526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820160009054906101000a900460ff16600281111561178d5761178c613523565b5b600281111561179f5761179e613523565b5b8152505090506000816060015163ffffffff1690503373ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161415806117f8575063ffffffff801681145b1561182f576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff6006600087878781811061184b5761184a6138d3565b5b905060200201358152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a30338460016040518563ffffffff1660e01b81526004016118e39493929190613a57565b600060405180830381600087803b1580156118fd57600080fd5b505af1158015611911573d6000803e3d6000fd5b5050505080858585818110611929576119286138d3565b5b905060200201353373ffffffffffffffffffffffffffffffffffffffff167f7db14b2c864954e7ddaa6550066e524715079a7e4e01a90e1011e357bbc10c6960405160405180910390a450508061197f9061399d565b9050611652565b505050565b60008060019054906101000a900460ff161590508080156119bc5750600160008054906101000a900460ff1660ff16105b806119e957506119cb306122aa565b1580156119e85750600160008054906101000a900460ff1660ff16145b5b611a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1f90613ccf565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611a65576001600060016101000a81548160ff0219169083151502179055505b611a6e336122cd565b611a7c878787878787611bea565b8015611ad55760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611acc9190613d2d565b60405180910390a15b50505050505050565b60005b82829050811015611b33576000838383818110611b0157611b006138d3565b5b905060200201359050611b1381611f8f565b611b2157611b2081612309565b5b5080611b2c9061399d565b9050611ae1565b505050565b60006202a300905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611b71611de0565b63389a75e1600c52806000526020600c208054421115611b9957636f5e88186000526004601cfd5b6000815550611ba781611dfd565b50565b600063f23a6e6160e01b90509695505050505050565b611bc8611de0565b8060601b611bde57637448fbae6000526004601cfd5b611be781611dfd565b50565b611bf2611de0565b84600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b600063389a75e1600c52816000526020600c20549050919050565b818190508484905014611dda576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b638b78c6d819543314611dfb576382b429006000526004601cfd5b565b638b78c6d8198160601b60601c91508181547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a38181555050565b8073ffffffffffffffffffffffffffffffffffffffff1663ae4b37e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eaa9190613ae7565b611ee0576040517f288de97200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6000806002811115611ef857611ef7613523565b5b826002811115611f0b57611f0a613523565b5b03611f1b57600183149050611f89565b60016002811115611f2f57611f2e613523565b5b826002811115611f4257611f41613523565b5b03611f5257600283149050611f89565b600280811115611f6557611f64613523565b5b826002811115611f7857611f77613523565b5b03611f8857600383149050611f89565b5b92915050565b600080600660008481526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820160009054906101000a900460ff1660028111156120a7576120a6613523565b5b60028111156120b9576120b8613523565b5b815250509050806000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612128576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6203f480816020015161213b9190613931565b63ffffffff1642101561217a576040517f5488a9fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080612187858461285c565b915091506000821461222657600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663156e29f6338460016040518463ffffffff1660e01b81526004016121f393929190613d48565b600060405180830381600087803b15801561220d57600080fd5b505af1158015612221573d6000803e3d6000fd5b505050505b426006600087815260200190815260200160002060000160146101000a81548163ffffffff021916908363ffffffff160217905550843373ffffffffffffffffffffffffffffffffffffffff167f5a0db36dd607437cb4689c3ac30ccb5940e032dab1c80eefe397f5f43202b34e60405160405180910390a3809350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8060601b60601c905080638b78c6d819558060007f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a350565b6000600660008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820160009054906101000a900460ff1660028111156124205761241f613523565b5b600281111561243257612431613523565b5b8152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146124a1576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60066000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549063ffffffff02191690556000820160186101000a81549063ffffffff021916905560008201601c6101000a81549063ffffffff021916905560018201600090556002820160006101000a81549060ff02191690555050612587600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083612b6d565b63ffffffff8016816060015163ffffffff161461263757600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a3033846060015160016040518563ffffffff1660e01b81526004016126049493929190613db0565b600060405180830381600087803b15801561261e57600080fd5b505af1158015612632573d6000803e3d6000fd5b505050505b6000816040015163ffffffff16146126e257600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a3033846040015160016040518563ffffffff1660e01b81526004016126af9493929190613db0565b600060405180830381600087803b1580156126c957600080fd5b505af11580156126dd573d6000803e3d6000fd5b505050505b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e1bef32836040518263ffffffff1660e01b815260040161273d9190613889565b602060405180830381865afa15801561275a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277e9190613ae7565b1561281457600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166337bf06a68360006040518363ffffffff1660e01b81526004016127e1929190613bf9565b600060405180830381600087803b1580156127fb57600080fd5b505af115801561280f573d6000803e3d6000fd5b505050505b813373ffffffffffffffffffffffffffffffffffffffff167f829b142282bbe71c01b98e565ed26a8cc7cdc9446201b49bf41b184efa57ed5960405160405180910390a35050565b60008060006065600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ad30a7586608001516040518263ffffffff1660e01b81526004016128c29190613889565b602060405180830381865afa1580156128df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129039190613b6b565b61290d9190613e37565b90506000846060015163ffffffff16905060008060006129308860a00151612c2b565b91509150600063ffffffff8016850361297857603d86101561295457829350612977565b603c861180156129645750605186105b1561297157819350612976565b600190505b5b5b600085036129b5576042861015612991578293506129b4565b6042861180156129a15750605686105b156129ae578193506129b3565b600190505b5b5b600185036129f25760428610156129ce578293506129f1565b6041861180156129de5750606086105b156129eb578193506129f0565b600190505b5b5b60028503612a3c576047861015612a0b57829350612a3b565b604686118015612a1b5750606086105b15612a2857819350612a3a565b60008097509750505050505050612b66565b5b5b60008115612b0757612b048b8b6040015163ffffffff166002600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ad30a758f608001516040518263ffffffff1660e01b8152600401612ab49190613889565b602060405180830381865afa158015612ad1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af59190613b6b565b612aff9190613e37565b612cdd565b90505b60038603612b225760478710612b1d5782612b1f565b835b94505b60048603612b3d5760428710612b385782612b3a565b835b94505b60058603612b5857603d8710612b535782612b55565b835b94505b848198509850505050505050505b9250929050565b60005b8280549050811015612c265781838281548110612b9057612b8f6138d3565b5b906000526020600020015403612c1b578260018480549050612bb29190613969565b81548110612bc357612bc26138d3565b5b9060005260206000200154838281548110612be157612be06138d3565b5b906000526020600020018190555082805480612c0057612bff613e68565b5b60019003818190600052602060002001600090559055612c26565b806001019050612b70565b505050565b60008060006002811115612c4257612c41613523565b5b836002811115612c5557612c54613523565b5b03612c67576001600480925081935050505b60016002811115612c7b57612c7a613523565b5b836002811115612c8e57612c8d613523565b5b03612ca0576002600580925081935050505b600280811115612cb357612cb2613523565b5b836002811115612cc657612cc5613523565b5b03612cd8576003600680925081935050505b915091565b6000808203612dc05760006006600086815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5298aca308560016040518463ffffffff1660e01b8152600401612d7c93929190613d48565b600060405180830381600087803b158015612d9657600080fd5b505af1158015612daa573d6000803e3d6000fd5b50505050612db784612309565b60019050612dc5565b600090505b9392505050565b6040518060800160405280600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681526020016000815260200160006002811115612e8657612e85613523565b5b81525090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ec182612e96565b9050919050565b612ed181612eb6565b8114612edc57600080fd5b50565b600081359050612eee81612ec8565b92915050565b600060208284031215612f0a57612f09612e8c565b5b6000612f1884828501612edf565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b612f6081612f4d565b82525050565b6000612f728383612f57565b60208301905092915050565b6000602082019050919050565b6000612f9682612f21565b612fa08185612f2c565b9350612fab83612f3d565b8060005b83811015612fdc578151612fc38882612f66565b9750612fce83612f7e565b925050600181019050612faf565b5085935050505092915050565b600060208201905081810360008301526130038184612f8b565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600067ffffffffffffffff82169050919050565b61305481613037565b82525050565b608082016000820151613070600085018261304b565b506020820151613083602085018261304b565b506040820151613096604085018261304b565b5060608201516130a9606085018261304b565b50505050565b60006130bb838361305a565b60808301905092915050565b6000602082019050919050565b60006130df8261300b565b6130e98185613016565b93506130f483613027565b8060005b8381101561312557815161310c88826130af565b9750613117836130c7565b9250506001810190506130f8565b5085935050505092915050565b6000602082019050818103600083015261314c81846130d4565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261317957613178613154565b5b8235905067ffffffffffffffff81111561319657613195613159565b5b6020830191508360208202830111156131b2576131b161315e565b5b9250929050565b600080600080604085870312156131d3576131d2612e8c565b5b600085013567ffffffffffffffff8111156131f1576131f0612e91565b5b6131fd87828801613163565b9450945050602085013567ffffffffffffffff8111156132205761321f612e91565b5b61322c87828801613163565b925092505092959194509250565b6000819050919050565b600061325f61325a61325584612e96565b61323a565b612e96565b9050919050565b600061327182613244565b9050919050565b600061328382613266565b9050919050565b61329381613278565b82525050565b60006020820190506132ae600083018461328a565b92915050565b6132bd81612eb6565b82525050565b60006020820190506132d860008301846132b4565b92915050565b60006132e982613266565b9050919050565b6132f9816132de565b82525050565b600060208201905061331460008301846132f0565b92915050565b600061332582613266565b9050919050565b6133358161331a565b82525050565b6000602082019050613350600083018461332c565b92915050565b60008083601f84011261336c5761336b613154565b5b8235905067ffffffffffffffff81111561338957613388613159565b5b6020830191508360208202830111156133a5576133a461315e565b5b9250929050565b600080600080600080606087890312156133c9576133c8612e8c565b5b600087013567ffffffffffffffff8111156133e7576133e6612e91565b5b6133f389828a01613163565b9650965050602087013567ffffffffffffffff81111561341657613415612e91565b5b61342289828a01613163565b9450945050604087013567ffffffffffffffff81111561344557613444612e91565b5b61345189828a01613356565b92509250509295509295509295565b600061346b82613266565b9050919050565b61347b81613460565b82525050565b60006020820190506134966000830184613472565b92915050565b6134a581612f4d565b81146134b057600080fd5b50565b6000813590506134c28161349c565b92915050565b6000602082840312156134de576134dd612e8c565b5b60006134ec848285016134b3565b91505092915050565b6134fe81612eb6565b82525050565b600063ffffffff82169050919050565b61351d81613504565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061356357613562613523565b5b50565b600081905061357482613552565b919050565b600061358482613566565b9050919050565b61359481613579565b82525050565b60c0820160008201516135b060008501826134f5565b5060208201516135c36020850182613514565b5060408201516135d66040850182613514565b5060608201516135e96060850182613514565b5060808201516135fc6080850182612f57565b5060a082015161360f60a085018261358b565b50505050565b600060c08201905061362a600083018461359a565b92915050565b6000806020838503121561364757613646612e8c565b5b600083013567ffffffffffffffff81111561366557613664612e91565b5b61367185828601613163565b92509250509250929050565b60008060008060008060c0878903121561369a57613699612e8c565b5b60006136a889828a01612edf565b96505060206136b989828a01612edf565b95505060406136ca89828a01612edf565b94505060606136db89828a01612edf565b93505060806136ec89828a01612edf565b92505060a06136fd89828a01612edf565b9150509295509295509295565b61371381613037565b82525050565b600060208201905061372e600083018461370a565b92915050565b60008083601f84011261374a57613749613154565b5b8235905067ffffffffffffffff81111561376757613766613159565b5b6020830191508360018202830111156137835761378261315e565b5b9250929050565b60008060008060008060a087890312156137a7576137a6612e8c565b5b60006137b589828a01612edf565b96505060206137c689828a01612edf565b95505060406137d789828a016134b3565b94505060606137e889828a016134b3565b935050608087013567ffffffffffffffff81111561380957613808612e91565b5b61381589828a01613734565b92509250509295509295509295565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61385981613824565b82525050565b60006020820190506138746000830184613850565b92915050565b61388381612f4d565b82525050565b600060208201905061389e600083018461387a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061393c82613504565b915061394783613504565b9250828201905063ffffffff81111561396357613962613902565b5b92915050565b600061397482612f4d565b915061397f83612f4d565b925082820390508181111561399757613996613902565b5b92915050565b60006139a882612f4d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036139da576139d9613902565b5b600182019050919050565b6000819050919050565b6000613a0a613a05613a00846139e5565b61323a565b612f4d565b9050919050565b613a1a816139ef565b82525050565b600082825260208201905092915050565b50565b6000613a41600083613a20565b9150613a4c82613a31565b600082019050919050565b600060a082019050613a6c60008301876132b4565b613a7960208301866132b4565b613a86604083018561387a565b613a936060830184613a11565b8181036080830152613aa481613a34565b905095945050505050565b60008115159050919050565b613ac481613aaf565b8114613acf57600080fd5b50565b600081519050613ae181613abb565b92915050565b600060208284031215613afd57613afc612e8c565b5b6000613b0b84828501613ad2565b91505092915050565b600081519050613b2381612ec8565b92915050565b600060208284031215613b3f57613b3e612e8c565b5b6000613b4d84828501613b14565b91505092915050565b600081519050613b658161349c565b92915050565b600060208284031215613b8157613b80612e8c565b5b6000613b8f84828501613b56565b91505092915050565b60038110613ba557600080fd5b50565b600081359050613bb781613b98565b92915050565b600060208284031215613bd357613bd2612e8c565b5b6000613be184828501613ba8565b91505092915050565b613bf381613aaf565b82525050565b6000604082019050613c0e600083018561387a565b613c1b6020830184613bea565b9392505050565b613c2b81613579565b82525050565b6000602082019050613c466000830184613c22565b92915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613cb9602e83613c4c565b9150613cc482613c5d565b604082019050919050565b60006020820190508181036000830152613ce881613cac565b9050919050565b600060ff82169050919050565b6000613d17613d12613d0d846139e5565b61323a565b613cef565b9050919050565b613d2781613cfc565b82525050565b6000602082019050613d426000830184613d1e565b92915050565b6000606082019050613d5d60008301866132b4565b613d6a602083018561387a565b613d776040830184613a11565b949350505050565b6000613d9a613d95613d9084613504565b61323a565b612f4d565b9050919050565b613daa81613d7f565b82525050565b600060a082019050613dc560008301876132b4565b613dd260208301866132b4565b613ddf6040830185613da1565b613dec6060830184613a11565b8181036080830152613dfd81613a34565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613e4282612f4d565b9150613e4d83612f4d565b925082613e5d57613e5c613e08565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220421253e450ac56cf619673625ea0f2f4d2cc9587feb1cd79234081f05eb25e5164736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c8063b3259e14116100b6578063e95252441161006f578063e95252441461041d578063f04e283e14610448578063f23a6e6114610464578063f2fde38b146104a1578063fda72552146104bd578063fee81cf4146104e65761014b565b8063b3259e1414610311578063bd69b1571461034e578063c7db6e4314610377578063cc2a9a5b146103a0578063d4053d5b146103c9578063d7533f02146103f25761014b565b80637fd4bfd5116101085780637fd4bfd5146102115780638da5cb5b1461023c5780638efa88741461026757806390528e11146102925780639c1a2678146102bd578063b00bec65146102e65761014b565b8063256929621461015057806354d1f13d1461015a57806363c28db1146101645780636addfe57146101a157806370914034146101de578063715018a614610207575b600080fd5b610158610523565b005b610162610577565b005b34801561017057600080fd5b5061018b60048036038101906101869190612ef4565b6105b3565b6040516101989190612fe9565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c39190612ef4565b61064a565b6040516101d59190613132565b60405180910390f35b3480156101ea57600080fd5b50610205600480360381019061020091906131b9565b610870565b005b61020f610bfc565b005b34801561021d57600080fd5b50610226610c10565b6040516102339190613299565b60405180910390f35b34801561024857600080fd5b50610251610c36565b60405161025e91906132c3565b60405180910390f35b34801561027357600080fd5b5061027c610c44565b60405161028991906132ff565b60405180910390f35b34801561029e57600080fd5b506102a7610c6a565b6040516102b4919061333b565b60405180910390f35b3480156102c957600080fd5b506102e460048036038101906102df91906133ac565b610c90565b005b3480156102f257600080fd5b506102fb6114a8565b6040516103089190613481565b60405180910390f35b34801561031d57600080fd5b50610338600480360381019061033391906134c8565b6114ce565b6040516103459190613615565b60405180910390f35b34801561035a57600080fd5b5061037560048036038101906103709190613630565b611608565b005b34801561038357600080fd5b5061039e60048036038101906103999190613630565b61164f565b005b3480156103ac57600080fd5b506103c760048036038101906103c2919061367d565b61198b565b005b3480156103d557600080fd5b506103f060048036038101906103eb9190613630565b611ade565b005b3480156103fe57600080fd5b50610407611b38565b6040516104149190613719565b60405180910390f35b34801561042957600080fd5b50610432611b43565b60405161043f91906132ff565b60405180910390f35b610462600480360381019061045d9190612ef4565b611b69565b005b34801561047057600080fd5b5061048b6004803603810190610486919061378a565b611baa565b604051610498919061385f565b60405180910390f35b6104bb60048036038101906104b69190612ef4565b611bc0565b005b3480156104c957600080fd5b506104e460048036038101906104df919061367d565b611bea565b005b3480156104f257600080fd5b5061050d60048036038101906105089190612ef4565b611d80565b60405161051a9190613889565b60405180910390f35b600061052d611b38565b67ffffffffffffffff164201905063389a75e1600c5233600052806020600c2055337fdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d600080a250565b63389a75e1600c523360005260006020600c2055337ffa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92600080a2565b6060600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561063e57602002820191906000526020600020905b81548152602001906001019080831161062a575b50505050509050919050565b60606000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156106d757602002820191906000526020600020905b8154815260200190600101908083116106c3575b505050505090506000815167ffffffffffffffff8111156106fb576106fa6138a4565b5b60405190808252806020026020018201604052801561073457816020015b610721612dcc565b8152602001906001900390816107195790505b50905060005b8251811015610865576000838281518110610758576107576138d3565b5b60200260200101519050600061076d826114ce565b6060015163ffffffff1690506000610784836114ce565b602001516203f4806107969190613931565b63ffffffff1642106107a95760006107d6565b6107b2836114ce565b6020015163ffffffff16426107c79190613969565b6203f4806107d59190613969565b5b905060405180608001604052808267ffffffffffffffff1681526020018467ffffffffffffffff1681526020018367ffffffffffffffff16815260200161081c856114ce565b6040015163ffffffff1667ffffffffffffffff16815250858581518110610846576108456138d3565b5b60200260200101819052505050508061085e9061399d565b905061073a565b819350505050919050565b61087c84848484611d9b565b60005b84849050811015610bf557600083838381811061089f5761089e6138d3565b5b9050602002013590506000600660008888868181106108c1576108c06138d3565b5b9050602002013581526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820160009054906101000a900460ff1660028111156109d8576109d7613523565b5b60028111156109ea576109e9613523565b5b8152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614610a59576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff8016816060015163ffffffff1614610aa2576040517f8dca9f6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a33308560016040518563ffffffff1660e01b8152600401610b049493929190613a57565b600060405180830381600087803b158015610b1e57600080fd5b505af1158015610b32573d6000803e3d6000fd5b505050508160066000898987818110610b4e57610b4d6138d3565b5b905060200201358152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff16021790555081878785818110610b9857610b976138d3565b5b905060200201353373ffffffffffffffffffffffffffffffffffffffff167f085b924bab9c71a3a17b45cf23191479522f5088263b5d8e87eb68f16ac1a0a860405160405180910390a4505080610bee9061399d565b905061087f565b5050505050565b610c04611de0565b610c0e6000611dfd565b565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000638b78c6d81954905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610cbb600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611e3b565b610cc786868686611d9b565b818190508484905014610d06576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8686905081101561149f57600080888884818110610d2a57610d296138d3565b5b90506020020135878785818110610d4457610d436138d3565b5b9050602002013591509150600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e1bef32836040518263ffffffff1660e01b8152600401610daa9190613889565b602060405180830381865afa158015610dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610deb9190613ae7565b15610e22576040517f3899ae3600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610e949190613889565b602060405180830381865afa158015610eb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed59190613b29565b73ffffffffffffffffffffffffffffffffffffffff1614610f22576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6063600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f822a5b2846040518263ffffffff1660e01b8152600401610f7f9190613889565b602060405180830381865afa158015610f9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc09190613b6b565b1115610ff8576040517fc0b81fcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110298186868681811061100f5761100e6138d3565b5b90506020020160208101906110249190613bbd565b611ee3565b61105f576040517f3189b2eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a33308460016040518563ffffffff1660e01b81526004016110c19493929190613a57565b600060405180830381600087803b1580156110db57600080fd5b505af11580156110ef573d6000803e3d6000fd5b505050506040518060c001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020014263ffffffff1681526020018263ffffffff16815260200163ffffffff80168152602001600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638678a7b26040518163ffffffff1660e01b81526004016020604051808303816000875af11580156111ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d19190613b6b565b81526020018686868181106111e9576111e86138d3565b5b90506020020160208101906111fe9190613bbd565b60028111156112105761120f613523565b5b8152506006600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160000160186101000a81548163ffffffff021916908363ffffffff160217905550606082015181600001601c6101000a81548163ffffffff021916908363ffffffff1602179055506080820151816001015560a08201518160020160006101000a81548160ff0219169083600281111561131757611316613523565b5b0217905550905050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166337bf06a68360016040518363ffffffff1660e01b815260040161137d929190613bf9565b600060405180830381600087803b15801561139757600080fd5b505af11580156113ab573d6000803e3d6000fd5b50505050600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505060019003906000526020600020016000909190919091505580823373ffffffffffffffffffffffffffffffffffffffff167faf1d047d6158df0c7beade7a6810e77e0817265bf671190ebad2b03dd889a2b2888888818110611462576114616138d3565b5b90506020020160208101906114779190613bbd565b6040516114849190613c31565b60405180910390a45050806114989061399d565b9050610d09565b50505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6114d6612e1c565b600660008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820160009054906101000a900460ff1660028111156115eb576115ea613523565b5b60028111156115fd576115fc613523565b5b815250509050919050565b60005b8282905081101561164a5761163883838381811061162c5761162b6138d3565b5b90506020020135611f8f565b50806116439061399d565b905061160b565b505050565b60005b8282905081101561198657600060066000858585818110611676576116756138d3565b5b9050602002013581526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820160009054906101000a900460ff16600281111561178d5761178c613523565b5b600281111561179f5761179e613523565b5b8152505090506000816060015163ffffffff1690503373ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff161415806117f8575063ffffffff801681145b1561182f576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff6006600087878781811061184b5761184a6138d3565b5b905060200201358152602001908152602001600020600001601c6101000a81548163ffffffff021916908363ffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a30338460016040518563ffffffff1660e01b81526004016118e39493929190613a57565b600060405180830381600087803b1580156118fd57600080fd5b505af1158015611911573d6000803e3d6000fd5b5050505080858585818110611929576119286138d3565b5b905060200201353373ffffffffffffffffffffffffffffffffffffffff167f7db14b2c864954e7ddaa6550066e524715079a7e4e01a90e1011e357bbc10c6960405160405180910390a450508061197f9061399d565b9050611652565b505050565b60008060019054906101000a900460ff161590508080156119bc5750600160008054906101000a900460ff1660ff16105b806119e957506119cb306122aa565b1580156119e85750600160008054906101000a900460ff1660ff16145b5b611a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1f90613ccf565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611a65576001600060016101000a81548160ff0219169083151502179055505b611a6e336122cd565b611a7c878787878787611bea565b8015611ad55760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611acc9190613d2d565b60405180910390a15b50505050505050565b60005b82829050811015611b33576000838383818110611b0157611b006138d3565b5b905060200201359050611b1381611f8f565b611b2157611b2081612309565b5b5080611b2c9061399d565b9050611ae1565b505050565b60006202a300905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611b71611de0565b63389a75e1600c52806000526020600c208054421115611b9957636f5e88186000526004601cfd5b6000815550611ba781611dfd565b50565b600063f23a6e6160e01b90509695505050505050565b611bc8611de0565b8060601b611bde57637448fbae6000526004601cfd5b611be781611dfd565b50565b611bf2611de0565b84600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b600063389a75e1600c52816000526020600c20549050919050565b818190508484905014611dda576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b638b78c6d819543314611dfb576382b429006000526004601cfd5b565b638b78c6d8198160601b60601c91508181547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a38181555050565b8073ffffffffffffffffffffffffffffffffffffffff1663ae4b37e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eaa9190613ae7565b611ee0576040517f288de97200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6000806002811115611ef857611ef7613523565b5b826002811115611f0b57611f0a613523565b5b03611f1b57600183149050611f89565b60016002811115611f2f57611f2e613523565b5b826002811115611f4257611f41613523565b5b03611f5257600283149050611f89565b600280811115611f6557611f64613523565b5b826002811115611f7857611f77613523565b5b03611f8857600383149050611f89565b5b92915050565b600080600660008481526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820160009054906101000a900460ff1660028111156120a7576120a6613523565b5b60028111156120b9576120b8613523565b5b815250509050806000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612128576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6203f480816020015161213b9190613931565b63ffffffff1642101561217a576040517f5488a9fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080612187858461285c565b915091506000821461222657600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663156e29f6338460016040518463ffffffff1660e01b81526004016121f393929190613d48565b600060405180830381600087803b15801561220d57600080fd5b505af1158015612221573d6000803e3d6000fd5b505050505b426006600087815260200190815260200160002060000160146101000a81548163ffffffff021916908363ffffffff160217905550843373ffffffffffffffffffffffffffffffffffffffff167f5a0db36dd607437cb4689c3ac30ccb5940e032dab1c80eefe397f5f43202b34e60405160405180910390a3809350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8060601b60601c905080638b78c6d819558060007f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a350565b6000600660008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820160009054906101000a900460ff1660028111156124205761241f613523565b5b600281111561243257612431613523565b5b8152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146124a1576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60066000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549063ffffffff02191690556000820160186101000a81549063ffffffff021916905560008201601c6101000a81549063ffffffff021916905560018201600090556002820160006101000a81549060ff02191690555050612587600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083612b6d565b63ffffffff8016816060015163ffffffff161461263757600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a3033846060015160016040518563ffffffff1660e01b81526004016126049493929190613db0565b600060405180830381600087803b15801561261e57600080fd5b505af1158015612632573d6000803e3d6000fd5b505050505b6000816040015163ffffffff16146126e257600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a3033846040015160016040518563ffffffff1660e01b81526004016126af9493929190613db0565b600060405180830381600087803b1580156126c957600080fd5b505af11580156126dd573d6000803e3d6000fd5b505050505b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e1bef32836040518263ffffffff1660e01b815260040161273d9190613889565b602060405180830381865afa15801561275a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277e9190613ae7565b1561281457600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166337bf06a68360006040518363ffffffff1660e01b81526004016127e1929190613bf9565b600060405180830381600087803b1580156127fb57600080fd5b505af115801561280f573d6000803e3d6000fd5b505050505b813373ffffffffffffffffffffffffffffffffffffffff167f829b142282bbe71c01b98e565ed26a8cc7cdc9446201b49bf41b184efa57ed5960405160405180910390a35050565b60008060006065600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ad30a7586608001516040518263ffffffff1660e01b81526004016128c29190613889565b602060405180830381865afa1580156128df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129039190613b6b565b61290d9190613e37565b90506000846060015163ffffffff16905060008060006129308860a00151612c2b565b91509150600063ffffffff8016850361297857603d86101561295457829350612977565b603c861180156129645750605186105b1561297157819350612976565b600190505b5b5b600085036129b5576042861015612991578293506129b4565b6042861180156129a15750605686105b156129ae578193506129b3565b600190505b5b5b600185036129f25760428610156129ce578293506129f1565b6041861180156129de5750606086105b156129eb578193506129f0565b600190505b5b5b60028503612a3c576047861015612a0b57829350612a3b565b604686118015612a1b5750606086105b15612a2857819350612a3a565b60008097509750505050505050612b66565b5b5b60008115612b0757612b048b8b6040015163ffffffff166002600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ad30a758f608001516040518263ffffffff1660e01b8152600401612ab49190613889565b602060405180830381865afa158015612ad1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af59190613b6b565b612aff9190613e37565b612cdd565b90505b60038603612b225760478710612b1d5782612b1f565b835b94505b60048603612b3d5760428710612b385782612b3a565b835b94505b60058603612b5857603d8710612b535782612b55565b835b94505b848198509850505050505050505b9250929050565b60005b8280549050811015612c265781838281548110612b9057612b8f6138d3565b5b906000526020600020015403612c1b578260018480549050612bb29190613969565b81548110612bc357612bc26138d3565b5b9060005260206000200154838281548110612be157612be06138d3565b5b906000526020600020018190555082805480612c0057612bff613e68565b5b60019003818190600052602060002001600090559055612c26565b806001019050612b70565b505050565b60008060006002811115612c4257612c41613523565b5b836002811115612c5557612c54613523565b5b03612c67576001600480925081935050505b60016002811115612c7b57612c7a613523565b5b836002811115612c8e57612c8d613523565b5b03612ca0576002600580925081935050505b600280811115612cb357612cb2613523565b5b836002811115612cc657612cc5613523565b5b03612cd8576003600680925081935050505b915091565b6000808203612dc05760006006600086815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5298aca308560016040518463ffffffff1660e01b8152600401612d7c93929190613d48565b600060405180830381600087803b158015612d9657600080fd5b505af1158015612daa573d6000803e3d6000fd5b50505050612db784612309565b60019050612dc5565b600090505b9392505050565b6040518060800160405280600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681526020016000815260200160006002811115612e8657612e85613523565b5b81525090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ec182612e96565b9050919050565b612ed181612eb6565b8114612edc57600080fd5b50565b600081359050612eee81612ec8565b92915050565b600060208284031215612f0a57612f09612e8c565b5b6000612f1884828501612edf565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b612f6081612f4d565b82525050565b6000612f728383612f57565b60208301905092915050565b6000602082019050919050565b6000612f9682612f21565b612fa08185612f2c565b9350612fab83612f3d565b8060005b83811015612fdc578151612fc38882612f66565b9750612fce83612f7e565b925050600181019050612faf565b5085935050505092915050565b600060208201905081810360008301526130038184612f8b565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600067ffffffffffffffff82169050919050565b61305481613037565b82525050565b608082016000820151613070600085018261304b565b506020820151613083602085018261304b565b506040820151613096604085018261304b565b5060608201516130a9606085018261304b565b50505050565b60006130bb838361305a565b60808301905092915050565b6000602082019050919050565b60006130df8261300b565b6130e98185613016565b93506130f483613027565b8060005b8381101561312557815161310c88826130af565b9750613117836130c7565b9250506001810190506130f8565b5085935050505092915050565b6000602082019050818103600083015261314c81846130d4565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261317957613178613154565b5b8235905067ffffffffffffffff81111561319657613195613159565b5b6020830191508360208202830111156131b2576131b161315e565b5b9250929050565b600080600080604085870312156131d3576131d2612e8c565b5b600085013567ffffffffffffffff8111156131f1576131f0612e91565b5b6131fd87828801613163565b9450945050602085013567ffffffffffffffff8111156132205761321f612e91565b5b61322c87828801613163565b925092505092959194509250565b6000819050919050565b600061325f61325a61325584612e96565b61323a565b612e96565b9050919050565b600061327182613244565b9050919050565b600061328382613266565b9050919050565b61329381613278565b82525050565b60006020820190506132ae600083018461328a565b92915050565b6132bd81612eb6565b82525050565b60006020820190506132d860008301846132b4565b92915050565b60006132e982613266565b9050919050565b6132f9816132de565b82525050565b600060208201905061331460008301846132f0565b92915050565b600061332582613266565b9050919050565b6133358161331a565b82525050565b6000602082019050613350600083018461332c565b92915050565b60008083601f84011261336c5761336b613154565b5b8235905067ffffffffffffffff81111561338957613388613159565b5b6020830191508360208202830111156133a5576133a461315e565b5b9250929050565b600080600080600080606087890312156133c9576133c8612e8c565b5b600087013567ffffffffffffffff8111156133e7576133e6612e91565b5b6133f389828a01613163565b9650965050602087013567ffffffffffffffff81111561341657613415612e91565b5b61342289828a01613163565b9450945050604087013567ffffffffffffffff81111561344557613444612e91565b5b61345189828a01613356565b92509250509295509295509295565b600061346b82613266565b9050919050565b61347b81613460565b82525050565b60006020820190506134966000830184613472565b92915050565b6134a581612f4d565b81146134b057600080fd5b50565b6000813590506134c28161349c565b92915050565b6000602082840312156134de576134dd612e8c565b5b60006134ec848285016134b3565b91505092915050565b6134fe81612eb6565b82525050565b600063ffffffff82169050919050565b61351d81613504565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061356357613562613523565b5b50565b600081905061357482613552565b919050565b600061358482613566565b9050919050565b61359481613579565b82525050565b60c0820160008201516135b060008501826134f5565b5060208201516135c36020850182613514565b5060408201516135d66040850182613514565b5060608201516135e96060850182613514565b5060808201516135fc6080850182612f57565b5060a082015161360f60a085018261358b565b50505050565b600060c08201905061362a600083018461359a565b92915050565b6000806020838503121561364757613646612e8c565b5b600083013567ffffffffffffffff81111561366557613664612e91565b5b61367185828601613163565b92509250509250929050565b60008060008060008060c0878903121561369a57613699612e8c565b5b60006136a889828a01612edf565b96505060206136b989828a01612edf565b95505060406136ca89828a01612edf565b94505060606136db89828a01612edf565b93505060806136ec89828a01612edf565b92505060a06136fd89828a01612edf565b9150509295509295509295565b61371381613037565b82525050565b600060208201905061372e600083018461370a565b92915050565b60008083601f84011261374a57613749613154565b5b8235905067ffffffffffffffff81111561376757613766613159565b5b6020830191508360018202830111156137835761378261315e565b5b9250929050565b60008060008060008060a087890312156137a7576137a6612e8c565b5b60006137b589828a01612edf565b96505060206137c689828a01612edf565b95505060406137d789828a016134b3565b94505060606137e889828a016134b3565b935050608087013567ffffffffffffffff81111561380957613808612e91565b5b61381589828a01613734565b92509250509295509295509295565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61385981613824565b82525050565b60006020820190506138746000830184613850565b92915050565b61388381612f4d565b82525050565b600060208201905061389e600083018461387a565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061393c82613504565b915061394783613504565b9250828201905063ffffffff81111561396357613962613902565b5b92915050565b600061397482612f4d565b915061397f83612f4d565b925082820390508181111561399757613996613902565b5b92915050565b60006139a882612f4d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036139da576139d9613902565b5b600182019050919050565b6000819050919050565b6000613a0a613a05613a00846139e5565b61323a565b612f4d565b9050919050565b613a1a816139ef565b82525050565b600082825260208201905092915050565b50565b6000613a41600083613a20565b9150613a4c82613a31565b600082019050919050565b600060a082019050613a6c60008301876132b4565b613a7960208301866132b4565b613a86604083018561387a565b613a936060830184613a11565b8181036080830152613aa481613a34565b905095945050505050565b60008115159050919050565b613ac481613aaf565b8114613acf57600080fd5b50565b600081519050613ae181613abb565b92915050565b600060208284031215613afd57613afc612e8c565b5b6000613b0b84828501613ad2565b91505092915050565b600081519050613b2381612ec8565b92915050565b600060208284031215613b3f57613b3e612e8c565b5b6000613b4d84828501613b14565b91505092915050565b600081519050613b658161349c565b92915050565b600060208284031215613b8157613b80612e8c565b5b6000613b8f84828501613b56565b91505092915050565b60038110613ba557600080fd5b50565b600081359050613bb781613b98565b92915050565b600060208284031215613bd357613bd2612e8c565b5b6000613be184828501613ba8565b91505092915050565b613bf381613aaf565b82525050565b6000604082019050613c0e600083018561387a565b613c1b6020830184613bea565b9392505050565b613c2b81613579565b82525050565b6000602082019050613c466000830184613c22565b92915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613cb9602e83613c4c565b9150613cc482613c5d565b604082019050919050565b60006020820190508181036000830152613ce881613cac565b9050919050565b600060ff82169050919050565b6000613d17613d12613d0d846139e5565b61323a565b613cef565b9050919050565b613d2781613cfc565b82525050565b6000602082019050613d426000830184613d1e565b92915050565b6000606082019050613d5d60008301866132b4565b613d6a602083018561387a565b613d776040830184613a11565b949350505050565b6000613d9a613d95613d9084613504565b61323a565b612f4d565b9050919050565b613daa81613d7f565b82525050565b600060a082019050613dc560008301876132b4565b613dd260208301866132b4565b613ddf6040830185613da1565b613dec6060830184613a11565b8181036080830152613dfd81613a34565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613e4282612f4d565b9150613e4d83612f4d565b925082613e5d57613e5c613e08565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220421253e450ac56cf619673625ea0f2f4d2cc9587feb1cd79234081f05eb25e5164736f6c63430008120033",
  "devdoc": {
    "errors": {
      "NewOwnerIsZeroAddress()": [
        {
          "details": "The `newOwner` cannot be the zero address."
        }
      ],
      "NoHandoverRequest()": [
        {
          "details": "The `pendingOwner` does not have a valid handover request."
        }
      ],
      "Unauthorized()": [
        {
          "details": "The caller is not authorized to call the function."
        }
      ]
    },
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "OwnershipHandoverCanceled(address)": {
        "details": "The ownership handover to `pendingOwner` has been canceled."
      },
      "OwnershipHandoverRequested(address)": {
        "details": "An ownership handover to `pendingOwner` has been requested."
      },
      "OwnershipTransferred(address,address)": {
        "details": "The ownership is transferred from `oldOwner` to `newOwner`. This event is intentionally kept the same as OpenZeppelin's Ownable to be compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173), despite it not being as lightweight as a single argument event."
      }
    },
    "kind": "dev",
    "methods": {
      "bringInAnimalsToLaborGround(uint256[],uint256[])": {
        "params": {
          "_animalsId": "An array of token IDs representing the animals.",
          "_tokenId": "An array of token IDs representing the labor grounds."
        }
      },
      "cancelOwnershipHandover()": {
        "details": "Cancels the two-step ownership handover to the caller, if any."
      },
      "claimCollectables(uint256[])": {
        "details": "This function allows a user to claim multiple collectables at once by providing an array of token IDs.",
        "params": {
          "_tokenId": "An array of token IDs that the user wants to claim."
        }
      },
      "completeOwnershipHandover(address)": {
        "details": "Allows the owner to complete the two-step ownership handover to `pendingOwner`. Reverts if there is no existing ownership handover requested by `pendingOwner`."
      },
      "enterLaborGround(uint256[],uint256[],uint8[])": {
        "params": {
          "_job": "Array of jobs assigned to the labor grounds.",
          "_supplyId": "Array of supply IDs associated with the labor grounds.",
          "_tokenId": "Array of token IDs of the labor grounds."
        }
      },
      "getLaborGroundInfo(uint256)": {
        "details": "This function returns a LaborGround struct containing information about a Labor Ground token, specified by its ID, _tokenId.",
        "params": {
          "_tokenId": "ID of the Labor Ground token to retrieve information for"
        },
        "returns": {
          "lg": "The LaborGround struct containing information about the specified Labor Ground token."
        }
      },
      "getStakedTokens(address)": {
        "details": "Returns an array of token IDs that are currently staked by the given owner.",
        "params": {
          "_owner": "The address of the owner."
        },
        "returns": {
          "_0": "An array of staked token IDs."
        }
      },
      "leaveLaborGround(uint256[])": {
        "details": "This function allows a user to leave the LaborGround and receive their animal, supply, and collectable.",
        "params": {
          "_tokenId": "An array of token IDs that the user wants to leave."
        }
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "This function is the onERC1155Received fallback function for the contract, which is triggered when the contract receives an ERC1155 token transfer.",
        "returns": {
          "_0": "The selector for this function, \"0x20f90a7e\"."
        }
      },
      "owner()": {
        "details": "Returns the owner of the contract."
      },
      "ownershipHandoverExpiresAt(address)": {
        "details": "Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`."
      },
      "ownershipHandoverValidFor()": {
        "details": "Returns how long a two-step ownership handover is valid for in seconds."
      },
      "removeAnimalsFromLaborGround(uint256[])": {
        "params": {
          "_tokenId": "Array of token IDs of the labor grounds."
        }
      },
      "renounceOwnership()": {
        "details": "Allows the owner to renounce their ownership."
      },
      "requestOwnershipHandover()": {
        "details": "Request a two-step ownership handover to the caller. The request will be automatically expire in 48 hours (172800 seconds) by default."
      },
      "transferOwnership(address)": {
        "details": "Allows the owner to transfer the ownership to `newOwner`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bringInAnimalsToLaborGround(uint256[],uint256[])": {
        "notice": "Brings in animals to the labor ground by calling the bringInAnimalsToLaborGround function in the Lib library and transferring the ownership of the animal token from the sender to the contract."
      },
      "enterLaborGround(uint256[],uint256[],uint8[])": {
        "notice": "Enters the labor ground with specified token ID and supply ID, and assigns the job to it. Transfers the token and supply ownership to the contract. Emits the \"EnterLaborGround\" event."
      },
      "getLaborGroundInfo(uint256)": {
        "notice": "Retrieve information about a Labor Ground token."
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "notice": "Handle incoming ERC1155 token transfers."
      },
      "removeAnimalsFromLaborGround(uint256[])": {
        "notice": "Removes the animals from the specified labor ground. Transfers the ownership of the animals back to the sender."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/LaborGrounds.sol:LaborGrounds",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/LaborGrounds.sol:LaborGrounds",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 743,
        "contract": "contracts/LaborGrounds.sol:LaborGrounds",
        "label": "pits",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IPits)2116"
      },
      {
        "astId": 746,
        "contract": "contracts/LaborGrounds.sol:LaborGrounds",
        "label": "randomizer",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRandomizer)2138"
      },
      {
        "astId": 749,
        "contract": "contracts/LaborGrounds.sol:LaborGrounds",
        "label": "consumables",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IConsumables)2037"
      },
      {
        "astId": 752,
        "contract": "contracts/LaborGrounds.sol:LaborGrounds",
        "label": "neandersmol",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(INeandersmol)2086"
      },
      {
        "astId": 755,
        "contract": "contracts/LaborGrounds.sol:LaborGrounds",
        "label": "animals",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC1155Upgradeable)290"
      },
      {
        "astId": 758,
        "contract": "contracts/LaborGrounds.sol:LaborGrounds",
        "label": "supplies",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC1155Upgradeable)290"
      },
      {
        "astId": 770,
        "contract": "contracts/LaborGrounds.sol:LaborGrounds",
        "label": "laborGround",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(LaborGround)2509_storage)"
      },
      {
        "astId": 775,
        "contract": "contracts/LaborGrounds.sol:LaborGrounds",
        "label": "ownerToTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IConsumables)2037": {
        "encoding": "inplace",
        "label": "contract IConsumables",
        "numberOfBytes": "20"
      },
      "t_contract(IERC1155Upgradeable)290": {
        "encoding": "inplace",
        "label": "contract IERC1155Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(INeandersmol)2086": {
        "encoding": "inplace",
        "label": "contract INeandersmol",
        "numberOfBytes": "20"
      },
      "t_contract(IPits)2116": {
        "encoding": "inplace",
        "label": "contract IPits",
        "numberOfBytes": "20"
      },
      "t_contract(IRandomizer)2138": {
        "encoding": "inplace",
        "label": "contract IRandomizer",
        "numberOfBytes": "20"
      },
      "t_enum(Jobs)2557": {
        "encoding": "inplace",
        "label": "enum Jobs",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(LaborGround)2509_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LaborGround)",
        "numberOfBytes": "32",
        "value": "t_struct(LaborGround)2509_storage"
      },
      "t_struct(LaborGround)2509_storage": {
        "encoding": "inplace",
        "label": "struct LaborGround",
        "members": [
          {
            "astId": 2497,
            "contract": "contracts/LaborGrounds.sol:LaborGrounds",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2499,
            "contract": "contracts/LaborGrounds.sol:LaborGrounds",
            "label": "lockTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2501,
            "contract": "contracts/LaborGrounds.sol:LaborGrounds",
            "label": "supplyId",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2503,
            "contract": "contracts/LaborGrounds.sol:LaborGrounds",
            "label": "animalId",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2505,
            "contract": "contracts/LaborGrounds.sol:LaborGrounds",
            "label": "requestId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2508,
            "contract": "contracts/LaborGrounds.sol:LaborGrounds",
            "label": "job",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(Jobs)2557"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}