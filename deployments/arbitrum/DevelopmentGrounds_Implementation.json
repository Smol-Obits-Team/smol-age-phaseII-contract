{
  "address": "0xf69BB600C46Df5584A91e49C51E747f61E799F7B",
  "abi": [
    {
      "inputs": [],
      "name": "BalanceIsInsufficient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CsIsBellowHundred",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DevelopmentGroundIsLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLockTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPos",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthsNotEqual",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeandersmolIsNotInDevelopmentGround",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeandersmolsIsLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewOwnerIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoHandoverRequest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenIsStaked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongMultiple",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroBalanceError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "stake",
          "type": "bool"
        }
      ],
      "name": "ClaimDevelopmentGroundBonesReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Grounds",
          "name": "ground",
          "type": "uint8"
        }
      ],
      "name": "EnterDevelopmentGround",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "LeaveDevelopmentGround",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipHandoverCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipHandoverRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveBones",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "StakeBonesInDevelopmentGround",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bones",
      "outputs": [
        {
          "internalType": "contract IBones",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "bonesToTime",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeStaked",
              "type": "uint256"
            }
          ],
          "internalType": "struct BonesFeInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "calculateBones",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelOwnershipHandover",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "_stake",
          "type": "bool[]"
        }
      ],
      "name": "claimDevelopmentGroundBonesReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "completeOwnershipHandover",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lockTime",
          "type": "uint256[]"
        },
        {
          "internalType": "enum Grounds[]",
          "name": "_ground",
          "type": "uint8[]"
        }
      ],
      "name": "enterDevelopmentGround",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getDevGroundFeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint96",
              "name": "timeLeft",
              "type": "uint96"
            },
            {
              "internalType": "uint96",
              "name": "daysStaked",
              "type": "uint96"
            },
            {
              "internalType": "uint64",
              "name": "stakedSmols",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "skillLevel",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bonesAccured",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBonesStaked",
              "type": "uint256"
            },
            {
              "internalType": "enum Grounds",
              "name": "ground",
              "type": "uint8"
            }
          ],
          "internalType": "struct DevGroundFeInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDevelopmentGroundBonesReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDevelopmentGroundInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "lockPeriod",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "amountPosition",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "entryTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "lastRewardTime",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "bonesStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentPitsLockPeriod",
              "type": "uint256"
            },
            {
              "internalType": "enum Grounds",
              "name": "ground",
              "type": "uint8"
            }
          ],
          "internalType": "struct DevelopmentGround",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPrimarySkill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getStakedTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pits",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_neandersmol",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bones",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "leaveDevelopmentGround",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "neandersmol",
      "outputs": [
        {
          "internalType": "contract INeandersmol",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "result",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "ownershipHandoverExpiresAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownershipHandoverValidFor",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pits",
      "outputs": [
        {
          "internalType": "contract IPits",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "_all",
          "type": "bool[]"
        }
      ],
      "name": "removeBones",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_pos",
          "type": "uint256"
        }
      ],
      "name": "removeSingleBones",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestOwnershipHandover",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pits",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_neandersmol",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bones",
          "type": "address"
        }
      ],
      "name": "setAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_amount",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "stakeBonesInDevelopmentGround",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3795077bd27b34506a56bfab9537ab5676269eeb280914e5704831285f8ff5c1",
  "receipt": {
    "to": null,
    "from": "0xc8dd8da93c79F00FbFcdDb5bBbb1233A02cF0296",
    "contractAddress": "0xf69BB600C46Df5584A91e49C51E747f61E799F7B",
    "transactionIndex": 2,
    "gasUsed": "26656585",
    "logsBloom": "0x
    "blockHash": "0xb07c66cb1e2d7d9dbb79f8ac3a1f3346cf5e7f56b7e404771c94d8400efd3099",
    "transactionHash": "0x3795077bd27b34506a56bfab9537ab5676269eeb280914e5704831285f8ff5c1",
    "logs": [],
    "blockNumber": 96482997,
    "cumulativeGasUsed": "27015704",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "6504c62d2b1db66179c71035ae12e122",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BalanceIsInsufficient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CsIsBellowHundred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DevelopmentGroundIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLockTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPos\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthsNotEqual\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeandersmolIsNotInDevelopmentGround\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeandersmolsIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoHandoverRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIsStaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongMultiple\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBalanceError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"stake\",\"type\":\"bool\"}],\"name\":\"ClaimDevelopmentGroundBonesReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Grounds\",\"name\":\"ground\",\"type\":\"uint8\"}],\"name\":\"EnterDevelopmentGround\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LeaveDevelopmentGround\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveBones\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"StakeBonesInDevelopmentGround\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bones\",\"outputs\":[{\"internalType\":\"contract IBones\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bonesToTime\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStaked\",\"type\":\"uint256\"}],\"internalType\":\"struct BonesFeInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"calculateBones\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_stake\",\"type\":\"bool[]\"}],\"name\":\"claimDevelopmentGroundBonesReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"completeOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lockTime\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Grounds[]\",\"name\":\"_ground\",\"type\":\"uint8[]\"}],\"name\":\"enterDevelopmentGround\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getDevGroundFeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"timeLeft\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"daysStaked\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"stakedSmols\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"skillLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonesAccured\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonesStaked\",\"type\":\"uint256\"},{\"internalType\":\"enum Grounds\",\"name\":\"ground\",\"type\":\"uint8\"}],\"internalType\":\"struct DevGroundFeInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDevelopmentGroundBonesReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDevelopmentGroundInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"amountPosition\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"bonesStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPitsLockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"enum Grounds\",\"name\":\"ground\",\"type\":\"uint8\"}],\"internalType\":\"struct DevelopmentGround\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPrimarySkill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getStakedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pits\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_neandersmol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bones\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"leaveDevelopmentGround\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"neandersmol\",\"outputs\":[{\"internalType\":\"contract INeandersmol\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"ownershipHandoverExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipHandoverValidFor\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pits\",\"outputs\":[{\"internalType\":\"contract IPits\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_all\",\"type\":\"bool[]\"}],\"name\":\"removeBones\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pos\",\"type\":\"uint256\"}],\"name\":\"removeSingleBones\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pits\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_neandersmol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bones\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"stakeBonesInDevelopmentGround\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NewOwnerIsZeroAddress()\":[{\"details\":\"The `newOwner` cannot be the zero address.\"}],\"NoHandoverRequest()\":[{\"details\":\"The `pendingOwner` does not have a valid handover request.\"}],\"Unauthorized()\":[{\"details\":\"The caller is not authorized to call the function.\"}]},\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"OwnershipHandoverCanceled(address)\":{\"details\":\"The ownership handover to `pendingOwner` has been canceled.\"},\"OwnershipHandoverRequested(address)\":{\"details\":\"An ownership handover to `pendingOwner` has been requested.\"},\"OwnershipTransferred(address,address)\":{\"details\":\"The ownership is transferred from `oldOwner` to `newOwner`. This event is intentionally kept the same as OpenZeppelin's Ownable to be compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173), despite it not being as lightweight as a single argument event.\"}},\"kind\":\"dev\",\"methods\":{\"bonesToTime(uint256)\":{\"details\":\"Returns an array of BonesFeInfo structs containing information about the Bone tokens staked at certain time.\",\"params\":{\"_tokenId\":\"The ID of the token to retrieve information for.\"},\"returns\":{\"_0\":\"An array of BonesFeInfo structs containing Bone token and timestamp information.\"}},\"cancelOwnershipHandover()\":{\"details\":\"Cancels the two-step ownership handover to the caller, if any.\"},\"claimDevelopmentGroundBonesReward(uint256[],bool[])\":{\"params\":{\"_stake\":\"Whether to stake the reward bones in the development ground\",\"_tokenId\":\"ID of the development ground\"}},\"completeOwnershipHandover(address)\":{\"details\":\"Allows the owner to complete the two-step ownership handover to `pendingOwner`. Reverts if there is no existing ownership handover requested by `pendingOwner`.\"},\"enterDevelopmentGround(uint256[],uint256[],uint8[])\":{\"details\":\"Enters the DevelopmentGround by transferring the tokens from the sender to the contract and setting the development ground data such as owner, entry time, lock period, etc.\",\"params\":{\"_ground\":\"Array of grounds for each corresponding token\",\"_lockTime\":\"Array of lock times for each corresponding token\",\"_tokenId\":\"Array of token IDs to be transferred\"}},\"getDevGroundFeInfo(address)\":{\"details\":\"Returns an array of DevGroundFeInfo structs containing information about the DevelopmentGround tokens staked by the specified owner.\",\"params\":{\"_owner\":\"The address of the owner.\"},\"returns\":{\"_0\":\"An array of DevGroundFeInfo structs containing DevelopmentGround token information.\"}},\"getDevelopmentGroundBonesReward(uint256)\":{\"details\":\"Returns the reward for the bones staked in the development ground.\",\"params\":{\"_tokenId\":\"The token ID for the development ground.\"},\"returns\":{\"_0\":\"The reward for the bones staked in the development ground.\"}},\"getDevelopmentGroundInfo(uint256)\":{\"details\":\"This function returns a DevelopmentGround struct containing information about a Development Ground token, specified by its ID, _tokenId.\",\"params\":{\"_tokenId\":\"ID of the Development Ground token to retrieve information for\"},\"returns\":{\"_0\":\"The DevelopmentGround struct containing information about the specified Development Ground token.\"}},\"getPrimarySkill(uint256)\":{\"params\":{\"_tokenId\":\"ID of the development ground\"},\"returns\":{\"_0\":\"The primary skill level\"}},\"getStakedTokens(address)\":{\"details\":\"Returns an array of token IDs that are currently staked by the given owner.\",\"params\":{\"_owner\":\"The address of the owner.\"},\"returns\":{\"_0\":\"An array of staked token IDs.\"}},\"leaveDevelopmentGround(uint256[])\":{\"details\":\"Allows the owner to leave the development ground. This will transfer the token back to the owner and remove any bones staked in the development ground.\",\"params\":{\"_tokenId\":\"The token ID of the development ground to leave.\"}},\"owner()\":{\"details\":\"Returns the owner of the contract.\"},\"ownershipHandoverExpiresAt(address)\":{\"details\":\"Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\"},\"ownershipHandoverValidFor()\":{\"details\":\"Returns how long a two-step ownership handover is valid for in seconds.\"},\"removeBones(uint256[],bool[])\":{\"details\":\"Removes bones from a specific development ground.\",\"params\":{\"_all\":\"Indicates whether to remove all bones or just a portion of them\",\"_tokenId\":\"The unique identifier for the development ground\"}},\"removeSingleBones(uint256,uint256)\":{\"details\":\"Allows the owner of a DevelopmentGround to remove a single bone from a specific position in the track.\",\"params\":{\"_pos\":\"The position of the bone to be removed.\",\"_tokenId\":\"The ID of the DevelopmentGround.\"}},\"renounceOwnership()\":{\"details\":\"Allows the owner to renounce their ownership.\"},\"requestOwnershipHandover()\":{\"details\":\"Request a two-step ownership handover to the caller. The request will be automatically expire in 48 hours (172800 seconds) by default.\"},\"stakeBonesInDevelopmentGround(uint256[],uint256[])\":{\"details\":\"Stakes the bones in the DevelopmentGround by transferring the bones from the sender to the contract and updating the development ground data.\",\"params\":{\"_amount\":\"Array of amounts of bones to be transferred\",\"_tokenId\":\"Array of token IDs for the corresponding amounts of bones\"}},\"transferOwnership(address)\":{\"details\":\"Allows the owner to transfer the ownership to `newOwner`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimDevelopmentGroundBonesReward(uint256[],bool[])\":{\"notice\":\"This function allows the owner of multiple development grounds to claim rewards earned by them.\"},\"getDevelopmentGroundInfo(uint256)\":{\"notice\":\"Retrieve information about a Development Ground token.\"},\"getPrimarySkill(uint256)\":{\"notice\":\"This function retrieves the primary skill of the `_tokenId` development ground.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DevelopmentGrounds.sol\":\"DevelopmentGrounds\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/DevelopmentGrounds.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { Lib } from \\\"./library/Lib.sol\\\";\\nimport { IPits } from \\\"./interfaces/IPits.sol\\\";\\nimport { IBones } from \\\"./interfaces/IBones.sol\\\";\\nimport { IRandomizer } from \\\"./interfaces/IRandomizer.sol\\\";\\nimport { INeandersmol } from \\\"./interfaces/INeandersmol.sol\\\";\\nimport { Ownable } from \\\"solady/src/auth/Ownable.sol\\\";\\nimport { SafeTransferLib } from \\\"solady/src/utils/SafeTransferLib.sol\\\";\\n\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {\\n    Jobs,\\n    Grounds,\\n    BonesFeInfo,\\n    LaborGround,\\n    DevGroundFeInfo,\\n    DevelopmentGround\\n} from \\\"./library/StructsEnums.sol\\\";\\nimport {\\n    InvalidPos,\\n    NotYourToken,\\n    TokenIsStaked,\\n    WrongMultiple,\\n    LengthsNotEqual,\\n    InvalidLockTime,\\n    ZeroBalanceError,\\n    CsIsBellowHundred,\\n    NeandersmolsIsLocked,\\n    BalanceIsInsufficient,\\n    DevelopmentGroundIsLocked,\\n    NeandersmolIsNotInDevelopmentGround\\n} from \\\"./library/Error.sol\\\";\\n\\ncontract DevelopmentGrounds is Initializable, Ownable {\\n    IBones public bones;\\n    IPits public pits;\\n    INeandersmol public neandersmol;\\n\\n    function initialize(\\n        address _pits,\\n        address _neandersmol,\\n        address _bones\\n    ) external initializer {\\n        _initializeOwner(msg.sender);\\n        setAddress(_pits, _neandersmol, _bones);\\n    }\\n\\n    // tokenId -> amount position -> staking time\\n    mapping(uint256 => mapping(uint256 => uint256)) private trackTime;\\n    // tokenId -> time -> amount\\n    mapping(uint256 => mapping(uint256 => uint256)) private trackToken;\\n\\n    mapping(address => uint256[]) private ownerToTokens;\\n\\n    mapping(uint256 => DevelopmentGround) private developmentGround;\\n\\n    uint256 private constant MINIMUM_BONE_STAKE = 1000 * 10 ** 18;\\n\\n    function setAddress(\\n        address _pits,\\n        address _neandersmol,\\n        address _bones\\n    ) public onlyOwner {\\n        bones = IBones(_bones);\\n        pits = IPits(_pits);\\n        neandersmol = INeandersmol(_neandersmol);\\n    }\\n\\n    /**\\n     * @dev Enters the DevelopmentGround by transferring the tokens from the sender to the contract\\n     * and setting the development ground data such as owner, entry time, lock period, etc.\\n     * @param _tokenId Array of token IDs to be transferred\\n     * @param _lockTime Array of lock times for each corresponding token\\n     * @param _ground Array of grounds for each corresponding token\\n     */\\n\\n    function enterDevelopmentGround(\\n        uint256[] calldata _tokenId,\\n        uint256[] calldata _lockTime,\\n        Grounds[] calldata _ground\\n    ) external {\\n        uint256 i;\\n        checkLength(_tokenId, _lockTime);\\n        if (_lockTime.length != _ground.length) revert LengthsNotEqual();\\n        Lib.pitsValidation(pits);\\n        for (; i < _tokenId.length; ++i) {\\n            (uint256 tokenId, uint256 lockTime) = (_tokenId[i], _lockTime[i]);\\n            if (neandersmol.staked(tokenId)) revert TokenIsStaked();\\n            DevelopmentGround storage devGround = developmentGround[tokenId];\\n            if (neandersmol.getCommonSense(tokenId) < 100)\\n                revert CsIsBellowHundred();\\n            if (neandersmol.ownerOf(tokenId) != msg.sender)\\n                revert NotYourToken();\\n\\n            if (!lockTimeExists(lockTime)) revert InvalidLockTime();\\n            neandersmol.stakingHandler(tokenId, true);\\n            devGround.owner = msg.sender;\\n            devGround.entryTime = uint64(block.timestamp);\\n            devGround.lockPeriod = uint64(lockTime);\\n            devGround.lastRewardTime = uint64(block.timestamp);\\n            devGround.ground = _ground[i];\\n            devGround.currentPitsLockPeriod = pits.getTimeOut();\\n            ownerToTokens[msg.sender].push(tokenId);\\n            emit EnterDevelopmentGround(\\n                msg.sender,\\n                tokenId,\\n                lockTime,\\n                block.timestamp,\\n                _ground[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Stakes the bones in the DevelopmentGround by transferring the bones from the sender to the contract\\n     * and updating the development ground data.\\n     * @param _amount Array of amounts of bones to be transferred\\n     * @param _tokenId Array of token IDs for the corresponding amounts of bones\\n     */\\n\\n    function stakeBonesInDevelopmentGround(\\n        uint256[] calldata _amount,\\n        uint256[] calldata _tokenId\\n    ) external {\\n        Lib.pitsValidation(pits);\\n        checkLength(_amount, _tokenId);\\n        uint256 i;\\n        for (; i < _amount.length; ++i) {\\n            (uint256 tokenId, uint256 amount) = (_tokenId[i], _amount[i]);\\n            DevelopmentGround storage devGround = developmentGround[tokenId];\\n            if (bones.balanceOf(msg.sender) < amount)\\n                revert BalanceIsInsufficient();\\n            if (devGround.owner != msg.sender)\\n                revert NeandersmolIsNotInDevelopmentGround();\\n            if (amount % MINIMUM_BONE_STAKE != 0) revert WrongMultiple();\\n            SafeTransferLib.safeTransferFrom(\\n                address(bones),\\n                msg.sender,\\n                address(this),\\n                amount\\n            );\\n            updateDevelopmentGround(devGround, tokenId, amount);\\n            emit StakeBonesInDevelopmentGround(msg.sender, amount, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes bones from a specific development ground.\\n     * @param _tokenId The unique identifier for the development ground\\n     * @param _all Indicates whether to remove all bones or just a portion of them\\n     */\\n\\n    function removeBones(\\n        uint256[] calldata _tokenId,\\n        bool[] calldata _all\\n    ) external {\\n        if (_tokenId.length != _all.length) revert LengthsNotEqual();\\n        uint256 i;\\n        for (; i < _tokenId.length; ++i) {\\n            if (getPrimarySkill(_tokenId[i]) > 0)\\n                developPrimarySkill(_tokenId[i]);\\n            removeBones(_tokenId[i], _all[i]);\\n        }\\n    }\\n\\n    function calculateBones(\\n        address _owner\\n    ) external view returns (uint256, uint256) {\\n        uint256[] memory stakedTokens = ownerToTokens[_owner];\\n        uint256 thetaxed;\\n        uint256 theuntaxed;\\n        for (uint256 i; i < stakedTokens.length; ++i) {\\n            (uint256 t, uint256 u) = calculateBones(stakedTokens[i]);\\n            thetaxed += t;\\n            theuntaxed += u;\\n        }\\n\\n        return (thetaxed, theuntaxed);\\n    }\\n\\n    function calculateBones(\\n        uint256 _tokenId\\n    ) internal view returns (uint256, uint256) {\\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\\n        if (devGround.bonesStaked == 0) return (0, 0);\\n        uint256 i = 1;\\n        uint256 amountUnTaxed;\\n        uint256 amountTaxed;\\n\\n        /**\\n         * return amount of bones to be taxed\\n         */\\n\\n        for (; i <= devGround.amountPosition; ++i) {\\n            uint256 time = trackTime[_tokenId][i];\\n\\n            block.timestamp < time + 30 days\\n                ? amountTaxed += trackToken[_tokenId][time]\\n                : amountUnTaxed += trackToken[_tokenId][time];\\n        }\\n\\n        return (amountTaxed, amountUnTaxed);\\n    }\\n\\n    /**\\n     * @dev Helper function to remove bones from a specific development ground\\n     * @param _tokenId The unique identifier for the development ground\\n     * @param _all Indicates whether to remove all bones if it will be taxed or not\\n     */\\n    function removeBones(uint256 _tokenId, bool _all) internal {\\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\\n        if (devGround.owner != msg.sender) revert NotYourToken();\\n        if (devGround.bonesStaked == 0) revert ZeroBalanceError();\\n\\n        uint256 i = 1;\\n        uint256 amount;\\n        uint64 count;\\n\\n        for (; i <= devGround.amountPosition; ++i) {\\n            (uint256 time, uint256 prev) = (\\n                trackTime[_tokenId][i],\\n                trackTime[_tokenId][i + 1]\\n            );\\n            if (block.timestamp < time + 30 days && !_all) continue;\\n\\n            block.timestamp < time + 30 days && _all && rand() % 2 == 0\\n                ? amount += trackToken[_tokenId][time] / 2\\n                : amount += trackToken[_tokenId][time];\\n\\n            _all || devGround.amountPosition == 1\\n                ? trackTime[_tokenId][i] = 0\\n                : trackTime[_tokenId][i] = prev;\\n            trackToken[_tokenId][time] = 0;\\n\\n            ++count;\\n        }\\n\\n        developmentGround[_tokenId].amountPosition -= count;\\n        developmentGround[_tokenId].bonesStaked -= amount;\\n\\n        uint256 bal = devGround.bonesStaked - amount;\\n\\n        if (bal != 0 && _all) bones.burn(address(this), bal);\\n\\n        if (amount != 0)\\n            SafeTransferLib.safeTransfer(address(bones), msg.sender, amount);\\n\\n        emit RemoveBones(msg.sender, _tokenId, amount);\\n    }\\n\\n    /**\\n     * @dev Allows the owner of a DevelopmentGround to remove a single bone from a specific position in the track.\\n     * @param _tokenId The ID of the DevelopmentGround.\\n     * @param _pos The position of the bone to be removed.\\n     */\\n\\n    function removeSingleBones(uint256 _tokenId, uint256 _pos) external {\\n        if (_pos == 0) revert InvalidPos();\\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\\n        if (devGround.owner != msg.sender) revert NotYourToken();\\n        if (devGround.amountPosition < _pos) revert InvalidPos();\\n        if (devGround.bonesStaked == 0) revert ZeroBalanceError();\\n        developPrimarySkill(_tokenId);\\n        uint256 amount;\\n        uint256 time = trackTime[_tokenId][_pos];\\n        uint256 initialAmount = trackToken[_tokenId][time];\\n\\n        block.timestamp < time + 30 days && rand() % 2 == 0\\n            ? amount += trackToken[_tokenId][time] / 2\\n            : amount += trackToken[_tokenId][time];\\n\\n        devGround.amountPosition == 1\\n            ? trackTime[_tokenId][_pos] = 0\\n            : trackTime[_tokenId][_pos] = trackTime[_tokenId][_pos + 1];\\n        trackToken[_tokenId][time] = 0;\\n        developmentGround[_tokenId].bonesStaked -= initialAmount;\\n        developmentGround[_tokenId].amountPosition -= 1;\\n\\n        uint256 bal = initialAmount - amount;\\n\\n        if (bal != 0) bones.burn(address(this), bal);\\n\\n        if (amount == 0) revert ZeroBalanceError();\\n        SafeTransferLib.safeTransfer(address(bones), msg.sender, amount);\\n        emit RemoveBones(msg.sender, _tokenId, amount);\\n    }\\n\\n    /**\\n     *  This function develops the primary skill of the `_tokenId` development ground.\\n     * @param _tokenId ID of the development ground\\n     */\\n\\n    function developPrimarySkill(uint256 _tokenId) internal {\\n        // make sure bones staked is more than 30% the total supply\\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\\n        (uint256 amount, Grounds ground) = (\\n            getPrimarySkill(_tokenId),\\n            devGround.ground\\n        );\\n        if (ground == Grounds.Chambers) {\\n            neandersmol.developMystics(_tokenId, amount);\\n        } else if (ground == Grounds.Garden) {\\n            neandersmol.developFarmers(_tokenId, amount);\\n        } else {\\n            neandersmol.developFighter(_tokenId, amount);\\n        }\\n    }\\n\\n    /**\\n     * This function retrieves the primary skill of the `_tokenId` development ground.\\n     * @param _tokenId ID of the development ground\\n     * @return The primary skill level\\n     */\\n\\n    function getPrimarySkill(uint256 _tokenId) public view returns (uint256) {\\n        DevelopmentGround memory token = developmentGround[_tokenId];\\n\\n        return\\n            Lib.calculatePrimarySkill(\\n                token.bonesStaked,\\n                token.amountPosition,\\n                token.currentPitsLockPeriod,\\n                _tokenId,\\n                pits,\\n                trackTime,\\n                trackToken\\n            );\\n    }\\n\\n    /**\\n     * This function allows the owner of the development ground to claim the rewards earned by the development ground.\\n     * @param _tokenId ID of the development ground\\n     * @param _stake Whether to stake the reward bones in the development ground\\n     */\\n\\n    function claimDevelopmentGroundBonesReward(\\n        uint256 _tokenId,\\n        bool _stake\\n    ) internal {\\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\\n        if (devGround.owner != msg.sender) revert NotYourToken();\\n        uint256 reward = getDevelopmentGroundBonesReward(_tokenId);\\n        if (reward == 0) revert ZeroBalanceError();\\n        developmentGround[_tokenId].lastRewardTime = uint64(block.timestamp);\\n        _stake\\n            ? stakeBonesInDevelopmentGround(_tokenId, reward)\\n            : bones.mint(msg.sender, reward);\\n\\n        emit ClaimDevelopmentGroundBonesReward(msg.sender, _tokenId, _stake);\\n    }\\n\\n    /**\\n     * This function allows the owner of multiple development grounds to claim rewards earned by them.\\n     * @param _tokenId ID of the development ground\\n     * @param _stake Whether to stake the reward bones in the development ground\\n     */\\n\\n    function claimDevelopmentGroundBonesReward(\\n        uint256[] calldata _tokenId,\\n        bool[] calldata _stake\\n    ) external {\\n        if (_tokenId.length != _stake.length) revert LengthsNotEqual();\\n        for (uint256 i; i < _tokenId.length; ++i)\\n            claimDevelopmentGroundBonesReward(_tokenId[i], _stake[i]);\\n    }\\n\\n    /**\\n     * @dev Stakes the specified amount of Bones in the Development Ground of the specified token ID.\\n     * @param _tokenId The ID of the Neandersmol token that represents the Development Ground.\\n     * @param _amount The amount of Bones to be staked.\\n     */\\n    function stakeBonesInDevelopmentGround(\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) internal {\\n        uint256 remainder = _amount % MINIMUM_BONE_STAKE;\\n        if (remainder == _amount) revert WrongMultiple(); // if the amount is less than Minimum\\n        if (remainder != 0) bones.mint(msg.sender, remainder); // if the amount is greater than minimum but wrong multiple\\n        uint256 newAmount = _amount - remainder;\\n        updateDevelopmentGround(\\n            developmentGround[_tokenId],\\n            _tokenId,\\n            newAmount\\n        );\\n        bones.mint(address(this), newAmount);\\n        emit StakeBonesInDevelopmentGround(msg.sender, newAmount, _tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the reward for the bones staked in the development ground.\\n     * @param _tokenId The token ID for the development ground.\\n     * @return The reward for the bones staked in the development ground.\\n     */\\n\\n    function getDevelopmentGroundBonesReward(\\n        uint256 _tokenId\\n    ) public view returns (uint256) {\\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\\n        return\\n            Lib.getDevGroundBonesReward(\\n                devGround.currentPitsLockPeriod,\\n                devGround.lockPeriod,\\n                devGround.lastRewardTime,\\n                pits\\n            );\\n    }\\n\\n    /**\\n     * @dev Allows the owner to leave the development ground. This will transfer the token back to the owner and remove any bones staked in the development ground.\\n     * @param _tokenId The token ID of the development ground to leave.\\n     */\\n\\n    function leaveDevelopmentGround(uint256[] calldata _tokenId) external {\\n        for (uint256 i; i < _tokenId.length; ++i)\\n            leaveDevelopmentGround(_tokenId[i]);\\n    }\\n\\n    /**\\n     * @dev Internal function for the leaveDevelopmentGround function to remove the development ground and transfer the token back to the owner.\\n     * @param _tokenId The token ID of the development ground to leave.\\n     */\\n\\n    function leaveDevelopmentGround(uint256 _tokenId) internal {\\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\\n        if (devGround.owner != msg.sender) revert NotYourToken();\\n        if (block.timestamp < devGround.entryTime + devGround.lockPeriod)\\n            revert NeandersmolsIsLocked();\\n        if (getDevelopmentGroundBonesReward(_tokenId) > 0)\\n            claimDevelopmentGroundBonesReward(_tokenId, false);\\n        if (devGround.bonesStaked > 0) removeBones(_tokenId, true);\\n        Lib.removeItem(ownerToTokens[msg.sender], (_tokenId));\\n        delete developmentGround[_tokenId];\\n        neandersmol.stakingHandler(_tokenId, false);\\n        emit LeaveDevelopmentGround(msg.sender, _tokenId);\\n    }\\n\\n    /**\\n     * @dev This function updates the DevelopmentGround by adding `_amount` to `_devGround.bonesStaked` and increments `_devGround.amountPosition`.\\n     * @param _devGround The DevelopmentGround to be updated.\\n     * @param _tokenId The token ID associated with the DevelopmentGround.\\n     * @param _amount The amount to be added to `_devGround.bonesStaked`.\\n     */\\n\\n    function updateDevelopmentGround(\\n        DevelopmentGround storage _devGround,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) internal {\\n        _devGround.bonesStaked += _amount;\\n        ++_devGround.amountPosition;\\n        trackToken[_tokenId][block.timestamp] = _amount;\\n        trackTime[_tokenId][_devGround.amountPosition] = block.timestamp;\\n    }\\n\\n    /**\\n     *Check the length of two input arrays, _tokenId and _animalsId, for equality.\\n     *If the lengths are not equal, the function will revert with the error \\\"LengthsNotEqual\\\".\\n     *@dev Internal function called by other functions within the contract.\\n     *@param _tokenId Array of token IDs\\n     */\\n\\n    function checkLength(\\n        uint256[] calldata _tokenId,\\n        uint256[] calldata _animalsId\\n    ) internal pure {\\n        if (_tokenId.length != _animalsId.length) revert LengthsNotEqual();\\n    }\\n\\n    function rand() private view returns (uint256) {\\n        uint256 seed = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    block.timestamp +\\n                        ((\\n                            uint256(keccak256(abi.encodePacked(block.coinbase)))\\n                        ) / (block.timestamp)) +\\n                        block.gaslimit +\\n                        ((uint256(keccak256(abi.encodePacked(msg.sender)))) /\\n                            (block.timestamp)) +\\n                        block.number\\n                )\\n            )\\n        );\\n\\n        return seed;\\n    }\\n\\n    function lockTimeExists(uint256 _lockTime) internal pure returns (bool) {\\n        return\\n            _lockTime == 50 days ||\\n            _lockTime == 100 days ||\\n            _lockTime == 150 days;\\n    }\\n\\n    /*                                                                           */\\n    /*                           VIEW FUNCTIONS                                  */\\n    /*                                                                           */\\n\\n    /**\\n     * Retrieve information about a Development Ground token.\\n     * @dev This function returns a DevelopmentGround struct containing information about a Development Ground token, specified by its ID, _tokenId.\\n     * @param _tokenId ID of the Development Ground token to retrieve information for\\n     * @return The DevelopmentGround struct containing information about the specified Development Ground token.\\n     */\\n\\n    function getDevelopmentGroundInfo(\\n        uint256 _tokenId\\n    ) public view returns (DevelopmentGround memory) {\\n        return developmentGround[_tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs that are currently staked by the given owner.\\n     * @param _owner The address of the owner.\\n     * @return An array of staked token IDs.\\n     */\\n\\n    function getStakedTokens(\\n        address _owner\\n    ) external view returns (uint256[] memory) {\\n        return ownerToTokens[_owner];\\n    }\\n\\n    /**\\n     * @dev Returns an array of BonesFeInfo structs containing information about the Bone tokens\\n     * staked at certain time.\\n     * @param _tokenId The ID of the token to retrieve information for.\\n     * @return An array of BonesFeInfo structs containing Bone token and timestamp information.\\n     */\\n\\n    function bonesToTime(\\n        uint256 _tokenId\\n    ) external view returns (BonesFeInfo[] memory) {\\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\\n        BonesFeInfo[] memory bonesFe = new BonesFeInfo[](\\n            devGround.amountPosition\\n        );\\n        uint256 i;\\n        for (; i < devGround.amountPosition; ++i) {\\n            uint256 time = trackTime[_tokenId][i + 1];\\n            uint256 amount = trackToken[_tokenId][time];\\n            bonesFe[i] = BonesFeInfo(amount, time);\\n        }\\n\\n        return bonesFe;\\n    }\\n\\n    /**\\n     * @dev Returns an array of DevGroundFeInfo structs containing information about the\\n     * DevelopmentGround tokens staked by the specified owner.\\n     * @param _owner The address of the owner.\\n     * @return An array of DevGroundFeInfo structs containing DevelopmentGround token information.\\n     */\\n\\n    function getDevGroundFeInfo(\\n        address _owner\\n    ) external view returns (DevGroundFeInfo[] memory) {\\n        uint256[] memory stakedTokens = ownerToTokens[_owner];\\n        DevGroundFeInfo[] memory userInfo = new DevGroundFeInfo[](\\n            stakedTokens.length\\n        );\\n\\n        uint256 i;\\n        for (; i < userInfo.length; ++i) {\\n            uint256 stakedToken = stakedTokens[i];\\n            DevelopmentGround memory devGround = getDevelopmentGroundInfo(\\n                stakedToken\\n            );\\n            uint256 unlockTime = devGround.lockPeriod + devGround.entryTime;\\n            uint256 timeLeft = block.timestamp < unlockTime\\n                ? (unlockTime - block.timestamp) / 1 days\\n                : 0;\\n            userInfo[i] = DevGroundFeInfo(\\n                uint96(timeLeft),\\n                uint96(block.timestamp - devGround.entryTime),\\n                uint64(stakedToken),\\n                getPrimarySkill(stakedToken),\\n                getDevelopmentGroundBonesReward(stakedToken),\\n                devGround.bonesStaked,\\n                devGround.ground\\n            );\\n        }\\n\\n        return userInfo;\\n    }\\n\\n    event EnterDevelopmentGround(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 indexed lockTime,\\n        uint256 entryTime,\\n        Grounds ground\\n    );\\n\\n    event ClaimDevelopmentGroundBonesReward(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        bool indexed stake\\n    );\\n\\n    event RemoveBones(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 indexed amount\\n    );\\n\\n    event LeaveDevelopmentGround(\\n        address indexed owner,\\n        uint256 indexed tokenId\\n    );\\n\\n    event StakeBonesInDevelopmentGround(\\n        address indexed owner,\\n        uint256 indexed amount,\\n        uint256 indexed tokenId\\n    );\\n}\\n\",\"keccak256\":\"0xb7584e70fc539c683ec7f343ccb67e841da67cc98bb8b52820b27306afbb6313\",\"license\":\"MIT\"},\"contracts/interfaces/IBones.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IBones is IERC20Upgradeable {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x1d61defdfd2e99959e9f4d65b96ceca70df17a1c337f385a519785fe4eda1e47\",\"license\":\"MIT\"},\"contracts/interfaces/INeandersmol.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {\\n    IERC721Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface INeandersmol is IERC721Upgradeable {\\n    function getCommonSense(uint256 _tokenId) external view returns (uint256);\\n\\n    function staked(uint256 _tokenId) external view returns (bool);\\n\\n    function developMystics(uint256 _tokenId, uint256 _amount) external;\\n\\n    function developFarmers(uint256 _tokenId, uint256 _amount) external;\\n\\n    function developFighter(uint256 _tokenId, uint256 _amount) external;\\n\\n    function stakingHandler(uint256 _tokenId, bool _state) external;\\n}\\n\",\"keccak256\":\"0x009d81425f2e93c76d30ce6b9710f2917bb404048631fc7c4a94a522fdb8b079\",\"license\":\"MIT\"},\"contracts/interfaces/IPits.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\ninterface IPits {\\n    function validation() external view returns (bool);\\n\\n    function getTimeOut() external view returns (uint256);\\n\\n    function getTimeBelowMinimum() external view returns (uint256);\\n\\n    function getDaysOff(uint256 _timestamp) external view returns (uint256);\\n\\n    function getTotalDaysOff() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x78f6bd4f83335ef0ba713cc1a9b42c6ed988422dd53468e72c0c86526acdedff\",\"license\":\"MIT\"},\"contracts/interfaces/IRandomizer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\ninterface IRandomizer {\\n    // Returns a request ID for a random number. This is unique.\\n    function requestRandomNumber() external returns (uint256);\\n\\n    // Returns the random number for the given request ID. Will revert\\n    // if the random is not ready.\\n    function revealRandomNumber(\\n        uint256 _requestId\\n    ) external view returns (uint256);\\n\\n    // Returns if the random number for the given request ID is ready or not. Call\\n    // before calling revealRandomNumber.\\n    function isRandomReady(uint256 _requestId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x93a0e61fc97c543da993320b700966b07ca068c49324369daa35deddd2762b7d\",\"license\":\"MIT\"},\"contracts/library/Error.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nerror CsToHigh();\\nerror InvalidPos();\\nerror NotAContract();\\nerror NotYourToken();\\nerror NotAuthorized();\\nerror WrongMultiple();\\nerror CannotClaimNow();\\nerror TokenIsStaked();\\nerror TransferFailed();\\nerror InvalidTokenId();\\nerror InvalidLockTime();\\nerror NoMoreAnimalsAllowed();\\nerror LengthsNotEqual();\\nerror ZeroBalanceError();\\nerror CsIsBellowHundred();\\nerror NeandersmolsIsLocked();\\nerror BalanceIsInsufficient();\\nerror InvalidTokenForThisJob();\\nerror DevelopmentGroundIsLocked();\\nerror NeandersmolIsNotInDevelopmentGround();\\n\",\"keccak256\":\"0x56051af5581bf87b8516ff3dd73a00f3d48ac3aa631dfa2926525587aaad2e93\",\"license\":\"MIT\"},\"contracts/library/Lib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IPits } from \\\"../interfaces/IPits.sol\\\";\\nimport { DevelopmentGroundIsLocked } from \\\"./Error.sol\\\";\\n\\nlibrary Lib {\\n    function getDevGroundBonesReward(\\n        uint256 _currentLockPeriod,\\n        uint256 _lockPeriod,\\n        uint256 _lastRewardTime,\\n        IPits _pits\\n    ) internal view returns (uint256) {\\n        if (_lockPeriod == 0) return 0;\\n        uint256 rewardRate = getRewardRate(_lockPeriod);\\n\\n        uint256 time = (block.timestamp - _lastRewardTime) / 1 days;\\n\\n        if (time == 0) return 0;\\n        uint256 toBeRomoved = calculateFinalReward(_currentLockPeriod, _pits);\\n        return ((rewardRate * time) - (toBeRomoved * rewardRate)) * 10 ** 18;\\n    }\\n\\n    function calculatePrimarySkill(\\n        uint256 _bonesStaked,\\n        uint256 _amountPosition,\\n        uint256 _currentLockPeriod,\\n        uint256 _tokenId,\\n        IPits _pits,\\n        mapping(uint256 => mapping(uint256 => uint256)) storage trackTime,\\n        mapping(uint256 => mapping(uint256 => uint256)) storage trackToken\\n    ) internal view returns (uint256) {\\n        if (_bonesStaked == 0) return 0;\\n        uint256 amount;\\n        uint256 i = 1;\\n        for (; i <= _amountPosition; ) {\\n            uint256 time = (block.timestamp - trackTime[_tokenId][i]) / 1 days;\\n            uint256 stakedAmount = trackToken[_tokenId][trackTime[_tokenId][i]];\\n            amount += (time * stakedAmount);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        uint256 toBeRemoved = calculateFinalReward(_currentLockPeriod, _pits);\\n        return (amount - (toBeRemoved * 10 ** 21)) / 10 ** 4;\\n    }\\n\\n    function calculateFinalReward(\\n        uint256 /* _currentLockPeriod*/,\\n        IPits /*_pits*/\\n    ) internal view returns (uint256) {\\n        return 0;\\n        // if (_currentLockPeriod == 0) {\\n        //     console.log(_currentLockPeriod);\\n        //     if (_pits.getTotalDaysOff() == 0) {\\n        //         return\\n        //             _pits.getTimeOut() == 0\\n        //                 ? 0\\n        //                 : (block.timestamp - _pits.getTimeOut()) / 1 days;\\n        //     } else {\\n        //         return _pits.getTotalDaysOff();\\n        //     }\\n        // } else {\\n        //     uint256 howLong = (block.timestamp - _pits.getTimeOut()) / 1 days;\\n\\n        //     if (_pits.getTotalDaysOff() == 0) {\\n        //         return 0;\\n        //     } else {\\n        //         return\\n        //             _pits.getTimeOut() == _currentLockPeriod &&\\n        //                 _pits.validation()\\n        //                 ? 0\\n        //                 : (_pits.getTotalDaysOff() -\\n        //                     (_pits.getDaysOff(_currentLockPeriod) + howLong));\\n        //     }\\n        // }\\n    }\\n\\n    function getRewardRate(\\n        uint _lockTime\\n    ) internal pure returns (uint256 rewardRate) {\\n        if (_lockTime == 50 days) rewardRate = 10;\\n        if (_lockTime == 100 days) rewardRate = 50;\\n        if (_lockTime == 150 days) rewardRate = 100;\\n    }\\n\\n    function pitsValidation(IPits _pits) internal view {\\n        if (!_pits.validation()) revert DevelopmentGroundIsLocked();\\n    }\\n\\n    function removeItem(\\n        uint256[] storage _element,\\n        uint256 _removeElement\\n    ) internal {\\n        uint256 i;\\n        for (; i < _element.length; ) {\\n            if (_element[i] == _removeElement) {\\n                _element[i] = _element[_element.length - 1];\\n                _element.pop();\\n                break;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x891f41e94892a20be5ff767eb29b897990d0c067a5e7dd6328b08c486777aa0c\",\"license\":\"MIT\"},\"contracts/library/StructsEnums.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nstruct DevelopmentGround {\\n    address owner;\\n    uint64 lockPeriod;\\n    uint64 amountPosition;\\n    uint64 entryTime;\\n    uint64 lastRewardTime;\\n    uint256 bonesStaked;\\n    uint256 currentPitsLockPeriod;\\n    Grounds ground;\\n}\\n\\nstruct LaborGround {\\n    address owner;\\n    uint32 lockTime;\\n    uint32 supplyId;\\n    uint32 animalId;\\n    uint256 requestId;\\n    Jobs job;\\n}\\n\\nstruct Cave {\\n    address owner;\\n    uint48 stakingTime;\\n    uint48 lastRewardTimestamp;\\n}\\n\\nstruct CavesFeInfo {\\n    uint256 reward;\\n    uint128 stakedSmols;\\n    uint128 timeLeft;\\n}\\n\\nstruct DevGroundFeInfo {\\n    uint96 timeLeft;\\n    uint96 daysStaked;\\n    uint64 stakedSmols;\\n    uint256 skillLevel;\\n    uint256 bonesAccured;\\n    uint256 totalBonesStaked;\\n    Grounds ground;\\n}\\n\\nstruct BonesFeInfo {\\n    uint256 balance;\\n    uint256 timeStaked;\\n}\\n\\nstruct LaborGroundFeInfo {\\n    uint64 timeLeft;\\n    uint64 tokenId;\\n    uint64 animalId;\\n    uint64 supplyId;\\n}\\n\\n/**\\n * token id\\n * bones occured\\n * primary skill level\\n * days left\\n */\\n\\nenum Jobs {\\n    Digging,\\n    Foraging,\\n    Mining\\n}\\n\\nenum Grounds {\\n    Chambers,\\n    Garden,\\n    Battlefield\\n}\\n\",\"keccak256\":\"0x81c31e6fb0100f35f8e1ffa09ae954eb32bc120c1e977eb9028e7f3e8acb812b\",\"license\":\"MIT\"},\"solady/src/auth/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\\n/// @dev While the ownable portion follows [EIP-173](https://eips.ethereum.org/EIPS/eip-173)\\n/// for compatibility, the nomenclature for the 2-step ownership handover\\n/// may be unique to this codebase.\\nabstract contract Ownable {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The caller is not authorized to call the function.\\n    error Unauthorized();\\n\\n    /// @dev The `newOwner` cannot be the zero address.\\n    error NewOwnerIsZeroAddress();\\n\\n    /// @dev The `pendingOwner` does not have a valid handover request.\\n    error NoHandoverRequest();\\n\\n    /// @dev `bytes4(keccak256(bytes(\\\"Unauthorized()\\\")))`.\\n    uint256 private constant _UNAUTHORIZED_ERROR_SELECTOR = 0x82b42900;\\n\\n    /// @dev `bytes4(keccak256(bytes(\\\"NewOwnerIsZeroAddress()\\\")))`.\\n    uint256 private constant _NEW_OWNER_IS_ZERO_ADDRESS_ERROR_SELECTOR = 0x7448fbae;\\n\\n    /// @dev `bytes4(keccak256(bytes(\\\"NoHandoverRequest()\\\")))`.\\n    uint256 private constant _NO_HANDOVER_REQUEST_ERROR_SELECTOR = 0x6f5e8818;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\\n    /// despite it not being as lightweight as a single argument event.\\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @dev An ownership handover to `pendingOwner` has been requested.\\n    event OwnershipHandoverRequested(address indexed pendingOwner);\\n\\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipTransferred(address,address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverRequested(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverCanceled(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The owner slot is given by: `not(_OWNER_SLOT_NOT)`.\\n    /// It is intentionally choosen to be a high value\\n    /// to avoid collision with lower slots.\\n    /// The choice of manual storage layout is to enable compatibility\\n    /// with both regular and upgradeable contracts.\\n    uint256 private constant _OWNER_SLOT_NOT = 0x8b78c6d8;\\n\\n    /// The ownership handover slot of `newOwner` is given by:\\n    /// ```\\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\\n    ///     let handoverSlot := keccak256(0x00, 0x20)\\n    /// ```\\n    /// It stores the expiry timestamp of the two-step ownership handover.\\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     INTERNAL FUNCTIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Initializes the owner directly without authorization guard.\\n    /// This function must be called upon initialization,\\n    /// regardless of whether the contract is upgradeable or not.\\n    /// This is to enable generalization to both regular and upgradeable contracts,\\n    /// and to save gas in case the initial owner is not the caller.\\n    /// For performance reasons, this function will not check if there\\n    /// is an existing owner.\\n    function _initializeOwner(address newOwner) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clean the upper 96 bits.\\n            newOwner := shr(96, shl(96, newOwner))\\n            // Store the new value.\\n            sstore(not(_OWNER_SLOT_NOT), newOwner)\\n            // Emit the {OwnershipTransferred} event.\\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\\n        }\\n    }\\n\\n    /// @dev Sets the owner directly without authorization guard.\\n    function _setOwner(address newOwner) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ownerSlot := not(_OWNER_SLOT_NOT)\\n            // Clean the upper 96 bits.\\n            newOwner := shr(96, shl(96, newOwner))\\n            // Emit the {OwnershipTransferred} event.\\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\\n            // Store the new value.\\n            sstore(ownerSlot, newOwner)\\n        }\\n    }\\n\\n    /// @dev Throws if the sender is not the owner.\\n    function _checkOwner() internal view virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If the caller is not the stored owner, revert.\\n            if iszero(eq(caller(), sload(not(_OWNER_SLOT_NOT)))) {\\n                mstore(0x00, _UNAUTHORIZED_ERROR_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(shl(96, newOwner)) {\\n                mstore(0x00, _NEW_OWNER_IS_ZERO_ADDRESS_ERROR_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /// @dev Allows the owner to renounce their ownership.\\n    function renounceOwnership() public payable virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /// @dev Request a two-step ownership handover to the caller.\\n    /// The request will be automatically expire in 48 hours (172800 seconds) by default.\\n    function requestOwnershipHandover() public payable virtual {\\n        unchecked {\\n            uint256 expires = block.timestamp + ownershipHandoverValidFor();\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Compute and set the handover slot to `expires`.\\n                mstore(0x0c, _HANDOVER_SLOT_SEED)\\n                mstore(0x00, caller())\\n                sstore(keccak256(0x0c, 0x20), expires)\\n                // Emit the {OwnershipHandoverRequested} event.\\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\\n            }\\n        }\\n    }\\n\\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\\n    function cancelOwnershipHandover() public payable virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x20), 0)\\n            // Emit the {OwnershipHandoverCanceled} event.\\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\\n        }\\n    }\\n\\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            let handoverSlot := keccak256(0x0c, 0x20)\\n            // If the handover does not exist, or has expired.\\n            if gt(timestamp(), sload(handoverSlot)) {\\n                mstore(0x00, _NO_HANDOVER_REQUEST_ERROR_SELECTOR)\\n                revert(0x1c, 0x04)\\n            }\\n            // Set the handover slot to 0.\\n            sstore(handoverSlot, 0)\\n        }\\n        _setOwner(pendingOwner);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   PUBLIC READ FUNCTIONS                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the owner of the contract.\\n    function owner() public view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := sload(not(_OWNER_SLOT_NOT))\\n        }\\n    }\\n\\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\\n    function ownershipHandoverExpiresAt(address pendingOwner)\\n        public\\n        view\\n        virtual\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the handover slot.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            // Load the handover slot.\\n            result := sload(keccak256(0x0c, 0x20))\\n        }\\n    }\\n\\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\\n    function ownershipHandoverValidFor() public view virtual returns (uint64) {\\n        return 48 * 3600;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         MODIFIERS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Marks a function as only callable by the owner.\\n    modifier onlyOwner() virtual {\\n        _checkOwner();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdbe39ea9c0007f470d5c9b54dc21d7d41e4580a8ec57a81d183fc5ce3815ce75\",\"license\":\"MIT\"},\"solady/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Caution! This library won't check that a token has code, responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ETH transfer has failed.\\n    error ETHTransferFailed();\\n\\n    /// @dev The ERC20 `transferFrom` has failed.\\n    error TransferFromFailed();\\n\\n    /// @dev The ERC20 `transfer` has failed.\\n    error TransferFailed();\\n\\n    /// @dev The ERC20 `approve` has failed.\\n    error ApproveFailed();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH\\n    /// that disallows any storage writes.\\n    uint256 internal constant _GAS_STIPEND_NO_STORAGE_WRITES = 2300;\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\\n    /// storage reads and writes, but low enough to prevent griefing.\\n    /// Multiply by a small constant (e.g. 2), if needed.\\n    uint256 internal constant _GAS_STIPEND_NO_GRIEF = 100000;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       ETH OPERATIONS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gasStipend, to, amount, 0, 0, 0, 0)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                pop(create(amount, 0x0b, 0x16))\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a gas stipend\\n    /// equal to `_GAS_STIPEND_NO_GRIEF`. This gas stipend is a reasonable default\\n    /// for 99% of cases and can be overriden with the three-argument version of this\\n    /// function if necessary.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount) internal {\\n        // Manually inlined because the compiler doesn't inline functions with branches.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(_GAS_STIPEND_NO_GRIEF, to, amount, 0, 0, 0, 0)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                pop(create(amount, 0x0b, 0x16))\\n            }\\n        }\\n    }\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// Simply use `gasleft()` for `gasStipend` if you don't need a gas stipend.\\n    ///\\n    /// Note: Does NOT revert upon failure.\\n    /// Returns whether the transfer of ETH is successful instead.\\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\\n        internal\\n        returns (bool success)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            success := call(gasStipend, to, amount, 0, 0, 0, 0)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC20 OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x00, 0x23b872dd)\\n            mstore(0x20, from) // Store the `from` argument.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x60, amount) // Store the `amount` argument.\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferAllFrom(address token, address from, address to)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, from) // Store the `from` argument.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x00, 0x23b872dd)\\n            mstore(0x40, to) // Store the `to` argument.\\n            // The `amount` argument is already written to the memory word at 0x6a.\\n            amount := mload(0x60)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1a, to) // Store the `to` argument.\\n            mstore(0x3a, amount) // Store the `amount` argument.\\n            // Store the function selector of `transfer(address,uint256)`,\\n            // left by 6 bytes (enough for 8tb of memory represented by the free memory pointer).\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\n            mstore(0x00, 0xa9059cbb000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x16, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, address()) // Store the address of the current contract.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x3a, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x1a, to) // Store the `to` argument.\\n            // The `amount` argument is already written to the memory word at 0x3a.\\n            amount := mload(0x3a)\\n            // Store the function selector of `transfer(address,uint256)`,\\n            // left by 6 bytes (enough for 8tb of memory represented by the free memory pointer).\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\n            mstore(0x00, 0xa9059cbb000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x16, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// Reverts upon failure.\\n    function safeApprove(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1a, to) // Store the `to` argument.\\n            mstore(0x3a, amount) // Store the `amount` argument.\\n            // Store the function selector of `approve(address,uint256)`,\\n            // left by 6 bytes (enough for 8tb of memory represented by the free memory pointer).\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\n            mstore(0x00, 0x095ea7b3000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x16, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `ApproveFailed()`.\\n                mstore(0x00, 0x3e3f8f73)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\\n    /// Returns zero if the `token` does not exist.\\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, account) // Store the `account` argument.\\n            amount :=\\n                mul(\\n                    mload(0x20),\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                        staticcall(gas(), token, 0x1c, 0x24, 0x20, 0x20)\\n                    )\\n                )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd90b1d9017a6969dce31df5199f92f1b6f5a0a59fa2ac06217a83a2815700082\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c8063b00bec65116100d1578063d88ad8871161008a578063ec42cb7711610064578063ec42cb7714610546578063f04e283e1461056f578063f2fde38b1461058b578063fee81cf4146105a757610181565b8063d88ad887146104b5578063dd4fcc16146104e0578063ea32dac51461051d57610181565b8063b00bec65146103a7578063c0c53b8b146103d2578063c805c9af146103fb578063cb2fe05e14610424578063cf10078f1461044d578063d7533f021461048a57610181565b8063547ac0711161013e57806363c28db11161011857806363c28db11461030a578063715018a6146103475780637fd4bfd5146103515780638da5cb5b1461037c57610181565b8063547ac071146102ae57806354d1f13d146102d75780635970f453146102e157610181565b8063074f7eb3146101865780630a144076146101c357806325692962146102015780632a1f41461461020b5780633be08dab146102485780633e39953a14610271575b600080fd5b34801561019257600080fd5b506101ad60048036038101906101a8919061469a565b6105e4565b6040516101ba91906148de565b60405180910390f35b3480156101cf57600080fd5b506101ea60048036038101906101e5919061469a565b610832565b6040516101f892919061490f565b60405180910390f35b61020961093e565b005b34801561021757600080fd5b50610232600480360381019061022d9190614964565b610992565b60405161023f9190614991565b60405180910390f35b34801561025457600080fd5b5061026f600480360381019061026a91906149ac565b610b74565b005b34801561027d57600080fd5b5061029860048036038101906102939190614964565b610c44565b6040516102a59190614991565b60405180910390f35b3480156102ba57600080fd5b506102d560048036038101906102d09190614a64565b610e2b565b005b6102df611107565b005b3480156102ed57600080fd5b5061030860048036038101906103039190614b3b565b611143565b005b34801561031657600080fd5b50610331600480360381019061032c919061469a565b61183d565b60405161033e9190614c9e565b60405180910390f35b61034f6118d4565b005b34801561035d57600080fd5b506103666118e8565b6040516103739190614d1f565b60405180910390f35b34801561038857600080fd5b5061039161190e565b60405161039e9190614d49565b60405180910390f35b3480156103b357600080fd5b506103bc61191c565b6040516103c99190614d85565b60405180910390f35b3480156103de57600080fd5b506103f960048036038101906103f491906149ac565b611942565b005b34801561040757600080fd5b50610422600480360381019061041d9190614da0565b611a8f565b005b34801561043057600080fd5b5061044b60048036038101906104469190614e36565b612103565b005b34801561045957600080fd5b50610474600480360381019061046f9190614964565b6121ff565b6040516104819190614f95565b60405180910390f35b34801561049657600080fd5b5061049f6124bf565b6040516104ac9190614fc6565b60405180910390f35b3480156104c157600080fd5b506104ca6124ca565b6040516104d79190615002565b60405180910390f35b3480156104ec57600080fd5b5061050760048036038101906105029190614964565b6124f0565b60405161051491906150ce565b60405180910390f35b34801561052957600080fd5b50610544600480360381019061053f9190614e36565b61268b565b005b34801561055257600080fd5b5061056d600480360381019061056891906150ea565b61273a565b005b6105896004803603810190610584919061469a565b612780565b005b6105a560048036038101906105a0919061469a565b6127c1565b005b3480156105b357600080fd5b506105ce60048036038101906105c9919061469a565b6127eb565b6040516105db9190614991565b60405180910390f35b60606000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561067157602002820191906000526020600020905b81548152602001906001019080831161065d575b505050505090506000815167ffffffffffffffff81111561069557610694615137565b5b6040519080825280602002602001820160405280156106ce57816020015b6106bb61450e565b8152602001906001900390816106b35790505b50905060005b81518110156108275760008382815181106106f2576106f1615166565b5b602002602001015190506000610707826124f0565b905060008160600151826020015161071f91906151c4565b67ffffffffffffffff169050600081421061073b576000610756565b62015180428361074b9190615200565b6107559190615263565b5b90506040518060e00160405280826bffffffffffffffffffffffff168152602001846060015167ffffffffffffffff16426107919190615200565b6bffffffffffffffffffffffff1681526020018567ffffffffffffffff1681526020016107bd86610992565b81526020016107cb86610c44565b81526020018460a0015181526020018460e0015160028111156107f1576107f0614756565b5b81525086868151811061080757610806615166565b5b6020026020010181905250505050508061082090615294565b90506106d4565b819350505050919050565b6000806000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156108c057602002820191906000526020600020905b8154815260200190600101908083116108ac575b5050505050905060008060005b835181101561092f576000806108fc8684815181106108ef576108ee615166565b5b6020026020010151612806565b91509150818561090c91906152dc565b9450808461091a91906152dc565b935050508061092890615294565b90506108cd565b50818194509450505050915091565b60006109486124bf565b67ffffffffffffffff164201905063389a75e1600c5233600052806020600c2055337fdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d600080a250565b60008060066000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115610b0b57610b0a614756565b5b6002811115610b1d57610b1c614756565b5b815250509050610b6c8160a00151826040015167ffffffffffffffff168360c0015186600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660036004612a9e565b915050919050565b610b7c612bbd565b80600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60008060066000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115610dbd57610dbc614756565b5b6002811115610dcf57610dce614756565b5b815250509050610e238160c00151826020015167ffffffffffffffff16836080015167ffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612bda565b915050919050565b610e56600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612c7b565b610e6284848484612d23565b60005b8484905081101561110057600080848484818110610e8657610e85615166565b5b90506020020135878785818110610ea057610e9f615166565b5b9050602002013591509150600060066000848152602001908152602001600020905081600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610f1e9190614d49565b602060405180830381865afa158015610f3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5f9190615325565b1015610f97576040517f7276110900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611020576040517fb47f2b3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000683635c9adc5dea00000836110379190615352565b1461106e576040517f1d823d0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61109c600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16333085612d68565b6110a7818484612db8565b82823373ffffffffffffffffffffffffffffffffffffffff167f1004c640a4c8dbc3c9dd5ff33837d99e4882aaf2b20fb8e7c419fc83c8ca5bd060405160405180910390a4505050806110f990615294565b9050610e65565b5050505050565b63389a75e1600c523360005260006020600c2055337ffa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92600080a2565b600061115187878787612d23565b828290508585905014611190576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111bb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612c7b565b5b86869050811015611834576000808888848181106111dd576111dc615166565b5b905060200201358787858181106111f7576111f6615166565b5b9050602002013591509150600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e1bef32836040518263ffffffff1660e01b815260040161125d9190614991565b602060405180830381865afa15801561127a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129e91906153bb565b156112d5576040517f3899ae3600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006006600084815260200190815260200160002090506064600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f822a5b2856040518263ffffffff1660e01b81526004016113499190614991565b602060405180830381865afa158015611366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138a9190615325565b10156113c2576040517f7f36105d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016114349190614991565b602060405180830381865afa158015611451573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147591906153fd565b73ffffffffffffffffffffffffffffffffffffffff16146114c2576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114cb82612e96565b611501576040517fabf20e8f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166337bf06a68460016040518363ffffffff1660e01b815260040161155f929190615439565b600060405180830381600087803b15801561157957600080fd5b505af115801561158d573d6000803e3d6000fd5b50505050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550818160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550428160010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555085858581811061166857611667615166565b5b905060200201602081019061167d9190615487565b8160040160006101000a81548160ff021916908360028111156116a3576116a2614756565b5b0217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611715573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117399190615325565b8160030181905550600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083908060018154018082558091505060019003906000526020600020016000909190919091505581833373ffffffffffffffffffffffffffffffffffffffff167ff0a4b106684863ac7bbc666f47a082e4f6a197f11447743c5347b3344b6b527e428a8a8a8181106117f5576117f4615166565b5b905060200201602081019061180a9190615487565b6040516118189291906154c3565b60405180910390a45050508061182d90615294565b90506111bc565b50505050505050565b6060600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156118c857602002820191906000526020600020905b8154815260200190600101908083116118b4575b50505050509050919050565b6118dc612bbd565b6118e66000612ebf565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000638b78c6d81954905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900460ff161590508080156119735750600160008054906101000a900460ff1660ff16105b806119a0575061198230612efd565b15801561199f5750600160008054906101000a900460ff1660ff16145b5b6119df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d69061556f565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611a1c576001600060016101000a81548160ff0219169083151502179055505b611a2533612f20565b611a30848484610b74565b8015611a895760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611a8091906155d7565b60405180910390a15b50505050565b60008103611ac9576040517f69229ba700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060066000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115611c4157611c40614756565b5b6002811115611c5357611c52614756565b5b8152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614611cc2576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81816040015167ffffffffffffffff161015611d0a576040517f69229ba700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160a0015103611d48576040517f9b4bb81b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d5183612f5c565b600080600360008681526020019081526020016000206000858152602001908152602001600020549050600060046000878152602001908152602001600020600083815260200190815260200160002054905062278d0082611db391906152dc565b42108015611dd4575060006002611dc8613318565b611dd29190615352565b145b611e10576004600087815260200190815260200160002060008381526020019081526020016000205483611e0891906152dc565b925082611e50565b600260046000888152602001908152602001600020600084815260200190815260200160002054611e419190615263565b83611e4c91906152dc565b9250825b506001846040015167ffffffffffffffff1614611ec457600360008781526020019081526020016000206000600187611e8991906152dc565b815260200190815260200160002054600360008881526020019081526020016000206000878152602001908152602001600020819055611eee565b60006003600088815260200190815260200160002060008781526020019081526020016000208190555b5060006004600088815260200190815260200160002060008481526020019081526020016000208190555080600660008881526020019081526020016000206002016000828254611f3f9190615200565b9250508190555060016006600088815260200190815260200160002060010160008282829054906101000a900467ffffffffffffffff16611f8091906155f2565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060008382611fb49190615200565b90506000811461204e57600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac30836040518363ffffffff1660e01b815260040161201b92919061562e565b600060405180830381600087803b15801561203557600080fd5b505af1158015612049573d6000803e3d6000fd5b505050505b60008403612088576040517f9b4bb81b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6120b5600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633866133e2565b83873373ffffffffffffffffffffffffffffffffffffffff167fa720e44767e2cddb37cfa697023b1f3875d107b58722b1cb628083a465290af860405160405180910390a450505050505050565b818190508484905014612142576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b848490508110156121f857600061217486868481811061216857612167615166565b5b90506020020135610992565b111561219d5761219c8585838181106121905761218f615166565b5b90506020020135612f5c565b5b6121e78585838181106121b3576121b2615166565b5b905060200201358484848181106121cd576121cc615166565b5b90506020020160208101906121e2919061566c565b61342b565b806121f190615294565b9050612145565b5050505050565b6060600060066000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16600281111561237957612378614756565b5b600281111561238b5761238a614756565b5b8152505090506000816040015167ffffffffffffffff1667ffffffffffffffff8111156123bb576123ba615137565b5b6040519080825280602002602001820160405280156123f457816020015b6123e1614583565b8152602001906001900390816123d95790505b50905060005b826040015167ffffffffffffffff168110156124b457600060036000878152602001908152602001600020600060018461243491906152dc565b8152602001908152602001600020549050600060046000888152602001908152602001600020600083815260200190815260200160002054905060405180604001604052808281526020018381525084848151811061249657612495615166565b5b60200260200101819052505050806124ad90615294565b90506123fa565b819350505050919050565b60006202a300905090565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6124f861459d565b60066000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16600281111561266e5761266d614756565b5b60028111156126805761267f614756565b5b815250509050919050565b8181905084849050146126ca576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b84849050811015612733576127228585838181106126ee576126ed615166565b5b9050602002013584848481811061270857612707615166565b5b905060200201602081019061271d919061566c565b613a42565b8061272c90615294565b90506126cd565b5050505050565b60005b8282905081101561277b5761276a83838381811061275e5761275d615166565b5b90506020020135613db0565b8061277490615294565b905061273d565b505050565b612788612bbd565b63389a75e1600c52806000526020600c2080544211156127b057636f5e88186000526004601cfd5b60008155506127be81612ebf565b50565b6127c9612bbd565b8060601b6127df57637448fbae6000526004601cfd5b6127e881612ebf565b50565b600063389a75e1600c52816000526020600c20549050919050565b600080600060066000858152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16600281111561298157612980614756565b5b600281111561299357612992614756565b5b81525050905060008160a00151036129b2576000809250925050612a99565b6000600190506000805b836040015167ffffffffffffffff168311612a8e57600060036000898152602001908152602001600020600085815260200190815260200160002054905062278d0081612a0991906152dc565b4210612a47576004600089815260200190815260200160002060008281526020019081526020016000205483612a3f91906152dc565b925082612a7b565b6004600089815260200190815260200160002060008281526020019081526020016000205482612a7791906152dc565b9150815b505082612a8790615294565b92506129bc565b808295509550505050505b915091565b6000808803612ab05760009050612bb2565b600080600190505b888111612b71576000620151808660008a815260200190815260200160002060008481526020019081526020016000205442612af49190615200565b612afe9190615263565b905060008560008a815260200190815260200160002060008860008c815260200190815260200160002060008681526020019081526020016000205481526020019081526020016000205490508082612b579190615699565b84612b6291906152dc565b93508260010192505050612ab8565b6000612b7d8988614223565b9050612710683635c9adc5dea0000082612b979190615699565b84612ba29190615200565b612bac9190615263565b93505050505b979650505050505050565b638b78c6d819543314612bd8576382b429006000526004601cfd5b565b6000808403612bec5760009050612c73565b6000612bf78561422b565b90506000620151808542612c0b9190615200565b612c159190615263565b905060008103612c2a57600092505050612c73565b6000612c368886614223565b9050670de0b6b3a76400008382612c4d9190615699565b8385612c599190615699565b612c639190615200565b612c6d9190615699565b93505050505b949350505050565b8073ffffffffffffffffffffffffffffffffffffffff1663ae4b37e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cea91906153bb565b612d20576040517f288de97200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b818190508484905014612d62576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6040516323b872dd600052836020528260405281606052602060006064601c6000895af13d156001600051141716612da857637939f4246000526004601cfd5b6000606052806040525050505050565b80836002016000828254612dcc91906152dc565b9250508190555082600101600081819054906101000a900467ffffffffffffffff16612df7906156db565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508060046000848152602001908152602001600020600042815260200190815260200160002081905550426003600084815260200190815260200160002060008560010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002081905550505050565b60006241eb00821480612eab57506283d60082145b80612eb8575062c5c10082145b9050919050565b638b78c6d8198160601b60601c91508181547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a38181555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8060601b60601c905080638b78c6d819558060007f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a350565b600060066000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660028111156130d4576130d3614756565b5b60028111156130e6576130e5614756565b5b8152505090506000806130f884610992565b8360e00151915091506000600281111561311557613114614756565b5b81600281111561312857613127614756565b5b036131c157600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663743f4e9485846040518363ffffffff1660e01b815260040161318a92919061490f565b600060405180830381600087803b1580156131a457600080fd5b505af11580156131b8573d6000803e3d6000fd5b50505050613312565b600160028111156131d5576131d4614756565b5b8160028111156131e8576131e7614756565b5b0361328157600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663067ea39285846040518363ffffffff1660e01b815260040161324a92919061490f565b600060405180830381600087803b15801561326457600080fd5b505af1158015613278573d6000803e3d6000fd5b50505050613311565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0c5057785846040518363ffffffff1660e01b81526004016132de92919061490f565b600060405180830381600087803b1580156132f857600080fd5b505af115801561330c573d6000803e3d6000fd5b505050505b5b50505050565b60008043423360405160200161332e9190615753565b6040516020818303038152906040528051906020012060001c6133519190615263565b45424160405160200161336491906157a9565b6040516020818303038152906040528051906020012060001c6133879190615263565b4261339291906152dc565b61339c91906152dc565b6133a691906152dc565b6133b091906152dc565b6040516020016133c091906157e5565b6040516020818303038152906040528051906020012060001c90508091505090565b81601a5280603a5269a9059cbb00000000000060005260206000604460166000875af13d156001600051141716613421576390b8ec186000526004601cfd5b6000603a52505050565b600060066000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660028111156135a3576135a2614756565b5b60028111156135b5576135b4614756565b5b8152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614613624576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160a0015103613662576040517f9b4bb81b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600190506000805b836040015167ffffffffffffffff16831161387b5760008060036000898152602001908152602001600020600086815260200190815260200160002054600360008a815260200190815260200160002060006001886136cb91906152dc565b8152602001908152602001600020549150915062278d00826136ed91906152dc565b421080156136f9575086155b1561370557505061386a565b62278d008261371491906152dc565b4210801561371f5750865b801561373e575060006002613732613318565b61373c9190615352565b145b61377a57600460008981526020019081526020016000206000838152602001908152602001600020548461377291906152dc565b9350836137ba565b6002600460008a81526020019081526020016000206000848152602001908152602001600020546137ab9190615263565b846137b691906152dc565b9350835b5086806137d557506001866040015167ffffffffffffffff16145b6138065780600360008a81526020019081526020016000206000878152602001908152602001600020819055613830565b6000600360008a815260200190815260200160002060008781526020019081526020016000208190555b506000600460008a815260200190815260200160002060008481526020019081526020016000208190555082613865906156db565b925050505b8261387490615294565b925061366c565b806006600088815260200190815260200160002060010160008282829054906101000a900467ffffffffffffffff166138b491906155f2565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550816006600088815260200190815260200160002060020160008282546139009190615200565b925050819055506000828560a001516139199190615200565b9050600081141580156139295750855b156139be57600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac30836040518363ffffffff1660e01b815260040161398b92919061562e565b600060405180830381600087803b1580156139a557600080fd5b505af11580156139b9573d6000803e3d6000fd5b505050505b600083146139f4576139f3600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633856133e2565b5b82873373ffffffffffffffffffffffffffffffffffffffff167fa720e44767e2cddb37cfa697023b1f3875d107b58722b1cb628083a465290af860405160405180910390a450505050505050565b600060066000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115613bba57613bb9614756565b5b6002811115613bcc57613bcb614756565b5b8152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614613c3b576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000613c4684610c44565b905060008103613c82576040517f9b4bb81b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426006600086815260200190815260200160002060010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555082613d5857600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401613d2192919061562e565b600060405180830381600087803b158015613d3b57600080fd5b505af1158015613d4f573d6000803e3d6000fd5b50505050613d63565b613d62848261425f565b5b821515843373ffffffffffffffffffffffffffffffffffffffff167f10fffc2725e2f04d2e9a7aa7762d3db31dd4051420267e5be076a5b13e8bb07760405160405180910390a450505050565b600060066000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115613f2857613f27614756565b5b6002811115613f3a57613f39614756565b5b8152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614613fa9576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80602001518160600151613fbd91906151c4565b67ffffffffffffffff16421015614000576040517ff5dcc1e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061400b83610c44565b111561401d5761401c826000613a42565b5b60008160a0015111156140365761403582600161342b565b5b61407e600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083614450565b60066000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549067ffffffffffffffff02191690556001820160006101000a81549067ffffffffffffffff02191690556001820160086101000a81549067ffffffffffffffff02191690556001820160106101000a81549067ffffffffffffffff0219169055600282016000905560038201600090556004820160006101000a81549060ff02191690555050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166337bf06a68360006040518363ffffffff1660e01b81526004016141a9929190615439565b600060405180830381600087803b1580156141c357600080fd5b505af11580156141d7573d6000803e3d6000fd5b50505050813373ffffffffffffffffffffffffffffffffffffffff167f26727522aa20721ee01410aea547e7fc187973e8abf49394168d3c9cb4c90cf260405160405180910390a35050565b600092915050565b60006241eb00820361423c57600a90505b6283d600820361424b57603290505b62c5c100820361425a57606490505b919050565b6000683635c9adc5dea00000826142769190615352565b90508181036142b1576040517f1d823d0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000811461434957600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b815260040161431692919061562e565b600060405180830381600087803b15801561433057600080fd5b505af1158015614344573d6000803e3d6000fd5b505050505b600081836143579190615200565b9050614376600660008681526020019081526020016000208583612db8565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b81526004016143d392919061562e565b600060405180830381600087803b1580156143ed57600080fd5b505af1158015614401573d6000803e3d6000fd5b5050505083813373ffffffffffffffffffffffffffffffffffffffff167f1004c640a4c8dbc3c9dd5ff33837d99e4882aaf2b20fb8e7c419fc83c8ca5bd060405160405180910390a450505050565b60005b8280549050811015614509578183828154811061447357614472615166565b5b9060005260206000200154036144fe5782600184805490506144959190615200565b815481106144a6576144a5615166565b5b90600052602060002001548382815481106144c4576144c3615166565b5b9060005260206000200181905550828054806144e3576144e2615800565b5b60019003818190600052602060002001600090559055614509565b806001019050614453565b505050565b6040518060e0016040528060006bffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff168152602001600067ffffffffffffffff1681526020016000815260200160008152602001600081526020016000600281111561457d5761457c614756565b5b81525090565b604051806040016040528060008152602001600081525090565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff16815260200160008152602001600081526020016000600281111561462c5761462b614756565b5b81525090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006146678261463c565b9050919050565b6146778161465c565b811461468257600080fd5b50565b6000813590506146948161466e565b92915050565b6000602082840312156146b0576146af614632565b5b60006146be84828501614685565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006bffffffffffffffffffffffff82169050919050565b614714816146f3565b82525050565b600067ffffffffffffffff82169050919050565b6147378161471a565b82525050565b6000819050919050565b6147508161473d565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061479657614795614756565b5b50565b60008190506147a782614785565b919050565b60006147b782614799565b9050919050565b6147c7816147ac565b82525050565b60e0820160008201516147e3600085018261470b565b5060208201516147f6602085018261470b565b506040820151614809604085018261472e565b50606082015161481c6060850182614747565b50608082015161482f6080850182614747565b5060a082015161484260a0850182614747565b5060c082015161485560c08501826147be565b50505050565b600061486783836147cd565b60e08301905092915050565b6000602082019050919050565b600061488b826146c7565b61489581856146d2565b93506148a0836146e3565b8060005b838110156148d15781516148b8888261485b565b97506148c383614873565b9250506001810190506148a4565b5085935050505092915050565b600060208201905081810360008301526148f88184614880565b905092915050565b6149098161473d565b82525050565b60006040820190506149246000830185614900565b6149316020830184614900565b9392505050565b6149418161473d565b811461494c57600080fd5b50565b60008135905061495e81614938565b92915050565b60006020828403121561497a57614979614632565b5b60006149888482850161494f565b91505092915050565b60006020820190506149a66000830184614900565b92915050565b6000806000606084860312156149c5576149c4614632565b5b60006149d386828701614685565b93505060206149e486828701614685565b92505060406149f586828701614685565b9150509250925092565b600080fd5b600080fd5b600080fd5b60008083601f840112614a2457614a236149ff565b5b8235905067ffffffffffffffff811115614a4157614a40614a04565b5b602083019150836020820283011115614a5d57614a5c614a09565b5b9250929050565b60008060008060408587031215614a7e57614a7d614632565b5b600085013567ffffffffffffffff811115614a9c57614a9b614637565b5b614aa887828801614a0e565b9450945050602085013567ffffffffffffffff811115614acb57614aca614637565b5b614ad787828801614a0e565b925092505092959194509250565b60008083601f840112614afb57614afa6149ff565b5b8235905067ffffffffffffffff811115614b1857614b17614a04565b5b602083019150836020820283011115614b3457614b33614a09565b5b9250929050565b60008060008060008060608789031215614b5857614b57614632565b5b600087013567ffffffffffffffff811115614b7657614b75614637565b5b614b8289828a01614a0e565b9650965050602087013567ffffffffffffffff811115614ba557614ba4614637565b5b614bb189828a01614a0e565b9450945050604087013567ffffffffffffffff811115614bd457614bd3614637565b5b614be089828a01614ae5565b92509250509295509295509295565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000614c278383614747565b60208301905092915050565b6000602082019050919050565b6000614c4b82614bef565b614c558185614bfa565b9350614c6083614c0b565b8060005b83811015614c91578151614c788882614c1b565b9750614c8383614c33565b925050600181019050614c64565b5085935050505092915050565b60006020820190508181036000830152614cb88184614c40565b905092915050565b6000819050919050565b6000614ce5614ce0614cdb8461463c565b614cc0565b61463c565b9050919050565b6000614cf782614cca565b9050919050565b6000614d0982614cec565b9050919050565b614d1981614cfe565b82525050565b6000602082019050614d346000830184614d10565b92915050565b614d438161465c565b82525050565b6000602082019050614d5e6000830184614d3a565b92915050565b6000614d6f82614cec565b9050919050565b614d7f81614d64565b82525050565b6000602082019050614d9a6000830184614d76565b92915050565b60008060408385031215614db757614db6614632565b5b6000614dc58582860161494f565b9250506020614dd68582860161494f565b9150509250929050565b60008083601f840112614df657614df56149ff565b5b8235905067ffffffffffffffff811115614e1357614e12614a04565b5b602083019150836020820283011115614e2f57614e2e614a09565b5b9250929050565b60008060008060408587031215614e5057614e4f614632565b5b600085013567ffffffffffffffff811115614e6e57614e6d614637565b5b614e7a87828801614a0e565b9450945050602085013567ffffffffffffffff811115614e9d57614e9c614637565b5b614ea987828801614de0565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b604082016000820151614ef96000850182614747565b506020820151614f0c6020850182614747565b50505050565b6000614f1e8383614ee3565b60408301905092915050565b6000602082019050919050565b6000614f4282614eb7565b614f4c8185614ec2565b9350614f5783614ed3565b8060005b83811015614f88578151614f6f8882614f12565b9750614f7a83614f2a565b925050600181019050614f5b565b5085935050505092915050565b60006020820190508181036000830152614faf8184614f37565b905092915050565b614fc08161471a565b82525050565b6000602082019050614fdb6000830184614fb7565b92915050565b6000614fec82614cec565b9050919050565b614ffc81614fe1565b82525050565b60006020820190506150176000830184614ff3565b92915050565b6150268161465c565b82525050565b61010082016000820151615043600085018261501d565b506020820151615056602085018261472e565b506040820151615069604085018261472e565b50606082015161507c606085018261472e565b50608082015161508f608085018261472e565b5060a08201516150a260a0850182614747565b5060c08201516150b560c0850182614747565b5060e08201516150c860e08501826147be565b50505050565b6000610100820190506150e4600083018461502c565b92915050565b6000806020838503121561510157615100614632565b5b600083013567ffffffffffffffff81111561511f5761511e614637565b5b61512b85828601614a0e565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006151cf8261471a565b91506151da8361471a565b9250828201905067ffffffffffffffff8111156151fa576151f9615195565b5b92915050565b600061520b8261473d565b91506152168361473d565b925082820390508181111561522e5761522d615195565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061526e8261473d565b91506152798361473d565b92508261528957615288615234565b5b828204905092915050565b600061529f8261473d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036152d1576152d0615195565b5b600182019050919050565b60006152e78261473d565b91506152f28361473d565b925082820190508082111561530a57615309615195565b5b92915050565b60008151905061531f81614938565b92915050565b60006020828403121561533b5761533a614632565b5b600061534984828501615310565b91505092915050565b600061535d8261473d565b91506153688361473d565b92508261537857615377615234565b5b828206905092915050565b60008115159050919050565b61539881615383565b81146153a357600080fd5b50565b6000815190506153b58161538f565b92915050565b6000602082840312156153d1576153d0614632565b5b60006153df848285016153a6565b91505092915050565b6000815190506153f78161466e565b92915050565b60006020828403121561541357615412614632565b5b6000615421848285016153e8565b91505092915050565b61543381615383565b82525050565b600060408201905061544e6000830185614900565b61545b602083018461542a565b9392505050565b6003811061546f57600080fd5b50565b60008135905061548181615462565b92915050565b60006020828403121561549d5761549c614632565b5b60006154ab84828501615472565b91505092915050565b6154bd816147ac565b82525050565b60006040820190506154d86000830185614900565b6154e560208301846154b4565b9392505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000615559602e836154ec565b9150615564826154fd565b604082019050919050565b600060208201905081810360008301526155888161554c565b9050919050565b6000819050919050565b600060ff82169050919050565b60006155c16155bc6155b78461558f565b614cc0565b615599565b9050919050565b6155d1816155a6565b82525050565b60006020820190506155ec60008301846155c8565b92915050565b60006155fd8261471a565b91506156088361471a565b9250828203905067ffffffffffffffff81111561562857615627615195565b5b92915050565b60006040820190506156436000830185614d3a565b6156506020830184614900565b9392505050565b6000813590506156668161538f565b92915050565b60006020828403121561568257615681614632565b5b600061569084828501615657565b91505092915050565b60006156a48261473d565b91506156af8361473d565b92508282026156bd8161473d565b915082820484148315176156d4576156d3615195565b5b5092915050565b60006156e68261471a565b915067ffffffffffffffff8203615700576156ff615195565b5b600182019050919050565b60008160601b9050919050565b60006157238261570b565b9050919050565b600061573582615718565b9050919050565b61574d6157488261465c565b61572a565b82525050565b600061575f828461573c565b60148201915081905092915050565b60006157798261463c565b9050919050565b600061578b82615718565b9050919050565b6157a361579e8261576e565b615780565b82525050565b60006157b58284615792565b60148201915081905092915050565b6000819050919050565b6157df6157da8261473d565b6157c4565b82525050565b60006157f182846157ce565b60208201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122058123492323696c88e1bd8a64aac51ff2e48bb704f2b8f21a877f4c09f26192464736f6c63430008120033",
  "devdoc": {
    "errors": {
      "NewOwnerIsZeroAddress()": [
        {
          "details": "The `newOwner` cannot be the zero address."
        }
      ],
      "NoHandoverRequest()": [
        {
          "details": "The `pendingOwner` does not have a valid handover request."
        }
      ],
      "Unauthorized()": [
        {
          "details": "The caller is not authorized to call the function."
        }
      ]
    },
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "OwnershipHandoverCanceled(address)": {
        "details": "The ownership handover to `pendingOwner` has been canceled."
      },
      "OwnershipHandoverRequested(address)": {
        "details": "An ownership handover to `pendingOwner` has been requested."
      },
      "OwnershipTransferred(address,address)": {
        "details": "The ownership is transferred from `oldOwner` to `newOwner`. This event is intentionally kept the same as OpenZeppelin's Ownable to be compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173), despite it not being as lightweight as a single argument event."
      }
    },
    "kind": "dev",
    "methods": {
      "bonesToTime(uint256)": {
        "details": "Returns an array of BonesFeInfo structs containing information about the Bone tokens staked at certain time.",
        "params": {
          "_tokenId": "The ID of the token to retrieve information for."
        },
        "returns": {
          "_0": "An array of BonesFeInfo structs containing Bone token and timestamp information."
        }
      },
      "cancelOwnershipHandover()": {
        "details": "Cancels the two-step ownership handover to the caller, if any."
      },
      "claimDevelopmentGroundBonesReward(uint256[],bool[])": {
        "params": {
          "_stake": "Whether to stake the reward bones in the development ground",
          "_tokenId": "ID of the development ground"
        }
      },
      "completeOwnershipHandover(address)": {
        "details": "Allows the owner to complete the two-step ownership handover to `pendingOwner`. Reverts if there is no existing ownership handover requested by `pendingOwner`."
      },
      "enterDevelopmentGround(uint256[],uint256[],uint8[])": {
        "details": "Enters the DevelopmentGround by transferring the tokens from the sender to the contract and setting the development ground data such as owner, entry time, lock period, etc.",
        "params": {
          "_ground": "Array of grounds for each corresponding token",
          "_lockTime": "Array of lock times for each corresponding token",
          "_tokenId": "Array of token IDs to be transferred"
        }
      },
      "getDevGroundFeInfo(address)": {
        "details": "Returns an array of DevGroundFeInfo structs containing information about the DevelopmentGround tokens staked by the specified owner.",
        "params": {
          "_owner": "The address of the owner."
        },
        "returns": {
          "_0": "An array of DevGroundFeInfo structs containing DevelopmentGround token information."
        }
      },
      "getDevelopmentGroundBonesReward(uint256)": {
        "details": "Returns the reward for the bones staked in the development ground.",
        "params": {
          "_tokenId": "The token ID for the development ground."
        },
        "returns": {
          "_0": "The reward for the bones staked in the development ground."
        }
      },
      "getDevelopmentGroundInfo(uint256)": {
        "details": "This function returns a DevelopmentGround struct containing information about a Development Ground token, specified by its ID, _tokenId.",
        "params": {
          "_tokenId": "ID of the Development Ground token to retrieve information for"
        },
        "returns": {
          "_0": "The DevelopmentGround struct containing information about the specified Development Ground token."
        }
      },
      "getPrimarySkill(uint256)": {
        "params": {
          "_tokenId": "ID of the development ground"
        },
        "returns": {
          "_0": "The primary skill level"
        }
      },
      "getStakedTokens(address)": {
        "details": "Returns an array of token IDs that are currently staked by the given owner.",
        "params": {
          "_owner": "The address of the owner."
        },
        "returns": {
          "_0": "An array of staked token IDs."
        }
      },
      "leaveDevelopmentGround(uint256[])": {
        "details": "Allows the owner to leave the development ground. This will transfer the token back to the owner and remove any bones staked in the development ground.",
        "params": {
          "_tokenId": "The token ID of the development ground to leave."
        }
      },
      "owner()": {
        "details": "Returns the owner of the contract."
      },
      "ownershipHandoverExpiresAt(address)": {
        "details": "Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`."
      },
      "ownershipHandoverValidFor()": {
        "details": "Returns how long a two-step ownership handover is valid for in seconds."
      },
      "removeBones(uint256[],bool[])": {
        "details": "Removes bones from a specific development ground.",
        "params": {
          "_all": "Indicates whether to remove all bones or just a portion of them",
          "_tokenId": "The unique identifier for the development ground"
        }
      },
      "removeSingleBones(uint256,uint256)": {
        "details": "Allows the owner of a DevelopmentGround to remove a single bone from a specific position in the track.",
        "params": {
          "_pos": "The position of the bone to be removed.",
          "_tokenId": "The ID of the DevelopmentGround."
        }
      },
      "renounceOwnership()": {
        "details": "Allows the owner to renounce their ownership."
      },
      "requestOwnershipHandover()": {
        "details": "Request a two-step ownership handover to the caller. The request will be automatically expire in 48 hours (172800 seconds) by default."
      },
      "stakeBonesInDevelopmentGround(uint256[],uint256[])": {
        "details": "Stakes the bones in the DevelopmentGround by transferring the bones from the sender to the contract and updating the development ground data.",
        "params": {
          "_amount": "Array of amounts of bones to be transferred",
          "_tokenId": "Array of token IDs for the corresponding amounts of bones"
        }
      },
      "transferOwnership(address)": {
        "details": "Allows the owner to transfer the ownership to `newOwner`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimDevelopmentGroundBonesReward(uint256[],bool[])": {
        "notice": "This function allows the owner of multiple development grounds to claim rewards earned by them."
      },
      "getDevelopmentGroundInfo(uint256)": {
        "notice": "Retrieve information about a Development Ground token."
      },
      "getPrimarySkill(uint256)": {
        "notice": "This function retrieves the primary skill of the `_tokenId` development ground."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 703,
        "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
        "label": "bones",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IBones)2509"
      },
      {
        "astId": 706,
        "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
        "label": "pits",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPits)2588"
      },
      {
        "astId": 709,
        "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
        "label": "neandersmol",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(INeandersmol)2558"
      },
      {
        "astId": 738,
        "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
        "label": "trackTime",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 744,
        "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
        "label": "trackToken",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 749,
        "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
        "label": "ownerToTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 754,
        "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
        "label": "developmentGround",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(DevelopmentGround)2955_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBones)2509": {
        "encoding": "inplace",
        "label": "contract IBones",
        "numberOfBytes": "20"
      },
      "t_contract(INeandersmol)2558": {
        "encoding": "inplace",
        "label": "contract INeandersmol",
        "numberOfBytes": "20"
      },
      "t_contract(IPits)2588": {
        "encoding": "inplace",
        "label": "contract IPits",
        "numberOfBytes": "20"
      },
      "t_enum(Grounds)3021": {
        "encoding": "inplace",
        "label": "enum Grounds",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(DevelopmentGround)2955_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DevelopmentGround)",
        "numberOfBytes": "32",
        "value": "t_struct(DevelopmentGround)2955_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DevelopmentGround)2955_storage": {
        "encoding": "inplace",
        "label": "struct DevelopmentGround",
        "members": [
          {
            "astId": 2939,
            "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2941,
            "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
            "label": "lockPeriod",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2943,
            "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
            "label": "amountPosition",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 2945,
            "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
            "label": "entryTime",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 2947,
            "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
            "label": "lastRewardTime",
            "offset": 16,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 2949,
            "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
            "label": "bonesStaked",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2951,
            "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
            "label": "currentPitsLockPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2954,
            "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
            "label": "ground",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(Grounds)3021"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}