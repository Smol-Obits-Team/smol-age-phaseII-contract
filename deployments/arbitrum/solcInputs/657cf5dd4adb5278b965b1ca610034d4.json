{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/Caves.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport { Lib } from \"./library/Lib.sol\";\nimport { IBones } from \"./interfaces/IBones.sol\";\nimport { Cave, CavesFeInfo } from \"./library/StructsEnums.sol\";\nimport { IPits } from \"./interfaces/IPits.sol\";\nimport { Ownable } from \"solady/src/auth/Ownable.sol\";\n\nimport { INeandersmol } from \"./interfaces/INeandersmol.sol\";\n\nimport {\n    NotYourToken,\n    NeandersmolsIsLocked,\n    ZeroBalanceError,\n    TokenIsStaked\n} from \"./library/Error.sol\";\n\nimport {\n    Initializable\n} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract Caves is Initializable, Ownable {\n    IPits public pits;\n    IBones public bones;\n    INeandersmol public neandersmol;\n\n    mapping(uint256 => Cave) private caves;\n\n    mapping(address => uint256[]) private ownerToTokens;\n\n    function initialize(\n        address _pits,\n        address _bones,\n        address _neandersmol\n    ) external initializer {\n        _initializeOwner(msg.sender);\n        setAddress(_pits, _bones, _neandersmol);\n    }\n\n    function setAddress(\n        address _pits,\n        address _bones,\n        address _neandersmol\n    ) public onlyOwner {\n        bones = IBones(_bones);\n        pits = IPits(_pits);\n        neandersmol = INeandersmol(_neandersmol);\n    }\n\n    /**\n     * @dev Allows the owner to enter the caves. This will transfer the token to the contract and set the owner, staking time, and last reward timestamp for the caves.\n     * @param _tokenId The token ID of the caves to enter.\n     */\n\n    function enterCaves(uint256[] calldata _tokenId) external {\n        Lib.pitsValidation(pits);\n        uint256 i;\n        for (; i < _tokenId.length; ++i) {\n            uint256 tokenId = _tokenId[i];\n            Cave storage cave = caves[tokenId];\n            if (neandersmol.ownerOf(tokenId) != msg.sender)\n                revert NotYourToken();\n            if (neandersmol.staked(tokenId)) revert TokenIsStaked();\n            neandersmol.stakingHandler(tokenId, true);\n            cave.owner = msg.sender;\n            cave.stakingTime = uint48(block.timestamp);\n            cave.lastRewardTimestamp = uint48(block.timestamp);\n            ownerToTokens[msg.sender].push(tokenId);\n            emit EnterCaves(msg.sender, tokenId, block.timestamp);\n        }\n    }\n\n    /**\n     *  @dev Function to allow the owner of a Cave token to leave the cave and claim any rewards.\n     * @param _tokenId An array of Cave token IDs to be claimed and left.\n     */\n\n    function leaveCave(uint256[] calldata _tokenId) external {\n        uint256 i;\n        for (; i < _tokenId.length; ++i) {\n            uint256 tokenId = _tokenId[i];\n            Cave memory cave = caves[tokenId];\n            if (cave.owner != msg.sender) revert NotYourToken();\n            if (100 days + cave.stakingTime > block.timestamp)\n                revert NeandersmolsIsLocked();\n            if (getCavesReward(tokenId) != 0) claimCaveReward(tokenId);\n            Lib.removeItem(ownerToTokens[msg.sender], tokenId);\n            delete caves[tokenId];\n            neandersmol.stakingHandler(tokenId, false);\n            emit LeaveCave(msg.sender, tokenId);\n        }\n    }\n\n    /**\n     * @dev Internal function to claim the rewards for a Cave token.\n     * @param _tokenId The ID of the Cave token to claim rewards for.\n     */\n\n    function claimCaveReward(uint256 _tokenId) internal {\n        uint256 reward = getCavesReward(_tokenId);\n        if (reward == 0) revert ZeroBalanceError();\n        caves[_tokenId].lastRewardTimestamp = uint48(block.timestamp);\n        bones.mint(msg.sender, reward);\n        emit ClaimCaveReward(msg.sender, _tokenId, reward);\n    }\n\n    /**\n     * @dev Function to allow the caller to claim rewards for multiple Cave tokens.\n     * @param _tokenId An array of Cave token IDs to claim rewards for.\n     */\n\n    function claimCaveReward(uint256[] calldata _tokenId) external {\n        for (uint256 i; i < _tokenId.length; ++i) claimCaveReward(_tokenId[i]);\n    }\n\n    /**\n     * @dev Function to retrieve the rewards for a Cave token.\n     * @param _tokenId The ID of the Cave token to retrieve rewards for.\n     * @return The rewards for the specified Cave token.\n     */\n\n    function getCavesReward(uint256 _tokenId) public view returns (uint256) {\n        Cave memory cave = caves[_tokenId];\n        if (cave.lastRewardTimestamp == 0) return 0;\n        return\n            ((block.timestamp - cave.lastRewardTimestamp) / 1 days) * 10 ** 19;\n    }\n\n    /**\n     * Retrieve information about a Cave token.\n     * @dev This function returns a Caves struct containing information about a Cave token, specified by its ID, _tokenId.\n     * @param _tokenId ID of the Cave token to retrieve information for\n     * @return  The Caves struct containing information about the specified Cave token.\n     */\n\n    function getCavesInfo(uint256 _tokenId) public view returns (Cave memory) {\n        return caves[_tokenId];\n    }\n\n    /**\n     * @dev Returns an array of token IDs that are currently staked by the given owner.\n     * @param _owner The address of the owner.\n     * @return An array of staked token IDs.\n     */\n\n    function getStakedTokens(\n        address _owner\n    ) public view returns (uint256[] memory) {\n        return ownerToTokens[_owner];\n    }\n\n    /**\n    @dev Retrieves information about a user's staked tokens in the Caves farm.\n    @param _user The address of the user whose information is being retrieved.\n    @return An array of CavesFeInfo structs containing information about the user's staked tokens,\n    including the amount of rewards earned, the token ID, and the time left for the staking period.\n    */\n\n    function getCavesFeInfo(\n        address _user\n    ) external view returns (CavesFeInfo[] memory) {\n        uint256[] memory tokenIds = getStakedTokens(_user);\n        CavesFeInfo[] memory userInfo = new CavesFeInfo[](tokenIds.length);\n        for (uint256 i; i < tokenIds.length; ++i) {\n            uint256 timeLeft = 100 days +\n                getCavesInfo(tokenIds[i]).stakingTime >\n                block.timestamp\n                ? 100 days -\n                    (block.timestamp - getCavesInfo(tokenIds[i]).stakingTime)\n                : 0;\n            userInfo[i] = CavesFeInfo(\n                getCavesReward(tokenIds[i]),\n                uint128(tokenIds[i]),\n                uint128(timeLeft)\n            );\n        }\n\n        return userInfo;\n    }\n\n    event EnterCaves(\n        address indexed owner,\n        uint256 indexed tokenId,\n        uint256 indexed stakeTime\n    );\n\n    event LeaveCave(address indexed owner, uint256 indexed tokenId);\n\n    event ClaimCaveReward(\n        address indexed owner,\n        uint256 indexed tokenId,\n        uint256 indexed amount\n    );\n}\n"
    },
    "contracts/Consumables.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport { Lib } from \"./library/Lib.sol\";\nimport { Ownable } from \"solady/src/auth/Ownable.sol\";\n\nimport { NotAuthorized } from \"./library/Error.sol\";\nimport {\n    StringsUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\nimport {\n    ERC1155Upgradeable\n} from \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\n\ncontract Consumables is ERC1155Upgradeable, Ownable {\n    using StringsUpgradeable for uint256;\n\n    // uint256 constant DIRT = 1;\n    // uint256 constant HERB = 2;\n    // uint256 constant STONES = 3;\n    // uint256 constant FERTILE_SOIL = 4;\n    // uint256 constant FUNGI = 5;\n    // uint256 constant PRECIOUS_MATERIAL = 6;\n\n    string public baseUri;\n\n    mapping(address => bool) public allowedTo;\n\n    function initialize(string memory _baseUri) external initializer {\n        _initializeOwner(msg.sender);\n        baseUri = _baseUri;\n    }\n\n    function setAllowedAddress(address _addr, bool _state) external onlyOwner {\n        allowedTo[_addr] = _state;\n    }\n\n    function mint(address _to, uint256 _tokenId, uint256 _amount) external {\n        if (!allowedTo[msg.sender]) revert NotAuthorized();\n        _mint(_to, _tokenId, _amount, \"\");\n    }\n\n    function name() external pure returns (string memory) {\n        return \"Consumables\";\n    }\n\n    function symbol() external pure returns (string memory) {\n        return \"consumables\";\n    }\n\n    function uri(\n        uint256 _tokenId\n    ) public view override returns (string memory) {\n        return string(abi.encodePacked(baseUri, _tokenId.toString()));\n    }\n}\n"
    },
    "contracts/DevelopmentGrounds.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport { Lib } from \"./library/Lib.sol\";\nimport { IPits } from \"./interfaces/IPits.sol\";\nimport { IBones } from \"./interfaces/IBones.sol\";\nimport { IRandomizer } from \"./interfaces/IRandomizer.sol\";\nimport { INeandersmol } from \"./interfaces/INeandersmol.sol\";\nimport { Ownable } from \"solady/src/auth/Ownable.sol\";\nimport { SafeTransferLib } from \"solady/src/utils/SafeTransferLib.sol\";\n\nimport {\n    Initializable\n} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {\n    Jobs,\n    Grounds,\n    BonesFeInfo,\n    LaborGround,\n    DevGroundFeInfo,\n    DevelopmentGround\n} from \"./library/StructsEnums.sol\";\nimport {\n    InvalidPos,\n    NotYourToken,\n    TokenIsStaked,\n    WrongMultiple,\n    LengthsNotEqual,\n    InvalidLockTime,\n    ZeroBalanceError,\n    CsIsBellowHundred,\n    NeandersmolsIsLocked,\n    BalanceIsInsufficient,\n    DevelopmentGroundIsLocked,\n    NeandersmolIsNotInDevelopmentGround\n} from \"./library/Error.sol\";\n\ncontract DevelopmentGrounds is Initializable, Ownable {\n    IBones public bones;\n    IPits public pits;\n    INeandersmol public neandersmol;\n\n    function initialize(\n        address _pits,\n        address _neandersmol,\n        address _bones\n    ) external initializer {\n        _initializeOwner(msg.sender);\n        setAddress(_pits, _neandersmol, _bones);\n    }\n\n    // tokenId -> amount position -> staking time\n    mapping(uint256 => mapping(uint256 => uint256)) private trackTime;\n    // tokenId -> time -> amount\n    mapping(uint256 => mapping(uint256 => uint256)) private trackToken;\n\n    mapping(address => uint256[]) private ownerToTokens;\n\n    mapping(uint256 => DevelopmentGround) private developmentGround;\n\n    uint256 private constant MINIMUM_BONE_STAKE = 1000 * 10 ** 18;\n\n    function setAddress(\n        address _pits,\n        address _neandersmol,\n        address _bones\n    ) public onlyOwner {\n        bones = IBones(_bones);\n        pits = IPits(_pits);\n        neandersmol = INeandersmol(_neandersmol);\n    }\n\n    /**\n     * @dev Enters the DevelopmentGround by transferring the tokens from the sender to the contract\n     * and setting the development ground data such as owner, entry time, lock period, etc.\n     * @param _tokenId Array of token IDs to be transferred\n     * @param _lockTime Array of lock times for each corresponding token\n     * @param _ground Array of grounds for each corresponding token\n     */\n\n    function enterDevelopmentGround(\n        uint256[] calldata _tokenId,\n        uint256[] calldata _lockTime,\n        Grounds[] calldata _ground\n    ) external {\n        uint256 i;\n        checkLength(_tokenId, _lockTime);\n        if (_lockTime.length != _ground.length) revert LengthsNotEqual();\n        Lib.pitsValidation(pits);\n        for (; i < _tokenId.length; ++i) {\n            (uint256 tokenId, uint256 lockTime) = (_tokenId[i], _lockTime[i]);\n            if (neandersmol.staked(tokenId)) revert TokenIsStaked();\n            DevelopmentGround storage devGround = developmentGround[tokenId];\n            if (neandersmol.getCommonSense(tokenId) < 100)\n                revert CsIsBellowHundred();\n            if (neandersmol.ownerOf(tokenId) != msg.sender)\n                revert NotYourToken();\n\n            if (!lockTimeExists(lockTime)) revert InvalidLockTime();\n            neandersmol.stakingHandler(tokenId, true);\n            devGround.owner = msg.sender;\n            devGround.entryTime = uint64(block.timestamp);\n            devGround.lockPeriod = uint64(lockTime);\n            devGround.lastRewardTime = uint64(block.timestamp);\n            devGround.ground = _ground[i];\n            devGround.currentPitsLockPeriod = pits.getTimeOut();\n            ownerToTokens[msg.sender].push(tokenId);\n            emit EnterDevelopmentGround(\n                msg.sender,\n                tokenId,\n                lockTime,\n                block.timestamp,\n                _ground[i]\n            );\n        }\n    }\n\n    /**\n     * @dev Stakes the bones in the DevelopmentGround by transferring the bones from the sender to the contract\n     * and updating the development ground data.\n     * @param _amount Array of amounts of bones to be transferred\n     * @param _tokenId Array of token IDs for the corresponding amounts of bones\n     */\n\n    function stakeBonesInDevelopmentGround(\n        uint256[] calldata _amount,\n        uint256[] calldata _tokenId\n    ) external {\n        Lib.pitsValidation(pits);\n        checkLength(_amount, _tokenId);\n        uint256 i;\n        for (; i < _amount.length; ++i) {\n            (uint256 tokenId, uint256 amount) = (_tokenId[i], _amount[i]);\n            DevelopmentGround storage devGround = developmentGround[tokenId];\n            if (bones.balanceOf(msg.sender) < amount)\n                revert BalanceIsInsufficient();\n            if (devGround.owner != msg.sender)\n                revert NeandersmolIsNotInDevelopmentGround();\n            if (amount % MINIMUM_BONE_STAKE != 0) revert WrongMultiple();\n            SafeTransferLib.safeTransferFrom(\n                address(bones),\n                msg.sender,\n                address(this),\n                amount\n            );\n            updateDevelopmentGround(devGround, tokenId, amount);\n            emit StakeBonesInDevelopmentGround(msg.sender, amount, tokenId);\n        }\n    }\n\n    /**\n     * @dev Removes bones from a specific development ground.\n     * @param _tokenId The unique identifier for the development ground\n     * @param _all Indicates whether to remove all bones or just a portion of them\n     */\n\n    function removeBones(\n        uint256[] calldata _tokenId,\n        bool[] calldata _all\n    ) external {\n        if (_tokenId.length != _all.length) revert LengthsNotEqual();\n        uint256 i;\n        for (; i < _tokenId.length; ++i) {\n            if (getPrimarySkill(_tokenId[i]) > 0)\n                developPrimarySkill(_tokenId[i]);\n            removeBones(_tokenId[i], _all[i]);\n        }\n    }\n\n    function calculateBones(\n        address _owner\n    ) external view returns (uint256, uint256) {\n        uint256[] memory stakedTokens = ownerToTokens[_owner];\n        uint256 thetaxed;\n        uint256 theuntaxed;\n        for (uint256 i; i < stakedTokens.length; ++i) {\n            (uint256 t, uint256 u) = calculateBones(stakedTokens[i]);\n            thetaxed += t;\n            theuntaxed += u;\n        }\n\n        return (thetaxed, theuntaxed);\n    }\n\n    function calculateBones(\n        uint256 _tokenId\n    ) internal view returns (uint256, uint256) {\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\n        if (devGround.bonesStaked == 0) return (0, 0);\n        uint256 i = 1;\n        uint256 amountUnTaxed;\n        uint256 amountTaxed;\n\n        /**\n         * return amount of bones to be taxed\n         */\n\n        for (; i <= devGround.amountPosition; ++i) {\n            uint256 time = trackTime[_tokenId][i];\n\n            block.timestamp < time + 30 days\n                ? amountTaxed += trackToken[_tokenId][time]\n                : amountUnTaxed += trackToken[_tokenId][time];\n        }\n\n        return (amountTaxed, amountUnTaxed);\n    }\n\n    /**\n     * @dev Helper function to remove bones from a specific development ground\n     * @param _tokenId The unique identifier for the development ground\n     * @param _all Indicates whether to remove all bones if it will be taxed or not\n     */\n    function removeBones(uint256 _tokenId, bool _all) internal {\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\n        if (devGround.owner != msg.sender) revert NotYourToken();\n        if (devGround.bonesStaked == 0) revert ZeroBalanceError();\n\n        uint256 i = 1;\n        uint256 amount;\n        uint64 count;\n\n        for (; i <= devGround.amountPosition; ++i) {\n            (uint256 time, uint256 prev) = (\n                trackTime[_tokenId][i],\n                trackTime[_tokenId][i + 1]\n            );\n            if (block.timestamp < time + 30 days && !_all) continue;\n\n            block.timestamp < time + 30 days && _all && rand() % 2 == 0\n                ? amount += trackToken[_tokenId][time] / 2\n                : amount += trackToken[_tokenId][time];\n\n            _all || devGround.amountPosition == 1\n                ? trackTime[_tokenId][i] = 0\n                : trackTime[_tokenId][i] = prev;\n            trackToken[_tokenId][time] = 0;\n\n            ++count;\n        }\n\n        developmentGround[_tokenId].amountPosition -= count;\n        developmentGround[_tokenId].bonesStaked -= amount;\n\n        uint256 bal = devGround.bonesStaked - amount;\n\n        if (bal != 0 && _all) bones.burn(address(this), bal);\n\n        if (amount != 0)\n            SafeTransferLib.safeTransfer(address(bones), msg.sender, amount);\n\n        emit RemoveBones(msg.sender, _tokenId, amount);\n    }\n\n    /**\n     * @dev Allows the owner of a DevelopmentGround to remove a single bone from a specific position in the track.\n     * @param _tokenId The ID of the DevelopmentGround.\n     * @param _pos The position of the bone to be removed.\n     */\n\n    function removeSingleBones(uint256 _tokenId, uint256 _pos) external {\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\n        if (devGround.owner != msg.sender) revert NotYourToken();\n        if (devGround.amountPosition < _pos) revert InvalidPos();\n        if (devGround.bonesStaked == 0) revert ZeroBalanceError();\n        developPrimarySkill(_tokenId);\n        uint256 amount;\n        uint256 time = trackTime[_tokenId][_pos];\n        uint256 initialAmount = trackToken[_tokenId][time];\n\n        block.timestamp < time + 30 days && rand() % 2 == 0\n            ? amount += trackToken[_tokenId][time] / 2\n            : amount += trackToken[_tokenId][time];\n\n        devGround.amountPosition == 1\n            ? trackTime[_tokenId][_pos] = 0\n            : trackTime[_tokenId][_pos] = trackTime[_tokenId][_pos + 1];\n        trackToken[_tokenId][time] = 0;\n        developmentGround[_tokenId].amountPosition -= 1;\n        uint256 bal = initialAmount - amount;\n\n        if (bal != 0) bones.burn(address(this), bal);\n\n        if (amount != 0)\n            SafeTransferLib.safeTransfer(address(bones), msg.sender, bal);\n        emit RemoveBones(msg.sender, _tokenId, amount);\n    }\n\n    /**\n     *  This function develops the primary skill of the `_tokenId` development ground.\n     * @param _tokenId ID of the development ground\n     */\n\n    function developPrimarySkill(uint256 _tokenId) internal {\n        // make sure bones staked is more than 30% the total supply\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\n        (uint256 amount, Grounds ground) = (\n            getPrimarySkill(_tokenId),\n            devGround.ground\n        );\n        if (ground == Grounds.Chambers) {\n            neandersmol.developMystics(_tokenId, amount);\n        } else if (ground == Grounds.Garden) {\n            neandersmol.developFarmers(_tokenId, amount);\n        } else {\n            neandersmol.developFighter(_tokenId, amount);\n        }\n    }\n\n    /**\n     * This function retrieves the primary skill of the `_tokenId` development ground.\n     * @param _tokenId ID of the development ground\n     * @return The primary skill level\n     */\n\n    function getPrimarySkill(uint256 _tokenId) public view returns (uint256) {\n        DevelopmentGround memory token = developmentGround[_tokenId];\n\n        return\n            Lib.calculatePrimarySkill(\n                token.bonesStaked,\n                token.amountPosition,\n                token.currentPitsLockPeriod,\n                _tokenId,\n                pits,\n                trackTime,\n                trackToken\n            );\n    }\n\n    /**\n     * This function allows the owner of the development ground to claim the rewards earned by the development ground.\n     * @param _tokenId ID of the development ground\n     * @param _stake Whether to stake the reward bones in the development ground\n     */\n\n    function claimDevelopmentGroundBonesReward(\n        uint256 _tokenId,\n        bool _stake\n    ) internal {\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\n        if (devGround.owner != msg.sender) revert NotYourToken();\n        uint256 reward = getDevelopmentGroundBonesReward(_tokenId);\n        if (reward == 0) revert ZeroBalanceError();\n        developmentGround[_tokenId].lastRewardTime = uint64(block.timestamp);\n        _stake\n            ? stakeBonesInDevelopmentGround(_tokenId, reward)\n            : bones.mint(msg.sender, reward);\n\n        emit ClaimDevelopmentGroundBonesReward(msg.sender, _tokenId, _stake);\n    }\n\n    /**\n     * This function allows the owner of multiple development grounds to claim rewards earned by them.\n     * @param _tokenId ID of the development ground\n     * @param _stake Whether to stake the reward bones in the development ground\n     */\n\n    function claimDevelopmentGroundBonesReward(\n        uint256[] calldata _tokenId,\n        bool[] calldata _stake\n    ) external {\n        if (_tokenId.length != _stake.length) revert LengthsNotEqual();\n        for (uint256 i; i < _tokenId.length; ++i)\n            claimDevelopmentGroundBonesReward(_tokenId[i], _stake[i]);\n    }\n\n    /**\n     * @dev Stakes the specified amount of Bones in the Development Ground of the specified token ID.\n     * @param _tokenId The ID of the Neandersmol token that represents the Development Ground.\n     * @param _amount The amount of Bones to be staked.\n     */\n    function stakeBonesInDevelopmentGround(\n        uint256 _tokenId,\n        uint256 _amount\n    ) internal {\n        uint256 remainder = _amount % MINIMUM_BONE_STAKE;\n        if (remainder == _amount) revert WrongMultiple(); // if the amount is less than Minimum\n        if (remainder != 0) bones.mint(msg.sender, remainder); // if the amount is greater than minimum but wrong multiple\n        uint256 newAmount = _amount - remainder;\n        updateDevelopmentGround(\n            developmentGround[_tokenId],\n            _tokenId,\n            newAmount\n        );\n        bones.mint(address(this), newAmount);\n        emit StakeBonesInDevelopmentGround(msg.sender, newAmount, _tokenId);\n    }\n\n    /**\n     * @dev Returns the reward for the bones staked in the development ground.\n     * @param _tokenId The token ID for the development ground.\n     * @return The reward for the bones staked in the development ground.\n     */\n\n    function getDevelopmentGroundBonesReward(\n        uint256 _tokenId\n    ) public view returns (uint256) {\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\n        return\n            Lib.getDevGroundBonesReward(\n                devGround.currentPitsLockPeriod,\n                devGround.lockPeriod,\n                devGround.lastRewardTime,\n                pits\n            );\n    }\n\n    /**\n     * @dev Allows the owner to leave the development ground. This will transfer the token back to the owner and remove any bones staked in the development ground.\n     * @param _tokenId The token ID of the development ground to leave.\n     */\n\n    function leaveDevelopmentGround(uint256[] calldata _tokenId) external {\n        for (uint256 i; i < _tokenId.length; ++i)\n            leaveDevelopmentGround(_tokenId[i]);\n    }\n\n    /**\n     * @dev Internal function for the leaveDevelopmentGround function to remove the development ground and transfer the token back to the owner.\n     * @param _tokenId The token ID of the development ground to leave.\n     */\n\n    function leaveDevelopmentGround(uint256 _tokenId) internal {\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\n        if (devGround.owner != msg.sender) revert NotYourToken();\n        if (block.timestamp < devGround.entryTime + devGround.lockPeriod)\n            revert NeandersmolsIsLocked();\n        if (getDevelopmentGroundBonesReward(_tokenId) > 0)\n            claimDevelopmentGroundBonesReward(_tokenId, false);\n        if (devGround.bonesStaked > 0) removeBones(_tokenId, true);\n        Lib.removeItem(ownerToTokens[msg.sender], (_tokenId));\n        delete developmentGround[_tokenId];\n        neandersmol.stakingHandler(_tokenId, false);\n        emit LeaveDevelopmentGround(msg.sender, _tokenId);\n    }\n\n    /**\n     * @dev This function updates the DevelopmentGround by adding `_amount` to `_devGround.bonesStaked` and increments `_devGround.amountPosition`.\n     * @param _devGround The DevelopmentGround to be updated.\n     * @param _tokenId The token ID associated with the DevelopmentGround.\n     * @param _amount The amount to be added to `_devGround.bonesStaked`.\n     */\n\n    function updateDevelopmentGround(\n        DevelopmentGround storage _devGround,\n        uint256 _tokenId,\n        uint256 _amount\n    ) internal {\n        _devGround.bonesStaked += _amount;\n        ++_devGround.amountPosition;\n        trackToken[_tokenId][block.timestamp] = _amount;\n        trackTime[_tokenId][_devGround.amountPosition] = block.timestamp;\n    }\n\n    /**\n     *Check the length of two input arrays, _tokenId and _animalsId, for equality.\n     *If the lengths are not equal, the function will revert with the error \"LengthsNotEqual\".\n     *@dev Internal function called by other functions within the contract.\n     *@param _tokenId Array of token IDs\n     */\n\n    function checkLength(\n        uint256[] calldata _tokenId,\n        uint256[] calldata _animalsId\n    ) internal pure {\n        if (_tokenId.length != _animalsId.length) revert LengthsNotEqual();\n    }\n\n    function rand() private view returns (uint256) {\n        uint256 seed = uint256(\n            keccak256(\n                abi.encodePacked(\n                    block.timestamp +\n                        ((\n                            uint256(keccak256(abi.encodePacked(block.coinbase)))\n                        ) / (block.timestamp)) +\n                        block.gaslimit +\n                        ((uint256(keccak256(abi.encodePacked(msg.sender)))) /\n                            (block.timestamp)) +\n                        block.number\n                )\n            )\n        );\n\n        return seed;\n    }\n\n    function lockTimeExists(uint256 _lockTime) internal pure returns (bool) {\n        return\n            _lockTime == 50 days ||\n            _lockTime == 100 days ||\n            _lockTime == 150 days;\n    }\n\n    /*                                                                           */\n    /*                           VIEW FUNCTIONS                                  */\n    /*                                                                           */\n\n    /**\n     * Retrieve information about a Development Ground token.\n     * @dev This function returns a DevelopmentGround struct containing information about a Development Ground token, specified by its ID, _tokenId.\n     * @param _tokenId ID of the Development Ground token to retrieve information for\n     * @return The DevelopmentGround struct containing information about the specified Development Ground token.\n     */\n\n    function getDevelopmentGroundInfo(\n        uint256 _tokenId\n    ) public view returns (DevelopmentGround memory) {\n        return developmentGround[_tokenId];\n    }\n\n    /**\n     * @dev Returns an array of token IDs that are currently staked by the given owner.\n     * @param _owner The address of the owner.\n     * @return An array of staked token IDs.\n     */\n\n    function getStakedTokens(\n        address _owner\n    ) external view returns (uint256[] memory) {\n        return ownerToTokens[_owner];\n    }\n\n    /**\n     * @dev Returns an array of BonesFeInfo structs containing information about the Bone tokens\n     * staked at certain time.\n     * @param _tokenId The ID of the token to retrieve information for.\n     * @return An array of BonesFeInfo structs containing Bone token and timestamp information.\n     */\n\n    function bonesToTime(\n        uint256 _tokenId\n    ) external view returns (BonesFeInfo[] memory) {\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\n        BonesFeInfo[] memory bonesFe = new BonesFeInfo[](\n            devGround.amountPosition\n        );\n        uint256 i;\n        for (; i < devGround.amountPosition; ++i) {\n            uint256 time = trackTime[_tokenId][i + 1];\n            uint256 amount = trackToken[_tokenId][time];\n            bonesFe[i] = BonesFeInfo(amount, time);\n        }\n\n        return bonesFe;\n    }\n\n    /**\n     * @dev Returns an array of DevGroundFeInfo structs containing information about the\n     * DevelopmentGround tokens staked by the specified owner.\n     * @param _owner The address of the owner.\n     * @return An array of DevGroundFeInfo structs containing DevelopmentGround token information.\n     */\n\n    function getDevGroundFeInfo(\n        address _owner\n    ) external view returns (DevGroundFeInfo[] memory) {\n        uint256[] memory stakedTokens = ownerToTokens[_owner];\n        DevGroundFeInfo[] memory userInfo = new DevGroundFeInfo[](\n            stakedTokens.length\n        );\n\n        uint256 i;\n        for (; i < userInfo.length; ++i) {\n            uint256 stakedToken = stakedTokens[i];\n            DevelopmentGround memory devGround = getDevelopmentGroundInfo(\n                stakedToken\n            );\n            uint256 unlockTime = devGround.lockPeriod + devGround.entryTime;\n            uint256 timeLeft = block.timestamp < unlockTime\n                ? (unlockTime - block.timestamp) / 1 days\n                : 0;\n            userInfo[i] = DevGroundFeInfo(\n                uint96(timeLeft),\n                uint96(block.timestamp - devGround.entryTime),\n                uint64(stakedToken),\n                getPrimarySkill(stakedToken),\n                getDevelopmentGroundBonesReward(stakedToken),\n                devGround.bonesStaked,\n                devGround.ground\n            );\n        }\n\n        return userInfo;\n    }\n\n    event EnterDevelopmentGround(\n        address indexed owner,\n        uint256 indexed tokenId,\n        uint256 indexed lockTime,\n        uint256 entryTime,\n        Grounds ground\n    );\n\n    event ClaimDevelopmentGroundBonesReward(\n        address indexed owner,\n        uint256 indexed tokenId,\n        bool indexed stake\n    );\n\n    event RemoveBones(\n        address indexed owner,\n        uint256 indexed tokenId,\n        uint256 indexed amount\n    );\n\n    event LeaveDevelopmentGround(\n        address indexed owner,\n        uint256 indexed tokenId\n    );\n\n    event StakeBonesInDevelopmentGround(\n        address indexed owner,\n        uint256 indexed amount,\n        uint256 indexed tokenId\n    );\n}\n"
    },
    "contracts/interfaces/IBones.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {IERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface IBones is IERC20Upgradeable {\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IConsumables.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {IERC1155Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\n\ninterface IConsumables is IERC1155Upgradeable {\n    function mint(address _to, uint256 _tokenId, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/INeandersmol.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {\n    IERC721Upgradeable\n} from \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\n\ninterface INeandersmol is IERC721Upgradeable {\n    function getCommonSense(uint256 _tokenId) external view returns (uint256);\n\n    function staked(uint256 _tokenId) external view returns (bool);\n\n    function developMystics(uint256 _tokenId, uint256 _amount) external;\n\n    function developFarmers(uint256 _tokenId, uint256 _amount) external;\n\n    function developFighter(uint256 _tokenId, uint256 _amount) external;\n\n    function stakingHandler(uint256 _tokenId, bool _state) external;\n}\n"
    },
    "contracts/interfaces/IPits.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ninterface IPits {\n    function validation() external view returns (bool);\n\n    function getTimeOut() external view returns (uint256);\n\n    function getTimeBelowMinimum() external view returns (uint256);\n\n    function getDaysOff(uint256 _timestamp) external view returns (uint256);\n\n    function getTotalDaysOff() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IRandomizer.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ninterface IRandomizer {\n    // Returns a request ID for a random number. This is unique.\n    function requestRandomNumber() external returns (uint256);\n\n    // Returns the random number for the given request ID. Will revert\n    // if the random is not ready.\n    function revealRandomNumber(\n        uint256 _requestId\n    ) external view returns (uint256);\n\n    // Returns if the random number for the given request ID is ready or not. Call\n    // before calling revealRandomNumber.\n    function isRandomReady(uint256 _requestId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/ITreasure.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ninterface ITreasure {\n    function burn(address _account, uint256 _id, uint256 _value) external;\n}\n"
    },
    "contracts/LaborGrounds.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport { Lib } from \"./library/Lib.sol\";\nimport { IPits } from \"./interfaces/IPits.sol\";\nimport { IRandomizer } from \"./interfaces/IRandomizer.sol\";\nimport { INeandersmol } from \"./interfaces/INeandersmol.sol\";\nimport { SafeTransferLib } from \"solady/src/utils/SafeTransferLib.sol\";\nimport { Ownable } from \"solady/src/auth/Ownable.sol\";\nimport {\n    IConsumables,\n    IERC1155Upgradeable\n} from \"./interfaces/IConsumables.sol\";\nimport {\n    Initializable\n} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport {\n    LengthsNotEqual,\n    NotYourToken,\n    CannotClaimNow,\n    InvalidTokenForThisJob,\n    CsToHigh,\n    NoMoreAnimalsAllowed,\n    TokenIsStaked\n} from \"./library/Error.sol\";\n\nimport {\n    Jobs,\n    Grounds,\n    LaborGround,\n    LaborGroundFeInfo\n} from \"./library/StructsEnums.sol\";\n\ncontract LaborGrounds is Initializable, Ownable {\n    IPits public pits;\n    IRandomizer private randomizer;\n    IConsumables public consumables;\n    INeandersmol public neandersmol;\n    IERC1155Upgradeable public animals;\n    IERC1155Upgradeable public supplies;\n\n    uint32 constant MAX_UINT32 = type(uint32).max;\n\n    mapping(uint256 => LaborGround) private laborGround;\n\n    mapping(address => uint256[]) private ownerToTokens;\n\n    function initialize(\n        address _pits,\n        address _animals,\n        address _supplies,\n        address _consumables,\n        address _neandersmol,\n        address _randomizer\n    ) external initializer {\n        _initializeOwner(msg.sender);\n        setAddress(\n            _pits,\n            _animals,\n            _supplies,\n            _consumables,\n            _neandersmol,\n            _randomizer\n        );\n    }\n\n    function setAddress(\n        address _pits,\n        address _animals,\n        address _supplies,\n        address _consumables,\n        address _neandersmol,\n        address _randomizer\n    ) public onlyOwner {\n        animals = IERC1155Upgradeable(_animals);\n        pits = IPits(_pits);\n        supplies = IERC1155Upgradeable(_supplies);\n        randomizer = IRandomizer(_randomizer);\n        consumables = IConsumables(_consumables);\n        neandersmol = INeandersmol(_neandersmol);\n    }\n\n    /**\n     * @notice Enters the labor ground with specified token ID and supply ID,\n     * and assigns the job to it. Transfers the token and supply ownership to the contract.\n     * Emits the \"EnterLaborGround\" event.\n     * @param _tokenId Array of token IDs of the labor grounds.\n     * @param _supplyId Array of supply IDs associated with the labor grounds.\n     * @param _job Array of jobs assigned to the labor grounds.\n     */\n\n    function enterLaborGround(\n        uint256[] calldata _tokenId,\n        uint256[] calldata _supplyId,\n        Jobs[] calldata _job\n    ) external {\n        Lib.pitsValidation(pits);\n        checkLength(_tokenId, _supplyId);\n        if (_supplyId.length != _job.length) revert LengthsNotEqual();\n        uint256 i;\n        for (; i < _tokenId.length; ++i) {\n            (uint256 tokenId, uint256 supplyId) = (_tokenId[i], _supplyId[i]);\n            if (neandersmol.staked(tokenId)) revert TokenIsStaked();\n            if (neandersmol.ownerOf(tokenId) != msg.sender)\n                revert NotYourToken();\n            if (neandersmol.getCommonSense(tokenId) > 99) revert CsToHigh();\n            if (!validateTokenId(supplyId, _job[i]))\n                revert InvalidTokenForThisJob();\n            supplies.safeTransferFrom(\n                msg.sender,\n                address(this),\n                supplyId,\n                1,\n                \"\"\n            );\n\n            laborGround[tokenId] = LaborGround(\n                msg.sender,\n                uint32(block.timestamp),\n                uint32(supplyId),\n                MAX_UINT32,\n                randomizer.requestRandomNumber(),\n                _job[i]\n            );\n            neandersmol.stakingHandler(tokenId, true);\n            ownerToTokens[msg.sender].push(tokenId);\n            emit EnterLaborGround(msg.sender, tokenId, supplyId, _job[i]);\n        }\n    }\n\n    /**\n     *  Brings in animals to the labor ground by calling the bringInAnimalsToLaborGround function in the Lib library and transferring the ownership of the animal token from the sender to the contract.\n     * @param _tokenId An array of token IDs representing the labor grounds.\n     * @param _animalsId An array of token IDs representing the animals.\n     */\n\n    function bringInAnimalsToLaborGround(\n        uint256[] calldata _tokenId,\n        uint256[] calldata _animalsId\n    ) external {\n        checkLength(_tokenId, _animalsId);\n        uint256 i;\n        for (; i < _tokenId.length; ++i) {\n            uint256 animalsId = _animalsId[i];\n            LaborGround memory labor = laborGround[_tokenId[i]];\n            if (labor.owner != msg.sender) revert NotYourToken();\n            if (labor.animalId != MAX_UINT32) revert NoMoreAnimalsAllowed();\n            animals.safeTransferFrom(\n                msg.sender,\n                address(this),\n                animalsId,\n                1,\n                \"\"\n            );\n            laborGround[_tokenId[i]].animalId = uint32(animalsId);\n\n            emit BringInAnimalsToLaborGround(\n                msg.sender,\n                _tokenId[i],\n                animalsId\n            );\n        }\n    }\n\n    /**\n     * @notice Removes the animals from the specified labor ground.\n     * Transfers the ownership of the animals back to the sender.\n     * @param _tokenId Array of token IDs of the labor grounds.\n     * @param _animalsId Array of animals IDs associated with the labor grounds.\n     */\n    function removeAnimalsFromLaborGround(\n        uint256[] calldata _tokenId,\n        uint256[] calldata _animalsId\n    ) external {\n        checkLength(_tokenId, _animalsId);\n        uint256 i;\n        for (; i < _tokenId.length; ++i) {\n            uint256 animalsId = _animalsId[i];\n            LaborGround storage labor = laborGround[_tokenId[i]];\n            if (labor.owner != msg.sender && labor.animalId != MAX_UINT32)\n                revert NotYourToken();\n            labor.animalId = MAX_UINT32;\n            animals.safeTransferFrom(\n                address(this),\n                msg.sender,\n                animalsId,\n                1,\n                \"\"\n            );\n\n            emit RemoveAnimalsFromLaborGround(\n                msg.sender,\n                _tokenId[i],\n                animalsId\n            );\n        }\n    }\n\n    /**\n     * This function allows the token owner to claim a collectable. If the token owner is not the same as the\n     * stored owner or the lock time has not yet passed, the function will revert. If there are possible claims,\n     * a consumables token will be minted for the token owner. The lock time for the labor ground is then updated.\n     * @param _tokenId The id of the labor ground token being claimed.\n     */\n\n    function claimCollectable(uint256 _tokenId) internal {\n        LaborGround storage labor = laborGround[_tokenId];\n        if (msg.sender != labor.owner) revert NotYourToken();\n        if (block.timestamp < labor.lockTime + 3 days) revert CannotClaimNow();\n        uint256 consumablesTokenId = checkPossibleClaims(_tokenId, labor);\n        if (consumablesTokenId != 0)\n            consumables.mint(msg.sender, consumablesTokenId, 1);\n\n        labor.lockTime = uint32(block.timestamp);\n        emit ClaimCollectable(msg.sender, _tokenId);\n    }\n\n    /** \n    *@dev This function allows a user to claim multiple collectables at once by providing an array of token IDs.\n     @param _tokenId An array of token IDs that the user wants to claim.\n*/\n    function claimCollectables(uint256[] calldata _tokenId) external {\n        for (uint256 i; i < _tokenId.length; ++i) claimCollectable(_tokenId[i]);\n    }\n\n    /**\n     * @dev This function decides whether the supply will break or fail when the random number generated is smaller than `_min`.\n     * @param _tokenId ID of the token that the supply is associated with.\n     * @param _supplyId ID of the supply.\n     * @param _amount Total amount of possible outcomes.\n     * @param _min The minimum value of the random number that will cause the supply to break or fail.\n     * @param _requestId Request ID for accessing the random number.\n     */\n    function breakOrFailed(\n        uint256 _tokenId,\n        uint256 _supplyId,\n        uint256 _amount,\n        uint256 _min,\n        uint256 _requestId\n    ) internal {\n        uint256 random = randomizer.revealRandomNumber(_requestId) % _amount;\n        if (random < _min) {\n            supplies.safeTransferFrom(\n                address(this),\n                msg.sender,\n                _supplyId,\n                1,\n                \"\"\n            );\n            laborGround[_tokenId].supplyId = 0;\n        }\n    }\n\n    /**\n     * @dev This function allows a user to leave the LaborGround and receive their animal, supply, and collectable.\n     * @param _tokenId An array of token IDs that the user wants to leave.\n     */\n\n    function leaveLaborGround(uint256[] calldata _tokenId) external {\n        uint256 i;\n\n        for (; i < _tokenId.length; ++i) {\n            uint256 tokenId = _tokenId[i];\n            claimCollectable(tokenId);\n            LaborGround memory labor = laborGround[tokenId];\n            delete laborGround[tokenId];\n            Lib.removeItem(ownerToTokens[msg.sender], tokenId);\n            if (labor.animalId != MAX_UINT32)\n                animals.safeTransferFrom(\n                    address(this),\n                    msg.sender,\n                    labor.animalId,\n                    1,\n                    \"\"\n                );\n\n            if (labor.supplyId != 0)\n                supplies.safeTransferFrom(\n                    address(this),\n                    msg.sender,\n                    labor.supplyId,\n                    1,\n                    \"\"\n                );\n            neandersmol.stakingHandler(tokenId, false);\n            emit LeaveLaborGround(msg.sender, tokenId);\n        }\n    }\n\n    /**\n     * @dev Function to check the possible claims of an animal job\n     * @param _tokenId ID of the token\n     * @param labor LaborGround struct with the information of the job\n     * @return consumablesTokenId The token ID of the consumables to be claimed\n     */\n\n    function checkPossibleClaims(\n        uint256 _tokenId,\n        LaborGround memory labor\n    ) internal returns (uint256) {\n        uint256 rnd = randomizer.revealRandomNumber(labor.requestId) % 101;\n        uint256 animalId = labor.animalId;\n        uint256 consumablesTokenId;\n        (uint256 tokenOne, uint256 tokenTwo) = getConsumablesTokenId(labor.job);\n        uint256 max;\n        uint256 min;\n        if (animalId == MAX_UINT32) {\n            if (rnd < 61) {\n                consumablesTokenId = tokenOne;\n            } else if (rnd > 60 && rnd < 81) {\n                consumablesTokenId = tokenTwo;\n            } else {\n                max = 3;\n                min = 2;\n            }\n        }\n        if (animalId == 0) {\n            if (rnd < 66) {\n                consumablesTokenId = tokenOne;\n            } else if (rnd > 66 && rnd < 86) {\n                consumablesTokenId = tokenTwo;\n            } else {\n                max = 16;\n                min = 5;\n            }\n        }\n        if (animalId == 1) {\n            if (rnd < 66) {\n                consumablesTokenId = tokenOne;\n            } else if (rnd > 65 && rnd < 96) {\n                consumablesTokenId = tokenTwo;\n            } else {\n                max = 11;\n                min = 6;\n            }\n        }\n        if (animalId == 2) {\n            if (rnd < 71) {\n                consumablesTokenId = tokenOne;\n            } else if (rnd > 70 && rnd < 96) {\n                consumablesTokenId = tokenTwo;\n            } else {\n                max = 6;\n                min = 1;\n            }\n        }\n\n        if (max != 0 && min != 0)\n            breakOrFailed(_tokenId, labor.supplyId, max, min, labor.requestId);\n\n        if (animalId == 3) consumablesTokenId = rnd < 71 ? tokenOne : tokenTwo;\n\n        if (animalId == 4) consumablesTokenId = rnd < 66 ? tokenOne : tokenTwo;\n\n        if (animalId == 5) consumablesTokenId = rnd < 61 ? tokenOne : tokenTwo;\n\n        return consumablesTokenId;\n    }\n\n    /**\n     * @dev Function to get the consumables token IDs based on the job type\n     * @param _job Job type\n     * @return tokenIdOne and tokenIdTwo The token IDs of the consumables for the job\n     */\n\n    function getConsumablesTokenId(\n        Jobs _job\n    ) internal pure returns (uint256 tokenIdOne, uint256 tokenIdTwo) {\n        if (_job == Jobs.Digging) (tokenIdOne, tokenIdTwo) = (1, 4);\n        if (_job == Jobs.Foraging) (tokenIdOne, tokenIdTwo) = (2, 5);\n        if (_job == Jobs.Mining) (tokenIdOne, tokenIdTwo) = (3, 6);\n    }\n\n    /**\n     *Check the length of two input arrays, _tokenId and _animalsId, for equality.\n     *If the lengths are not equal, the function will revert with the error \"LengthsNotEqual\".\n     *@dev Internal function called by other functions within the contract.\n     *@param _tokenId Array of token IDs\n     */\n\n    function checkLength(\n        uint256[] calldata _tokenId,\n        uint256[] calldata _animalsId\n    ) internal pure {\n        if (_tokenId.length != _animalsId.length) revert LengthsNotEqual();\n    }\n\n    /**\n     * Handle incoming ERC1155 token transfers.\n     * @dev This function is the onERC1155Received fallback function for the contract, which is triggered when the contract receives an ERC1155 token transfer.\n     * @return The selector for this function, \"0x20f90a7e\".\n     */\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function validateTokenId(\n        uint256 _tokenId,\n        Jobs _job\n    ) internal pure returns (bool res) {\n        if (_job == Jobs.Digging) return _tokenId == 1;\n        if (_job == Jobs.Foraging) return _tokenId == 2;\n        if (_job == Jobs.Mining) return _tokenId == 3;\n    }\n\n    /*                                                                           */\n    /*                           VIEW FUNCTIONS                                  */\n    /*                                                                           */\n\n    /**\n     * Retrieve information about a Labor Ground token.\n     * @dev This function returns a LaborGround struct containing information about a Labor Ground token, specified by its ID, _tokenId.\n     * @param _tokenId ID of the Labor Ground token to retrieve information for\n     * @return lg The LaborGround struct containing information about the specified Labor Ground token.\n     */\n\n    function getLaborGroundInfo(\n        uint256 _tokenId\n    ) public view returns (LaborGround memory lg) {\n        return laborGround[_tokenId];\n    }\n\n    /**\n     * @dev Returns an array of token IDs that are currently staked by the given owner.\n     * @param _owner The address of the owner.\n     * @return An array of staked token IDs.\n     */\n\n    function getStakedTokens(\n        address _owner\n    ) external view returns (uint256[] memory) {\n        return ownerToTokens[_owner];\n    }\n\n    function getLaborGroundFeInfo(\n        address _owner\n    ) external view returns (LaborGroundFeInfo[] memory) {\n        uint256[] memory stakedTokens = ownerToTokens[_owner];\n        LaborGroundFeInfo[] memory userInfo = new LaborGroundFeInfo[](\n            stakedTokens.length\n        );\n\n        uint256 i;\n        for (; i < stakedTokens.length; ++i) {\n            uint256 tokenId = stakedTokens[i];\n            uint256 animalId = getLaborGroundInfo(tokenId).animalId;\n            uint256 timeLeft = block.timestamp <\n                3 days + getLaborGroundInfo(tokenId).lockTime\n                ? 3 days -\n                    (block.timestamp - getLaborGroundInfo(tokenId).lockTime)\n                : 0;\n            userInfo[i] = LaborGroundFeInfo(\n                uint64(timeLeft),\n                uint64(tokenId),\n                uint64(animalId),\n                uint64(getLaborGroundInfo(tokenId).supplyId)\n            );\n        }\n\n        return userInfo;\n    }\n\n    event ClaimCollectable(address indexed owner, uint256 indexed tokenId);\n\n    event LeaveLaborGround(address indexed owner, uint256 indexed tokenId);\n\n    event RemoveAnimalsFromLaborGround(\n        address indexed owner,\n        uint256 indexed tokenId,\n        uint256 indexed animalsId\n    );\n\n    event BringInAnimalsToLaborGround(\n        address indexed owner,\n        uint256 indexed tokenId,\n        uint256 indexed animalsId\n    );\n\n    event EnterLaborGround(\n        address indexed owner,\n        uint256 indexed tokenId,\n        uint256 indexed supplyId,\n        Jobs job\n    );\n}\n"
    },
    "contracts/library/Error.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nerror CsToHigh();\nerror InvalidPos();\nerror NotAContract();\nerror NotYourToken();\nerror NotAuthorized();\nerror WrongMultiple();\nerror CannotClaimNow();\nerror TokenIsStaked();\nerror TransferFailed();\nerror InvalidTokenId();\nerror InvalidLockTime();\nerror NoMoreAnimalsAllowed();\nerror LengthsNotEqual();\nerror ZeroBalanceError();\nerror CsIsBellowHundred();\nerror NeandersmolsIsLocked();\nerror BalanceIsInsufficient();\nerror InvalidTokenForThisJob();\nerror DevelopmentGroundIsLocked();\nerror NeandersmolIsNotInDevelopmentGround();\n"
    },
    "contracts/library/Lib.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport { IPits } from \"../interfaces/IPits.sol\";\nimport { DevelopmentGroundIsLocked } from \"./Error.sol\";\n\nlibrary Lib {\n    function getDevGroundBonesReward(\n        uint256 _currentLockPeriod,\n        uint256 _lockPeriod,\n        uint256 _lastRewardTime,\n        IPits _pits\n    ) internal view returns (uint256) {\n        if (_lockPeriod == 0) return 0;\n        uint256 rewardRate = getRewardRate(_lockPeriod);\n\n        uint256 time = (block.timestamp - _lastRewardTime) / 1 days;\n\n        if (time == 0) return 0;\n        uint256 toBeRomoved = calculateFinalReward(_currentLockPeriod, _pits);\n        return ((rewardRate * time) - (toBeRomoved * rewardRate)) * 10 ** 18;\n    }\n\n    function calculatePrimarySkill(\n        uint256 _bonesStaked,\n        uint256 _amountPosition,\n        uint256 _currentLockPeriod,\n        uint256 _tokenId,\n        IPits _pits,\n        mapping(uint256 => mapping(uint256 => uint256)) storage trackTime,\n        mapping(uint256 => mapping(uint256 => uint256)) storage trackToken\n    ) internal view returns (uint256) {\n        if (_bonesStaked == 0) return 0;\n        uint256 amount;\n        uint256 i = 1;\n        for (; i <= _amountPosition; ) {\n            uint256 time = (block.timestamp - trackTime[_tokenId][i]) / 1 days;\n            uint256 stakedAmount = trackToken[_tokenId][trackTime[_tokenId][i]];\n            amount += (time * stakedAmount);\n            unchecked {\n                ++i;\n            }\n        }\n        uint256 toBeRemoved = calculateFinalReward(_currentLockPeriod, _pits);\n        return (amount - (toBeRemoved * 10 ** 21)) / 10 ** 4;\n    }\n\n    function calculateFinalReward(\n        uint256 /* _currentLockPeriod*/,\n        IPits /*_pits*/\n    ) internal view returns (uint256) {\n        return 0;\n        // if (_currentLockPeriod == 0) {\n        //     console.log(_currentLockPeriod);\n        //     if (_pits.getTotalDaysOff() == 0) {\n        //         return\n        //             _pits.getTimeOut() == 0\n        //                 ? 0\n        //                 : (block.timestamp - _pits.getTimeOut()) / 1 days;\n        //     } else {\n        //         return _pits.getTotalDaysOff();\n        //     }\n        // } else {\n        //     uint256 howLong = (block.timestamp - _pits.getTimeOut()) / 1 days;\n\n        //     if (_pits.getTotalDaysOff() == 0) {\n        //         return 0;\n        //     } else {\n        //         return\n        //             _pits.getTimeOut() == _currentLockPeriod &&\n        //                 _pits.validation()\n        //                 ? 0\n        //                 : (_pits.getTotalDaysOff() -\n        //                     (_pits.getDaysOff(_currentLockPeriod) + howLong));\n        //     }\n        // }\n    }\n\n    function getRewardRate(\n        uint _lockTime\n    ) internal pure returns (uint256 rewardRate) {\n        if (_lockTime == 50 days) rewardRate = 10;\n        if (_lockTime == 100 days) rewardRate = 50;\n        if (_lockTime == 150 days) rewardRate = 100;\n    }\n\n    function pitsValidation(IPits _pits) internal view {\n        if (!_pits.validation()) revert DevelopmentGroundIsLocked();\n    }\n\n    function removeItem(\n        uint256[] storage _element,\n        uint256 _removeElement\n    ) internal {\n        uint256 i;\n        for (; i < _element.length; ) {\n            if (_element[i] == _removeElement) {\n                _element[i] = _element[_element.length - 1];\n                _element.pop();\n                break;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n"
    },
    "contracts/library/StructsEnums.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nstruct DevelopmentGround {\n    address owner;\n    uint64 lockPeriod;\n    uint64 amountPosition;\n    uint64 entryTime;\n    uint64 lastRewardTime;\n    uint256 bonesStaked;\n    uint256 currentPitsLockPeriod;\n    Grounds ground;\n}\n\nstruct LaborGround {\n    address owner;\n    uint32 lockTime;\n    uint32 supplyId;\n    uint32 animalId;\n    uint256 requestId;\n    Jobs job;\n}\n\nstruct Cave {\n    address owner;\n    uint48 stakingTime;\n    uint48 lastRewardTimestamp;\n}\n\nstruct CavesFeInfo {\n    uint256 reward;\n    uint128 stakedSmols;\n    uint128 timeLeft;\n}\n\nstruct DevGroundFeInfo {\n    uint96 timeLeft;\n    uint96 daysStaked;\n    uint64 stakedSmols;\n    uint256 skillLevel;\n    uint256 bonesAccured;\n    uint256 totalBonesStaked;\n    Grounds ground;\n}\n\nstruct BonesFeInfo {\n    uint256 balance;\n    uint256 timeStaked;\n}\n\nstruct LaborGroundFeInfo {\n    uint64 timeLeft;\n    uint64 tokenId;\n    uint64 animalId;\n    uint64 supplyId;\n}\n\n/**\n * token id\n * bones occured\n * primary skill level\n * days left\n */\n\nenum Jobs {\n    Digging,\n    Foraging,\n    Mining\n}\n\nenum Grounds {\n    Chambers,\n    Garden,\n    Battlefield\n}\n"
    },
    "contracts/Pits.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport { Lib } from \"./library/Lib.sol\";\nimport { SafeTransferLib } from \"solady/src/utils/SafeTransferLib.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {\n    Initializable\n} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {\n    ReentrancyGuardUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport { BalanceIsInsufficient } from \"./library/Error.sol\";\nimport { Ownable } from \"solady/src/auth/Ownable.sol\";\n\ncontract Pits is Initializable, Ownable, ReentrancyGuardUpgradeable {\n    IERC20 public bones;\n    uint256 public bonesStaked;\n\n    uint256 public timeOut;\n\n    uint256 public totalDaysOff;\n\n    uint256 public minimumPercent;\n\n    mapping(address => uint256) private balance;\n    mapping(uint256 => uint256) private trackDaysOff;\n\n    function initialize(address _bones) external initializer {\n        _initializeOwner(msg.sender);\n        bones = IERC20(_bones);\n        minimumPercent = 3;\n        __ReentrancyGuard_init();\n    }\n\n    function stakeBonesInYard(uint256 _amount) external nonReentrant {\n        if (bones.balanceOf(msg.sender) < _amount)\n            revert BalanceIsInsufficient();\n        uint256 bonesBalance = bonesStaked;\n        SafeTransferLib.safeTransferFrom(\n            address(bones),\n            msg.sender,\n            address(this),\n            _amount\n        );\n        balance[msg.sender] += _amount;\n        bonesStaked += _amount;\n        if (bonesBalance < minimumBonesRequired() && validation()) {\n            uint256 daysOut;\n            timeOut == 0 ? daysOut = 0 : daysOut =\n                (block.timestamp - timeOut) /\n                1 days;\n            trackDaysOff[timeOut] = daysOut;\n            totalDaysOff += daysOut;\n        }\n\n        emit StakeBonesInYard(msg.sender, _amount);\n    }\n\n    function removeBonesFromYard(uint256 _amount) external nonReentrant {\n        if (_amount > balance[msg.sender]) revert BalanceIsInsufficient();\n        uint256 bonesBalance = bonesStaked;\n        balance[msg.sender] -= _amount;\n        bonesStaked -= _amount;\n        /**\n         * The balance before was greater than the minimum\n         * and now it is smaller than it\n         */\n        if (bonesBalance >= minimumBonesRequired() && !validation())\n            timeOut = block.timestamp;\n        SafeTransferLib.safeTransfer(address(bones), msg.sender, _amount);\n        emit RemoveBonesFromYard(msg.sender, _amount);\n    }\n\n    function setMinimumPercent(uint256 _minimumPercent) external onlyOwner {\n        minimumPercent = _minimumPercent;\n    }\n\n    function getTotalDaysOff() external view returns (uint256) {\n        return totalDaysOff;\n    }\n\n    function getDaysOff(uint256 _timestamp) external view returns (uint256) {\n        return trackDaysOff[_timestamp];\n    }\n\n    function minimumBonesRequired() internal view returns (uint256) {\n        return (bones.totalSupply() * minimumPercent) / 10;\n    }\n\n    function getBonesStaked(address _addr) external view returns (uint256) {\n        return balance[_addr];\n    }\n\n    function getTimeOut() external view returns (uint256) {\n        return timeOut;\n    }\n\n    function getTotalBonesStaked() external view returns (uint256) {\n        return bonesStaked;\n    }\n\n    function validation() public view returns (bool) {\n        return bonesStaked >= minimumBonesRequired();\n    }\n\n    event StakeBonesInYard(address indexed owner, uint256 indexed amount);\n    event RemoveBonesFromYard(address indexed owner, uint256 indexed amount);\n}\n"
    },
    "contracts/Supplies.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport { Lib } from \"./library/Lib.sol\";\nimport { Ownable } from \"solady/src/auth/Ownable.sol\";\nimport { SafeTransferLib } from \"solady/src/utils/SafeTransferLib.sol\";\nimport { IBones } from \"./interfaces/IBones.sol\";\nimport {\n    StringsUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\nimport { ITreasure } from \"./interfaces/ITreasure.sol\";\nimport {\n    ERC1155Upgradeable\n} from \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\n\nimport {\n    LengthsNotEqual,\n    InvalidTokenId,\n    NotAuthorized\n} from \"./library/Error.sol\";\n\ncontract Supplies is ERC1155Upgradeable, Ownable {\n    using StringsUpgradeable for uint256;\n\n    address public laborGround;\n    address public treasure;\n    address public bones;\n    address public magic;\n\n    uint256 public constant MAGIC_PRICE = 10 ether;\n    uint256 public constant BONES_PRICE = 1000 ether;\n    uint256 public constant TREASURE_MOONROCK_VALUE = 5;\n\n    // uint256 constant SHOVEL = 1;\n    // uint256 constant SATCHEL = 2;\n    // uint256 constant PICK_AXE = 3;\n\n    string private baseUri;\n\n    enum Curr {\n        Magic,\n        Bones,\n        Treasure\n    }\n\n    function initialize(\n        address _bones,\n        address _magic,\n        address _treasure,\n        string memory _baseUri\n    ) external initializer {\n        _initializeOwner(msg.sender);\n        bones = _bones;\n        magic = _magic;\n        treasure = _treasure;\n        baseUri = _baseUri;\n    }\n\n    function setLaborGroundAddresss(address _laborGround) external onlyOwner {\n        laborGround = _laborGround;\n    }\n\n    /**\n     * this token can no be sold on the secondary market\n     * only mint it and used for job\n     */\n\n    function mint(\n        uint256[] calldata _tokenId,\n        uint256[] calldata _amount,\n        Curr[] calldata _curr\n    ) public {\n        uint256 i;\n        if (_tokenId.length != _amount.length || _amount.length != _curr.length)\n            revert LengthsNotEqual();\n        for (; i < _tokenId.length; ++i) {\n            if (_tokenId[i] > 3 || _tokenId[i] < 1) revert InvalidTokenId();\n            payForToken(_curr[i], _amount[i]);\n            _mint(msg.sender, _tokenId[i], _amount[i], \"\");\n        }\n    }\n\n    function payForToken(Curr _curr, uint256 _amount) internal {\n        if (_curr == Curr.Magic)\n            SafeTransferLib.safeTransferFrom(\n                magic,\n                msg.sender,\n                address(this),\n                MAGIC_PRICE * _amount\n            );\n        if (_curr == Curr.Bones)\n            IBones(bones).burn(msg.sender, BONES_PRICE * _amount);\n        if (_curr == Curr.Treasure)\n            ITreasure(treasure).burn(\n                msg.sender,\n                1,\n                TREASURE_MOONROCK_VALUE * _amount\n            );\n    }\n\n    function setApprovalForAll(\n        address operator,\n        bool approved\n    ) public virtual override {\n        if (operator != laborGround) revert NotAuthorized();\n        super.setApprovalForAll(operator, approved);\n    }\n\n    function name() external pure returns (string memory) {\n        return \"Supplies\";\n    }\n\n    function symbol() external pure returns (string memory) {\n        return \"supplies\";\n    }\n\n    function withdraw() external onlyOwner {\n        SafeTransferLib.safeTransferAll(magic, msg.sender);\n    }\n\n    function uri(\n        uint256 _tokenId\n    ) public view override returns (string memory) {\n        return string(abi.encodePacked(baseUri, _tokenId.toString()));\n    }\n}\n"
    },
    "solady/src/auth/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Simple single owner authorization mixin.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\n/// @dev While the ownable portion follows [EIP-173](https://eips.ethereum.org/EIPS/eip-173)\n/// for compatibility, the nomenclature for the 2-step ownership handover\n/// may be unique to this codebase.\nabstract contract Ownable {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The caller is not authorized to call the function.\n    error Unauthorized();\n\n    /// @dev The `newOwner` cannot be the zero address.\n    error NewOwnerIsZeroAddress();\n\n    /// @dev The `pendingOwner` does not have a valid handover request.\n    error NoHandoverRequest();\n\n    /// @dev `bytes4(keccak256(bytes(\"Unauthorized()\")))`.\n    uint256 private constant _UNAUTHORIZED_ERROR_SELECTOR = 0x82b42900;\n\n    /// @dev `bytes4(keccak256(bytes(\"NewOwnerIsZeroAddress()\")))`.\n    uint256 private constant _NEW_OWNER_IS_ZERO_ADDRESS_ERROR_SELECTOR = 0x7448fbae;\n\n    /// @dev `bytes4(keccak256(bytes(\"NoHandoverRequest()\")))`.\n    uint256 private constant _NO_HANDOVER_REQUEST_ERROR_SELECTOR = 0x6f5e8818;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                           EVENTS                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\n    /// despite it not being as lightweight as a single argument event.\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\n\n    /// @dev An ownership handover to `pendingOwner` has been requested.\n    event OwnershipHandoverRequested(address indexed pendingOwner);\n\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\n\n    /// @dev `keccak256(bytes(\"OwnershipTransferred(address,address)\"))`.\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\n\n    /// @dev `keccak256(bytes(\"OwnershipHandoverRequested(address)\"))`.\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\n\n    /// @dev `keccak256(bytes(\"OwnershipHandoverCanceled(address)\"))`.\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                          STORAGE                           */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The owner slot is given by: `not(_OWNER_SLOT_NOT)`.\n    /// It is intentionally choosen to be a high value\n    /// to avoid collision with lower slots.\n    /// The choice of manual storage layout is to enable compatibility\n    /// with both regular and upgradeable contracts.\n    uint256 private constant _OWNER_SLOT_NOT = 0x8b78c6d8;\n\n    /// The ownership handover slot of `newOwner` is given by:\n    /// ```\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\n    ///     let handoverSlot := keccak256(0x00, 0x20)\n    /// ```\n    /// It stores the expiry timestamp of the two-step ownership handover.\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                     INTERNAL FUNCTIONS                     */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Initializes the owner directly without authorization guard.\n    /// This function must be called upon initialization,\n    /// regardless of whether the contract is upgradeable or not.\n    /// This is to enable generalization to both regular and upgradeable contracts,\n    /// and to save gas in case the initial owner is not the caller.\n    /// For performance reasons, this function will not check if there\n    /// is an existing owner.\n    function _initializeOwner(address newOwner) internal virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Clean the upper 96 bits.\n            newOwner := shr(96, shl(96, newOwner))\n            // Store the new value.\n            sstore(not(_OWNER_SLOT_NOT), newOwner)\n            // Emit the {OwnershipTransferred} event.\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\n        }\n    }\n\n    /// @dev Sets the owner directly without authorization guard.\n    function _setOwner(address newOwner) internal virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ownerSlot := not(_OWNER_SLOT_NOT)\n            // Clean the upper 96 bits.\n            newOwner := shr(96, shl(96, newOwner))\n            // Emit the {OwnershipTransferred} event.\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\n            // Store the new value.\n            sstore(ownerSlot, newOwner)\n        }\n    }\n\n    /// @dev Throws if the sender is not the owner.\n    function _checkOwner() internal view virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // If the caller is not the stored owner, revert.\n            if iszero(eq(caller(), sload(not(_OWNER_SLOT_NOT)))) {\n                mstore(0x00, _UNAUTHORIZED_ERROR_SELECTOR)\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\n        /// @solidity memory-safe-assembly\n        assembly {\n            if iszero(shl(96, newOwner)) {\n                mstore(0x00, _NEW_OWNER_IS_ZERO_ADDRESS_ERROR_SELECTOR)\n                revert(0x1c, 0x04)\n            }\n        }\n        _setOwner(newOwner);\n    }\n\n    /// @dev Allows the owner to renounce their ownership.\n    function renounceOwnership() public payable virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /// @dev Request a two-step ownership handover to the caller.\n    /// The request will be automatically expire in 48 hours (172800 seconds) by default.\n    function requestOwnershipHandover() public payable virtual {\n        unchecked {\n            uint256 expires = block.timestamp + ownershipHandoverValidFor();\n            /// @solidity memory-safe-assembly\n            assembly {\n                // Compute and set the handover slot to `expires`.\n                mstore(0x0c, _HANDOVER_SLOT_SEED)\n                mstore(0x00, caller())\n                sstore(keccak256(0x0c, 0x20), expires)\n                // Emit the {OwnershipHandoverRequested} event.\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\n            }\n        }\n    }\n\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\n    function cancelOwnershipHandover() public payable virtual {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute and set the handover slot to 0.\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\n            mstore(0x00, caller())\n            sstore(keccak256(0x0c, 0x20), 0)\n            // Emit the {OwnershipHandoverCanceled} event.\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\n        }\n    }\n\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute and set the handover slot to 0.\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\n            mstore(0x00, pendingOwner)\n            let handoverSlot := keccak256(0x0c, 0x20)\n            // If the handover does not exist, or has expired.\n            if gt(timestamp(), sload(handoverSlot)) {\n                mstore(0x00, _NO_HANDOVER_REQUEST_ERROR_SELECTOR)\n                revert(0x1c, 0x04)\n            }\n            // Set the handover slot to 0.\n            sstore(handoverSlot, 0)\n        }\n        _setOwner(pendingOwner);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                   PUBLIC READ FUNCTIONS                    */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the owner of the contract.\n    function owner() public view virtual returns (address result) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := sload(not(_OWNER_SLOT_NOT))\n        }\n    }\n\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\n    function ownershipHandoverExpiresAt(address pendingOwner)\n        public\n        view\n        virtual\n        returns (uint256 result)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute the handover slot.\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\n            mstore(0x00, pendingOwner)\n            // Load the handover slot.\n            result := sload(keccak256(0x0c, 0x20))\n        }\n    }\n\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\n    function ownershipHandoverValidFor() public view virtual returns (uint64) {\n        return 48 * 3600;\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         MODIFIERS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Marks a function as only callable by the owner.\n    modifier onlyOwner() virtual {\n        _checkOwner();\n        _;\n    }\n}\n"
    },
    "solady/src/utils/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Caution! This library won't check that a token has code, responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev The ETH transfer has failed.\n    error ETHTransferFailed();\n\n    /// @dev The ERC20 `transferFrom` has failed.\n    error TransferFromFailed();\n\n    /// @dev The ERC20 `transfer` has failed.\n    error TransferFailed();\n\n    /// @dev The ERC20 `approve` has failed.\n    error ApproveFailed();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                         CONSTANTS                          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Suggested gas stipend for contract receiving ETH\n    /// that disallows any storage writes.\n    uint256 internal constant _GAS_STIPEND_NO_STORAGE_WRITES = 2300;\n\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\n    /// storage reads and writes, but low enough to prevent griefing.\n    /// Multiply by a small constant (e.g. 2), if needed.\n    uint256 internal constant _GAS_STIPEND_NO_GRIEF = 100000;\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       ETH OPERATIONS                       */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Sends `amount` (in wei) ETH to `to`.\n    /// Reverts upon failure.\n    function safeTransferETH(address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Transfer the ETH and check if it succeeded or not.\n            if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\n                // Store the function selector of `ETHTransferFailed()`.\n                mstore(0x00, 0xb12d13eb)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\n    /// The `gasStipend` can be set to a low enough value to prevent\n    /// storage writes or gas griefing.\n    ///\n    /// If sending via the normal procedure fails, force sends the ETH by\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\n    ///\n    /// Reverts if the current contract has insufficient balance.\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // If insufficient balance, revert.\n            if lt(selfbalance(), amount) {\n                // Store the function selector of `ETHTransferFailed()`.\n                mstore(0x00, 0xb12d13eb)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Transfer the ETH and check if it succeeded or not.\n            if iszero(call(gasStipend, to, amount, 0, 0, 0, 0)) {\n                mstore(0x00, to) // Store the address in scratch space.\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\n                // We can directly use `SELFDESTRUCT` in the contract creation.\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\n                pop(create(amount, 0x0b, 0x16))\n            }\n        }\n    }\n\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a gas stipend\n    /// equal to `_GAS_STIPEND_NO_GRIEF`. This gas stipend is a reasonable default\n    /// for 99% of cases and can be overriden with the three-argument version of this\n    /// function if necessary.\n    ///\n    /// If sending via the normal procedure fails, force sends the ETH by\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\n    ///\n    /// Reverts if the current contract has insufficient balance.\n    function forceSafeTransferETH(address to, uint256 amount) internal {\n        // Manually inlined because the compiler doesn't inline functions with branches.\n        /// @solidity memory-safe-assembly\n        assembly {\n            // If insufficient balance, revert.\n            if lt(selfbalance(), amount) {\n                // Store the function selector of `ETHTransferFailed()`.\n                mstore(0x00, 0xb12d13eb)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Transfer the ETH and check if it succeeded or not.\n            if iszero(call(_GAS_STIPEND_NO_GRIEF, to, amount, 0, 0, 0, 0)) {\n                mstore(0x00, to) // Store the address in scratch space.\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\n                // We can directly use `SELFDESTRUCT` in the contract creation.\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\n                pop(create(amount, 0x0b, 0x16))\n            }\n        }\n    }\n\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\n    /// The `gasStipend` can be set to a low enough value to prevent\n    /// storage writes or gas griefing.\n    ///\n    /// Simply use `gasleft()` for `gasStipend` if you don't need a gas stipend.\n    ///\n    /// Note: Does NOT revert upon failure.\n    /// Returns whether the transfer of ETH is successful instead.\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\n        internal\n        returns (bool success)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Transfer the ETH and check if it succeeded or not.\n            success := call(gasStipend, to, amount, 0, 0, 0, 0)\n        }\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      ERC20 OPERATIONS                      */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\n    /// Reverts upon failure.\n    ///\n    /// The `from` account must have at least `amount` approved for\n    /// the current contract to manage.\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n\n            // Store the function selector of `transferFrom(address,address,uint256)`.\n            mstore(0x00, 0x23b872dd)\n            mstore(0x20, from) // Store the `from` argument.\n            mstore(0x40, to) // Store the `to` argument.\n            mstore(0x60, amount) // Store the `amount` argument.\n\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    // Set success to whether the call reverted, if not we check it either\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\n                )\n            ) {\n                // Store the function selector of `TransferFromFailed()`.\n                mstore(0x00, 0x7939f424)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n\n            mstore(0x60, 0) // Restore the zero slot to zero.\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\n    /// Reverts upon failure.\n    ///\n    /// The `from` account must have at least `amount` approved for\n    /// the current contract to manage.\n    function safeTransferAllFrom(address token, address from, address to)\n        internal\n        returns (uint256 amount)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let m := mload(0x40) // Cache the free memory pointer.\n\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\n            mstore(0x20, from) // Store the `from` argument.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\n                )\n            ) {\n                // Store the function selector of `TransferFromFailed()`.\n                mstore(0x00, 0x7939f424)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n\n            // Store the function selector of `transferFrom(address,address,uint256)`.\n            mstore(0x00, 0x23b872dd)\n            mstore(0x40, to) // Store the `to` argument.\n            // The `amount` argument is already written to the memory word at 0x6a.\n            amount := mload(0x60)\n\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    // Set success to whether the call reverted, if not we check it either\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\n                )\n            ) {\n                // Store the function selector of `TransferFromFailed()`.\n                mstore(0x00, 0x7939f424)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n\n            mstore(0x60, 0) // Restore the zero slot to zero.\n            mstore(0x40, m) // Restore the free memory pointer.\n        }\n    }\n\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\n    /// Reverts upon failure.\n    function safeTransfer(address token, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x1a, to) // Store the `to` argument.\n            mstore(0x3a, amount) // Store the `amount` argument.\n            // Store the function selector of `transfer(address,uint256)`,\n            // left by 6 bytes (enough for 8tb of memory represented by the free memory pointer).\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\n            mstore(0x00, 0xa9059cbb000000000000)\n\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    // Set success to whether the call reverted, if not we check it either\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\n                    call(gas(), token, 0, 0x16, 0x44, 0x00, 0x20)\n                )\n            ) {\n                // Store the function selector of `TransferFailed()`.\n                mstore(0x00, 0x90b8ec18)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Restore the part of the free memory pointer that was overwritten,\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\n            mstore(0x3a, 0)\n        }\n    }\n\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\n    /// Reverts upon failure.\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\n            mstore(0x20, address()) // Store the address of the current contract.\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\n                    staticcall(gas(), token, 0x1c, 0x24, 0x3a, 0x20)\n                )\n            ) {\n                // Store the function selector of `TransferFailed()`.\n                mstore(0x00, 0x90b8ec18)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n\n            mstore(0x1a, to) // Store the `to` argument.\n            // The `amount` argument is already written to the memory word at 0x3a.\n            amount := mload(0x3a)\n            // Store the function selector of `transfer(address,uint256)`,\n            // left by 6 bytes (enough for 8tb of memory represented by the free memory pointer).\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\n            mstore(0x00, 0xa9059cbb000000000000)\n\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    // Set success to whether the call reverted, if not we check it either\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\n                    call(gas(), token, 0, 0x16, 0x44, 0x00, 0x20)\n                )\n            ) {\n                // Store the function selector of `TransferFailed()`.\n                mstore(0x00, 0x90b8ec18)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Restore the part of the free memory pointer that was overwritten,\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\n            mstore(0x3a, 0)\n        }\n    }\n\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\n    /// Reverts upon failure.\n    function safeApprove(address token, address to, uint256 amount) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x1a, to) // Store the `to` argument.\n            mstore(0x3a, amount) // Store the `amount` argument.\n            // Store the function selector of `approve(address,uint256)`,\n            // left by 6 bytes (enough for 8tb of memory represented by the free memory pointer).\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\n            mstore(0x00, 0x095ea7b3000000000000)\n\n            if iszero(\n                and( // The arguments of `and` are evaluated from right to left.\n                    // Set success to whether the call reverted, if not we check it either\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\n                    call(gas(), token, 0, 0x16, 0x44, 0x00, 0x20)\n                )\n            ) {\n                // Store the function selector of `ApproveFailed()`.\n                mstore(0x00, 0x3e3f8f73)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Restore the part of the free memory pointer that was overwritten,\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\n            mstore(0x3a, 0)\n        }\n    }\n\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\n    /// Returns zero if the `token` does not exist.\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\n            mstore(0x20, account) // Store the `account` argument.\n            amount :=\n                mul(\n                    mload(0x20),\n                    and( // The arguments of `and` are evaluated from right to left.\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\n                        staticcall(gas(), token, 0x1c, 0x24, 0x20, 0x20)\n                    )\n                )\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}