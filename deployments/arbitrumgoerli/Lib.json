{
  "address": "0x4536332EA1b71739428BcE498EaDa851683d4Eb4",
  "abi": [
    {
      "inputs": [],
      "name": "BalanceIsInsufficient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotClaimNow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CsIsBellowHundred",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CsToHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DevelopmentGroundIsLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLockTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenForThisJob",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthsNotEqual",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeandersmolIsNotInDevelopmentGround",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeandersmolsIsLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoMoreAnimalsAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongMultiple",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroBalanceError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract INeandersmol",
          "name": "_neandersmol",
          "type": "INeandersmol"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockTime",
          "type": "uint256"
        }
      ],
      "name": "enterDevelopmentGround",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INeandersmol",
          "name": "_neandersmol",
          "type": "INeandersmol"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_supplyId",
          "type": "uint256"
        },
        {
          "internalType": "enum Lib.Jobs",
          "name": "_job",
          "type": "Lib.Jobs"
        }
      ],
      "name": "enterLaborGround",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currentLockPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastRewardTime",
          "type": "uint256"
        },
        {
          "internalType": "contract IPits",
          "name": "_pits",
          "type": "IPits"
        }
      ],
      "name": "getDevelopmentGroundBonesReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPits",
          "name": "_pits",
          "type": "IPits"
        }
      ],
      "name": "pitsValidation",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd71ee7ce19f2ee8e296e6521dfac5d0381a9e30db28a0b44cffc8d9ae4acdd50",
  "receipt": {
    "to": null,
    "from": "0xF454A9675f7fDb9D5431AEab276979fDed1428e4",
    "contractAddress": "0x4536332EA1b71739428BcE498EaDa851683d4Eb4",
    "transactionIndex": 1,
    "gasUsed": "6628701",
    "logsBloom": "0x
    "blockHash": "0xdeddaca6219766a8ab506ae880db4887dd6ed6787cd7c36fe67952656bf94b80",
    "transactionHash": "0xd71ee7ce19f2ee8e296e6521dfac5d0381a9e30db28a0b44cffc8d9ae4acdd50",
    "logs": [],
    "blockNumber": 8003645,
    "cumulativeGasUsed": "6628701",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ca3b9eebb5579e3b0477fbd792cde0dd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BalanceIsInsufficient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotClaimNow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CsIsBellowHundred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CsToHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DevelopmentGroundIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLockTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenForThisJob\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthsNotEqual\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeandersmolIsNotInDevelopmentGround\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeandersmolsIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoMoreAnimalsAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongMultiple\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBalanceError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract INeandersmol\",\"name\":\"_neandersmol\",\"type\":\"INeandersmol\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"enterDevelopmentGround\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INeandersmol\",\"name\":\"_neandersmol\",\"type\":\"INeandersmol\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supplyId\",\"type\":\"uint256\"},{\"internalType\":\"enum Lib.Jobs\",\"name\":\"_job\",\"type\":\"Lib.Jobs\"}],\"name\":\"enterLaborGround\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentLockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"contract IPits\",\"name\":\"_pits\",\"type\":\"IPits\"}],\"name\":\"getDevelopmentGroundBonesReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPits\",\"name\":\"_pits\",\"type\":\"IPits\"}],\"name\":\"pitsValidation\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/library/Lib.sol\":\"Lib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/interfaces/IBones.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IBones is IERC20Upgradeable {\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n\\r\\n    function burn(address _from, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x8637ea23284e83e14816895394ef0a70f8dacf7244b13193547c271444f74f54\",\"license\":\"MIT\"},\"contracts/interfaces/INeandersmol.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\r\\n\\r\\ninterface INeandersmol is IERC721Upgradeable {\\r\\n    function getCommonSense(uint256 _tokenId) external view returns (uint256);\\r\\n\\r\\n    function developMystics(uint256 _tokenId, uint256 _amount) external;\\r\\n\\r\\n    function developFarmers(uint256 _tokenId, uint256 _amount) external;\\r\\n\\r\\n    function developFighter(uint256 _tokenId, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4f4c0cd1d29d2407a64f29d6007840788ca955fd17b2d31f8824415e2281561b\",\"license\":\"MIT\"},\"contracts/interfaces/IPits.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\ninterface IPits {\\r\\n    function validation() external view returns (bool);\\r\\n\\r\\n    function getTimeOut() external view returns (uint256);\\r\\n\\r\\n    function getTimeBelowMinimum() external view returns (uint256);\\r\\n\\r\\n    function getDaysOff(uint256 _timestamp) external view returns (uint256);\\r\\n\\r\\n    function getTotalDaysOff() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x490033dae4f4a91bd8ff6367d7112a32d2495d4d5e4a61bebecb5d8903b0d291\",\"license\":\"MIT\"},\"contracts/library/Lib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport {IPits} from \\\"../interfaces/IPits.sol\\\";\\r\\nimport {INeandersmol} from \\\"../interfaces/INeandersmol.sol\\\";\\r\\nimport {IBones} from \\\"../interfaces/IBones.sol\\\";\\r\\n\\r\\nlibrary Lib {\\r\\n    error CsToHigh();\\r\\n    error NotAContract();\\r\\n    error NotYourToken();\\r\\n    error NotAuthorized();\\r\\n    error WrongMultiple();\\r\\n    error CannotClaimNow();\\r\\n    error TransferFailed();\\r\\n    error InvalidTokenId();\\r\\n    error InvalidLockTime();\\r\\n    error NoMoreAnimalsAllowed();\\r\\n    error LengthsNotEqual();\\r\\n    error ZeroBalanceError();\\r\\n    error CsIsBellowHundred();\\r\\n    error NeandersmolsIsLocked();\\r\\n    error BalanceIsInsufficient();\\r\\n    error InvalidTokenForThisJob();\\r\\n    error DevelopmentGroundIsLocked();\\r\\n    error NeandersmolIsNotInDevelopmentGround();\\r\\n\\r\\n    struct DevelopmentGround {\\r\\n        address owner;\\r\\n        uint64 lockPeriod;\\r\\n        uint64 amountPosition;\\r\\n        uint64 entryTime;\\r\\n        uint64 lastRewardTime;\\r\\n        uint256 bonesStaked;\\r\\n        uint256 currentPitsLockPeriod;\\r\\n        Grounds ground;\\r\\n    }\\r\\n\\r\\n    struct LaborGround {\\r\\n        address owner;\\r\\n        uint32 lockTime;\\r\\n        uint32 supplyId;\\r\\n        uint32 animalId;\\r\\n        uint256 requestId;\\r\\n        Jobs job;\\r\\n    }\\r\\n\\r\\n    struct Caves {\\r\\n        address owner;\\r\\n        uint48 stakingTime;\\r\\n        uint48 lastRewardTimestamp;\\r\\n    }\\r\\n\\r\\n    enum Jobs {\\r\\n        Digging,\\r\\n        Foraging,\\r\\n        Mining\\r\\n    }\\r\\n\\r\\n    enum Grounds {\\r\\n        Chambers,\\r\\n        Garden,\\r\\n        Battlefield\\r\\n    }\\r\\n\\r\\n    uint256 private constant MINIMUM_BONE_STAKE = 1000 * 10 ** 18;\\r\\n\\r\\n    function getDevelopmentGroundBonesReward(\\r\\n        uint256 _currentLockPeriod,\\r\\n        uint256 _lockPeriod,\\r\\n        uint256 _lastRewardTime,\\r\\n        IPits _pits\\r\\n    ) external view returns (uint256) {\\r\\n        if (_lockPeriod == 0) return 0;\\r\\n        uint256 rewardRate = getRewardRate(_lockPeriod);\\r\\n\\r\\n        uint256 time = (block.timestamp - _lastRewardTime) / 1 days;\\r\\n\\r\\n        return\\r\\n            (rewardRate *\\r\\n                time -\\r\\n                calculateFinalReward(_currentLockPeriod, _pits)) * 10 ** 18;\\r\\n    }\\r\\n\\r\\n    // check if this can be fixed to reduce gas cost\\r\\n    function calculatePrimarySkill(\\r\\n        uint256 _bonesStaked,\\r\\n        uint256 _amountPosition,\\r\\n        uint256 _currentLockPeriod,\\r\\n        uint256 _tokenId,\\r\\n        IPits _pits,\\r\\n        mapping(uint256 => mapping(uint256 => uint256)) storage trackTime,\\r\\n        mapping(uint256 => mapping(uint256 => uint256)) storage trackToken\\r\\n    ) external view returns (uint256) {\\r\\n        if (_bonesStaked == 0) return 0;\\r\\n        uint256 amount;\\r\\n        for (uint256 i = 1; i <= _amountPosition; ) {\\r\\n            uint256 time = (block.timestamp - trackTime[_tokenId][i]) / 1 days;\\r\\n            uint256 stakedAmount = trackToken[_tokenId][trackTime[_tokenId][i]];\\r\\n            amount += (time * stakedAmount);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return\\r\\n            (amount -\\r\\n                calculateFinalReward(_currentLockPeriod, _pits) *\\r\\n                10 ** 20) / 10 ** 4;\\r\\n    }\\r\\n\\r\\n    function calculateFinalReward(\\r\\n        uint256 _currentLockPeriod,\\r\\n        IPits _pits\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 amount;\\r\\n\\r\\n        if (_currentLockPeriod != _pits.getTimeOut()) {\\r\\n            uint256 howLong = (block.timestamp - _pits.getTimeOut()) / 1 days;\\r\\n            amount = (_pits.getTotalDaysOff() -\\r\\n                _pits.getDaysOff(_currentLockPeriod) +\\r\\n                howLong);\\r\\n        }\\r\\n        if (_currentLockPeriod == 0) {\\r\\n            uint256 off;\\r\\n            _pits.getTimeOut() != 0\\r\\n                ? off = (block.timestamp - _pits.getTimeOut()) / 1 days\\r\\n                : 0;\\r\\n            if (_pits.validation()) off = _pits.getTotalDaysOff();\\r\\n            amount = off;\\r\\n        }\\r\\n        return amount * 10;\\r\\n    }\\r\\n\\r\\n    function getRewardRate(\\r\\n        uint _lockTime\\r\\n    ) internal pure returns (uint256 rewardRate) {\\r\\n        if (_lockTime == 50 days) rewardRate = 10;\\r\\n        if (_lockTime == 100 days) rewardRate = 50;\\r\\n        if (_lockTime == 150 days) rewardRate = 100;\\r\\n    }\\r\\n\\r\\n    function enterDevelopmentGround(\\r\\n        INeandersmol _neandersmol,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _lockTime\\r\\n    ) external view {\\r\\n        if (_neandersmol.getCommonSense(_tokenId) < 100)\\r\\n            revert CsIsBellowHundred();\\r\\n        if (_neandersmol.ownerOf(_tokenId) != msg.sender) revert NotYourToken();\\r\\n        if (!lockTimeExists(_lockTime)) revert InvalidLockTime();\\r\\n    }\\r\\n\\r\\n    function lockTimeExists(uint256 _lockTime) internal pure returns (bool) {\\r\\n        return\\r\\n            _lockTime == 50 days ||\\r\\n            _lockTime == 100 days ||\\r\\n            _lockTime == 150 days;\\r\\n    }\\r\\n\\r\\n    function enterLaborGround(\\r\\n        INeandersmol _neandersmol,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _supplyId,\\r\\n        Jobs _job\\r\\n    ) external view {\\r\\n        if (_neandersmol.ownerOf(_tokenId) != msg.sender) revert NotYourToken();\\r\\n        if (_neandersmol.getCommonSense(_tokenId) > 99) revert CsToHigh();\\r\\n        if (!validateTokenId(_supplyId, _job)) revert InvalidTokenForThisJob();\\r\\n    }\\r\\n\\r\\n    function validateTokenId(\\r\\n        uint256 _tokenId,\\r\\n        Jobs _job\\r\\n    ) internal pure returns (bool res) {\\r\\n        if (_job == Jobs.Digging) return _tokenId == 1;\\r\\n        if (_job == Jobs.Foraging) return _tokenId == 2;\\r\\n        if (_job == Jobs.Mining) return _tokenId == 3;\\r\\n    }\\r\\n\\r\\n    function pitsValidation(IPits _pits) external view {\\r\\n        if (!_pits.validation()) revert DevelopmentGroundIsLocked();\\r\\n    }\\r\\n\\r\\n    function leaveDevelopmentGround(\\r\\n        DevelopmentGround storage _devGround\\r\\n    ) external view {\\r\\n        DevelopmentGround memory devGround = _devGround;\\r\\n        if (devGround.owner != msg.sender) revert NotYourToken();\\r\\n        if (block.timestamp < devGround.entryTime + devGround.lockPeriod)\\r\\n            revert NeandersmolsIsLocked();\\r\\n    }\\r\\n\\r\\n    function stakeBonesInDevelopmentGround(\\r\\n        DevelopmentGround storage _devGround,\\r\\n        IBones _bones,\\r\\n        uint256 _amount\\r\\n    ) external view {\\r\\n        if (_bones.balanceOf(msg.sender) < _amount)\\r\\n            revert BalanceIsInsufficient();\\r\\n        if (_devGround.owner != msg.sender)\\r\\n            revert NeandersmolIsNotInDevelopmentGround();\\r\\n        if (_amount % MINIMUM_BONE_STAKE != 0) revert WrongMultiple();\\r\\n    }\\r\\n\\r\\n    function bringInAnimalsToLaborGround(\\r\\n        LaborGround storage _labor\\r\\n    ) external view {\\r\\n        if (_labor.owner != msg.sender) revert NotYourToken();\\r\\n        if (_labor.animalId != 0) revert NoMoreAnimalsAllowed();\\r\\n    }\\r\\n\\r\\n    function removeAnimalsFromLaborGround(\\r\\n        LaborGround storage _labor,\\r\\n        uint256 _animalsId\\r\\n    ) external view {\\r\\n        if (_labor.owner != msg.sender && _labor.animalId != _animalsId + 1)\\r\\n            revert Lib.NotYourToken();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa0e72777885f386da6a0b94c8dfcde14bad617e0c547b1a6d9e741be3e6784f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x611aaf610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c8063983904841161007057806398390484146101265780639b0114ec146101425780639d79d1481461015e578063e04bed121461017a578063f674f6b7146101965761009d565b806319bfe45c146100a25780633c1c74ab146100be57806366ea43f0146100da57806371fcf2041461010a575b600080fd5b6100bc60048036038101906100b79190611317565b6101c6565b005b6100d860048036038101906100d3919061137e565b61039e565b005b6100f460048036038101906100ef9190611445565b610574565b60405161010191906114f6565b60405180910390f35b610124600480360381019061011f9190611511565b61068d565b005b610140600480360381019061013b9190611574565b610735565b005b61015c600480360381019061015791906115a1565b610815565b005b61017860048036038101906101739190611617565b6108d6565b005b610194600480360381019061018f9190611682565b610b18565b005b6101b060048036038101906101ab91906116d5565b610ca7565b6040516101bd91906114f6565b60405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610216919061174b565b602060405180830381865afa158015610233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102579190611792565b73ffffffffffffffffffffffffffffffffffffffff16146102a4576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60638473ffffffffffffffffffffffffffffffffffffffff1663f822a5b2856040518263ffffffff1660e01b81526004016102df919061174b565b602060405180830381865afa1580156102fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032091906117d4565b1115610358576040517fc0b81fcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103628282610d24565b610398576040517f3189b2eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60648373ffffffffffffffffffffffffffffffffffffffff1663f822a5b2846040518263ffffffff1660e01b81526004016103d9919061174b565b602060405180830381865afa1580156103f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041a91906117d4565b1015610452576040517f7f36105d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016104a2919061174b565b602060405180830381865afa1580156104bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e39190611792565b73ffffffffffffffffffffffffffffffffffffffff1614610530576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61053981610dd0565b61056f576040517fabf20e8f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60008088036105865760009050610682565b600080600190505b888111610647576000620151808660008a8152602001908152602001600020600084815260200190815260200160002054426105ca9190611830565b6105d49190611893565b905060008560008a815260200190815260200160002060008860008c81526020019081526020016000206000868152602001908152602001600020548152602001908152602001600020549050808261062d91906118c4565b846106389190611906565b9350826001019250505061058e565b5061271068056bc75e2d6310000061065f8988610df9565b61066991906118c4565b826106749190611830565b61067e9190611893565b9150505b979650505050505050565b8073ffffffffffffffffffffffffffffffffffffffff1663ae4b37e46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fc9190611972565b610732576040517f288de97200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b3373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107be576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600001601c9054906101000a900463ffffffff1663ffffffff1614610812576040517f8dca9f6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b3373ffffffffffffffffffffffffffffffffffffffff168260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415801561089b575060018161087d9190611906565b82600001601c9054906101000a900463ffffffff1663ffffffff1614155b156108d2576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600081604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115610a3c57610a3b61199f565b5b6002811115610a4e57610a4d61199f565b5b8152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614610abd576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80602001518160600151610ad191906119e2565b67ffffffffffffffff16421015610b14576040517ff5dcc1e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b808273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610b529190611a2d565b602060405180830381865afa158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9391906117d4565b1015610bcb576040517f7276110900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c54576040517fb47f2b3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000683635c9adc5dea0000082610c6b9190611a48565b14610ca2576040517f1d823d0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6000808403610cb95760009050610d1c565b6000610cc485611213565b90506000620151808542610cd89190611830565b610ce29190611893565b9050670de0b6b3a7640000610cf78886610df9565b8284610d0391906118c4565b610d0d9190611830565b610d1791906118c4565b925050505b949350505050565b6000806002811115610d3957610d3861199f565b5b826002811115610d4c57610d4b61199f565b5b03610d5c57600183149050610dca565b60016002811115610d7057610d6f61199f565b5b826002811115610d8357610d8261199f565b5b03610d9357600283149050610dca565b600280811115610da657610da561199f565b5b826002811115610db957610db861199f565b5b03610dc957600383149050610dca565b5b92915050565b60006241eb00821480610de557506283d60082145b80610df2575062c5c10082145b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b91906117d4565b8414610fff576000620151808473ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee691906117d4565b42610ef19190611830565b610efb9190611893565b9050808473ffffffffffffffffffffffffffffffffffffffff1663d09f53c0876040518263ffffffff1660e01b8152600401610f37919061174b565b602060405180830381865afa158015610f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7891906117d4565b8573ffffffffffffffffffffffffffffffffffffffff16637bd90cc26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe791906117d4565b610ff19190611830565b610ffb9190611906565b9150505b600084036111fd576000808473ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611055573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107991906117d4565b03611085576000611111565b620151808473ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f891906117d4565b426111039190611830565b61110d9190611893565b9050805b508373ffffffffffffffffffffffffffffffffffffffff1663ae4b37e46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561115d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111819190611972565b156111f8578373ffffffffffffffffffffffffffffffffffffffff16637bd90cc26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f591906117d4565b90505b809150505b600a8161120a91906118c4565b91505092915050565b60006241eb00820361122457600a90505b6283d600820361123357603290505b62c5c100820361124257606490505b919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112778261124c565b9050919050565b60006112898261126c565b9050919050565b6112998161127e565b81146112a457600080fd5b50565b6000813590506112b681611290565b92915050565b6000819050919050565b6112cf816112bc565b81146112da57600080fd5b50565b6000813590506112ec816112c6565b92915050565b600381106112ff57600080fd5b50565b600081359050611311816112f2565b92915050565b6000806000806080858703121561133157611330611247565b5b600061133f878288016112a7565b9450506020611350878288016112dd565b9350506040611361878288016112dd565b925050606061137287828801611302565b91505092959194509250565b60008060006060848603121561139757611396611247565b5b60006113a5868287016112a7565b93505060206113b6868287016112dd565b92505060406113c7868287016112dd565b9150509250925092565b60006113dc8261126c565b9050919050565b6113ec816113d1565b81146113f757600080fd5b50565b600081359050611409816113e3565b92915050565b6000819050919050565b6114228161140f565b811461142d57600080fd5b50565b60008135905061143f81611419565b92915050565b600080600080600080600060e0888a03121561146457611463611247565b5b60006114728a828b016112dd565b97505060206114838a828b016112dd565b96505060406114948a828b016112dd565b95505060606114a58a828b016112dd565b94505060806114b68a828b016113fa565b93505060a06114c78a828b01611430565b92505060c06114d88a828b01611430565b91505092959891949750929550565b6114f0816112bc565b82525050565b600060208201905061150b60008301846114e7565b92915050565b60006020828403121561152757611526611247565b5b6000611535848285016113fa565b91505092915050565b6000819050919050565b6115518161153e565b811461155c57600080fd5b50565b60008135905061156e81611548565b92915050565b60006020828403121561158a57611589611247565b5b60006115988482850161155f565b91505092915050565b600080604083850312156115b8576115b7611247565b5b60006115c68582860161155f565b92505060206115d7858286016112dd565b9150509250929050565b6000819050919050565b6115f4816115e1565b81146115ff57600080fd5b50565b600081359050611611816115eb565b92915050565b60006020828403121561162d5761162c611247565b5b600061163b84828501611602565b91505092915050565b600061164f8261126c565b9050919050565b61165f81611644565b811461166a57600080fd5b50565b60008135905061167c81611656565b92915050565b60008060006060848603121561169b5761169a611247565b5b60006116a986828701611602565b93505060206116ba8682870161166d565b92505060406116cb868287016112dd565b9150509250925092565b600080600080608085870312156116ef576116ee611247565b5b60006116fd878288016112dd565b945050602061170e878288016112dd565b935050604061171f878288016112dd565b9250506060611730878288016113fa565b91505092959194509250565b611745816112bc565b82525050565b6000602082019050611760600083018461173c565b92915050565b61176f8161126c565b811461177a57600080fd5b50565b60008151905061178c81611766565b92915050565b6000602082840312156117a8576117a7611247565b5b60006117b68482850161177d565b91505092915050565b6000815190506117ce816112c6565b92915050565b6000602082840312156117ea576117e9611247565b5b60006117f8848285016117bf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061183b826112bc565b9150611846836112bc565b925082820390508181111561185e5761185d611801565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061189e826112bc565b91506118a9836112bc565b9250826118b9576118b8611864565b5b828204905092915050565b60006118cf826112bc565b91506118da836112bc565b92508282026118e8816112bc565b915082820484148315176118ff576118fe611801565b5b5092915050565b6000611911826112bc565b915061191c836112bc565b925082820190508082111561193457611933611801565b5b92915050565b60008115159050919050565b61194f8161193a565b811461195a57600080fd5b50565b60008151905061196c81611946565b92915050565b60006020828403121561198857611987611247565b5b60006119968482850161195d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600067ffffffffffffffff82169050919050565b60006119ed826119ce565b91506119f8836119ce565b9250828201905067ffffffffffffffff811115611a1857611a17611801565b5b92915050565b611a278161126c565b82525050565b6000602082019050611a426000830184611a1e565b92915050565b6000611a53826112bc565b9150611a5e836112bc565b925082611a6e57611a6d611864565b5b82820690509291505056fea2646970667358221220917c2dccbd69e08fec724f3ebb7dbab1c2e5cb697e85acd7c0c6042a6a27d41b64736f6c63430008110033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c8063983904841161007057806398390484146101265780639b0114ec146101425780639d79d1481461015e578063e04bed121461017a578063f674f6b7146101965761009d565b806319bfe45c146100a25780633c1c74ab146100be57806366ea43f0146100da57806371fcf2041461010a575b600080fd5b6100bc60048036038101906100b79190611317565b6101c6565b005b6100d860048036038101906100d3919061137e565b61039e565b005b6100f460048036038101906100ef9190611445565b610574565b60405161010191906114f6565b60405180910390f35b610124600480360381019061011f9190611511565b61068d565b005b610140600480360381019061013b9190611574565b610735565b005b61015c600480360381019061015791906115a1565b610815565b005b61017860048036038101906101739190611617565b6108d6565b005b610194600480360381019061018f9190611682565b610b18565b005b6101b060048036038101906101ab91906116d5565b610ca7565b6040516101bd91906114f6565b60405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610216919061174b565b602060405180830381865afa158015610233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102579190611792565b73ffffffffffffffffffffffffffffffffffffffff16146102a4576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60638473ffffffffffffffffffffffffffffffffffffffff1663f822a5b2856040518263ffffffff1660e01b81526004016102df919061174b565b602060405180830381865afa1580156102fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032091906117d4565b1115610358576040517fc0b81fcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103628282610d24565b610398576040517f3189b2eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60648373ffffffffffffffffffffffffffffffffffffffff1663f822a5b2846040518263ffffffff1660e01b81526004016103d9919061174b565b602060405180830381865afa1580156103f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041a91906117d4565b1015610452576040517f7f36105d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016104a2919061174b565b602060405180830381865afa1580156104bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e39190611792565b73ffffffffffffffffffffffffffffffffffffffff1614610530576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61053981610dd0565b61056f576040517fabf20e8f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60008088036105865760009050610682565b600080600190505b888111610647576000620151808660008a8152602001908152602001600020600084815260200190815260200160002054426105ca9190611830565b6105d49190611893565b905060008560008a815260200190815260200160002060008860008c81526020019081526020016000206000868152602001908152602001600020548152602001908152602001600020549050808261062d91906118c4565b846106389190611906565b9350826001019250505061058e565b5061271068056bc75e2d6310000061065f8988610df9565b61066991906118c4565b826106749190611830565b61067e9190611893565b9150505b979650505050505050565b8073ffffffffffffffffffffffffffffffffffffffff1663ae4b37e46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fc9190611972565b610732576040517f288de97200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b3373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107be576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600001601c9054906101000a900463ffffffff1663ffffffff1614610812576040517f8dca9f6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b3373ffffffffffffffffffffffffffffffffffffffff168260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415801561089b575060018161087d9190611906565b82600001601c9054906101000a900463ffffffff1663ffffffff1614155b156108d2576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600081604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115610a3c57610a3b61199f565b5b6002811115610a4e57610a4d61199f565b5b8152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614610abd576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80602001518160600151610ad191906119e2565b67ffffffffffffffff16421015610b14576040517ff5dcc1e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b808273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610b529190611a2d565b602060405180830381865afa158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9391906117d4565b1015610bcb576040517f7276110900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c54576040517fb47f2b3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000683635c9adc5dea0000082610c6b9190611a48565b14610ca2576040517f1d823d0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6000808403610cb95760009050610d1c565b6000610cc485611213565b90506000620151808542610cd89190611830565b610ce29190611893565b9050670de0b6b3a7640000610cf78886610df9565b8284610d0391906118c4565b610d0d9190611830565b610d1791906118c4565b925050505b949350505050565b6000806002811115610d3957610d3861199f565b5b826002811115610d4c57610d4b61199f565b5b03610d5c57600183149050610dca565b60016002811115610d7057610d6f61199f565b5b826002811115610d8357610d8261199f565b5b03610d9357600283149050610dca565b600280811115610da657610da561199f565b5b826002811115610db957610db861199f565b5b03610dc957600383149050610dca565b5b92915050565b60006241eb00821480610de557506283d60082145b80610df2575062c5c10082145b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6b91906117d4565b8414610fff576000620151808473ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee691906117d4565b42610ef19190611830565b610efb9190611893565b9050808473ffffffffffffffffffffffffffffffffffffffff1663d09f53c0876040518263ffffffff1660e01b8152600401610f37919061174b565b602060405180830381865afa158015610f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7891906117d4565b8573ffffffffffffffffffffffffffffffffffffffff16637bd90cc26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe791906117d4565b610ff19190611830565b610ffb9190611906565b9150505b600084036111fd576000808473ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611055573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107991906117d4565b03611085576000611111565b620151808473ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f891906117d4565b426111039190611830565b61110d9190611893565b9050805b508373ffffffffffffffffffffffffffffffffffffffff1663ae4b37e46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561115d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111819190611972565b156111f8578373ffffffffffffffffffffffffffffffffffffffff16637bd90cc26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f591906117d4565b90505b809150505b600a8161120a91906118c4565b91505092915050565b60006241eb00820361122457600a90505b6283d600820361123357603290505b62c5c100820361124257606490505b919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112778261124c565b9050919050565b60006112898261126c565b9050919050565b6112998161127e565b81146112a457600080fd5b50565b6000813590506112b681611290565b92915050565b6000819050919050565b6112cf816112bc565b81146112da57600080fd5b50565b6000813590506112ec816112c6565b92915050565b600381106112ff57600080fd5b50565b600081359050611311816112f2565b92915050565b6000806000806080858703121561133157611330611247565b5b600061133f878288016112a7565b9450506020611350878288016112dd565b9350506040611361878288016112dd565b925050606061137287828801611302565b91505092959194509250565b60008060006060848603121561139757611396611247565b5b60006113a5868287016112a7565b93505060206113b6868287016112dd565b92505060406113c7868287016112dd565b9150509250925092565b60006113dc8261126c565b9050919050565b6113ec816113d1565b81146113f757600080fd5b50565b600081359050611409816113e3565b92915050565b6000819050919050565b6114228161140f565b811461142d57600080fd5b50565b60008135905061143f81611419565b92915050565b600080600080600080600060e0888a03121561146457611463611247565b5b60006114728a828b016112dd565b97505060206114838a828b016112dd565b96505060406114948a828b016112dd565b95505060606114a58a828b016112dd565b94505060806114b68a828b016113fa565b93505060a06114c78a828b01611430565b92505060c06114d88a828b01611430565b91505092959891949750929550565b6114f0816112bc565b82525050565b600060208201905061150b60008301846114e7565b92915050565b60006020828403121561152757611526611247565b5b6000611535848285016113fa565b91505092915050565b6000819050919050565b6115518161153e565b811461155c57600080fd5b50565b60008135905061156e81611548565b92915050565b60006020828403121561158a57611589611247565b5b60006115988482850161155f565b91505092915050565b600080604083850312156115b8576115b7611247565b5b60006115c68582860161155f565b92505060206115d7858286016112dd565b9150509250929050565b6000819050919050565b6115f4816115e1565b81146115ff57600080fd5b50565b600081359050611611816115eb565b92915050565b60006020828403121561162d5761162c611247565b5b600061163b84828501611602565b91505092915050565b600061164f8261126c565b9050919050565b61165f81611644565b811461166a57600080fd5b50565b60008135905061167c81611656565b92915050565b60008060006060848603121561169b5761169a611247565b5b60006116a986828701611602565b93505060206116ba8682870161166d565b92505060406116cb868287016112dd565b9150509250925092565b600080600080608085870312156116ef576116ee611247565b5b60006116fd878288016112dd565b945050602061170e878288016112dd565b935050604061171f878288016112dd565b9250506060611730878288016113fa565b91505092959194509250565b611745816112bc565b82525050565b6000602082019050611760600083018461173c565b92915050565b61176f8161126c565b811461177a57600080fd5b50565b60008151905061178c81611766565b92915050565b6000602082840312156117a8576117a7611247565b5b60006117b68482850161177d565b91505092915050565b6000815190506117ce816112c6565b92915050565b6000602082840312156117ea576117e9611247565b5b60006117f8848285016117bf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061183b826112bc565b9150611846836112bc565b925082820390508181111561185e5761185d611801565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061189e826112bc565b91506118a9836112bc565b9250826118b9576118b8611864565b5b828204905092915050565b60006118cf826112bc565b91506118da836112bc565b92508282026118e8816112bc565b915082820484148315176118ff576118fe611801565b5b5092915050565b6000611911826112bc565b915061191c836112bc565b925082820190508082111561193457611933611801565b5b92915050565b60008115159050919050565b61194f8161193a565b811461195a57600080fd5b50565b60008151905061196c81611946565b92915050565b60006020828403121561198857611987611247565b5b60006119968482850161195d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600067ffffffffffffffff82169050919050565b60006119ed826119ce565b91506119f8836119ce565b9250828201905067ffffffffffffffff811115611a1857611a17611801565b5b92915050565b611a278161126c565b82525050565b6000602082019050611a426000830184611a1e565b92915050565b6000611a53826112bc565b9150611a5e836112bc565b925082611a6e57611a6d611864565b5b82820690509291505056fea2646970667358221220917c2dccbd69e08fec724f3ebb7dbab1c2e5cb697e85acd7c0c6042a6a27d41b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}