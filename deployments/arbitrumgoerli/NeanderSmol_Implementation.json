{
  "address": "0x60507BbE6E7fD52Ba93243921b99bA61fD7a445D",
  "abi": [
    {
      "inputs": [],
      "name": "NotAnAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTheStakingContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenIsStaked",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FarmerSkillUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FightersSkillUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MysticsSkillUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "SmolNeanderMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "StakeState",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commonSense",
          "type": "uint256"
        }
      ],
      "name": "commonSenseUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "uriUpdate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SMOLNEANDER_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SMOLNEANDER_CONTRACT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SMOLNEANDER_DEV_GROUND_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SMOLNEANDER_OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_tokenIdTracker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "commonSense",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commonSenseMaxLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devGround",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "developFarmers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "developFighter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "developMystics",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipPublicState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCommonSense",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPrimarySkill",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "mystics",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "farmers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fighters",
              "type": "uint256"
            }
          ],
          "internalType": "struct NeanderSmol.PrimarySkill",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "grantAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devGround",
          "type": "address"
        }
      ],
      "name": "grantDevGround",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "grantOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "grantStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_contracts",
          "type": "address[]"
        }
      ],
      "name": "grantStakingContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devGround",
          "type": "address"
        }
      ],
      "name": "isDevGround",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "isStakingContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "publicMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setPublicPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "staked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "stakingHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "updateCommonSense",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x38e0f57100a7026bf82557df121417e645b00c4cd7905e91d104a09f6f167fc1",
  "receipt": {
    "to": null,
    "from": "0x45947dfDE271FDbB7759a1F71007528437682Ec2",
    "contractAddress": "0x60507BbE6E7fD52Ba93243921b99bA61fD7a445D",
    "transactionIndex": 1,
    "gasUsed": "5256860",
    "logsBloom": "0x
    "blockHash": "0x0a3a2193fda64be74dc00fc962cdff10fb8d2cce4d771cc9b23dc3ca79286fa2",
    "transactionHash": "0x38e0f57100a7026bf82557df121417e645b00c4cd7905e91d104a09f6f167fc1",
    "logs": [],
    "blockNumber": 18215429,
    "cumulativeGasUsed": "5256860",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "5a75228573ea531db0f060d86d9ccd68",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NotAnAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTheStakingContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIsStaked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FarmerSkillUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FightersSkillUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MysticsSkillUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"SmolNeanderMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"StakeState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commonSense\",\"type\":\"uint256\"}],\"name\":\"commonSenseUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"uriUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SMOLNEANDER_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SMOLNEANDER_CONTRACT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SMOLNEANDER_DEV_GROUND_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SMOLNEANDER_OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenIdTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commonSense\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commonSenseMaxLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devGround\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"developFarmers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"developFighter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"developMystics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipPublicState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCommonSense\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPrimarySkill\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mystics\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"farmers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fighters\",\"type\":\"uint256\"}],\"internalType\":\"struct NeanderSmol.PrimarySkill\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"grantAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devGround\",\"type\":\"address\"}],\"name\":\"grantDevGround\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"grantOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"grantStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contracts\",\"type\":\"address[]\"}],\"name\":\"grantStakingContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devGround\",\"type\":\"address\"}],\"name\":\"isDevGround\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"isStakingContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPublicPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"stakingHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateCommonSense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NeanderSmol.sol\":\"NeanderSmol\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x2a6a0b9fd2d316dcb4141159a9d13be92654066d6c0ae92757ed908ecdfecff0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x2c98457c4171d86094adf9a4fd8cd2402b7e3e309e961f07910a60a576dd100f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProofUpgradeable {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1741ea24897cdf435d3a476e9d9280b8be58a435dacb6997d54a2aa657446e5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/ContractControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\nerror NotAnAdmin();\\nerror NotTheOwner();\\nerror NotAuthorized();\\nerror NotTheStakingContract();\\n\\nabstract contract ContractControl is AccessControlUpgradeable {\\n    bytes32 public constant SMOLNEANDER_OWNER_ROLE =\\n        keccak256(\\\"SMOLNEANDER_OWNER_ROLE\\\");\\n    bytes32 public constant SMOLNEANDER_DEV_GROUND_ROLE =\\n        keccak256(\\\"SMOLNEANDER_DEV_GROUND_ROLE\\\");\\n    bytes32 public constant SMOLNEANDER_CONTRACT_ROLE =\\n        keccak256(\\\"SMOLNEANDER_CONTRACT_ROLE\\\");\\n    bytes32 public constant SMOLNEANDER_ADMIN_ROLE =\\n        keccak256(\\\"SMOLNEANDER_ADMIN_ROLE\\\");\\n\\n    modifier onlyDevGround() {\\n        if (!isDevGround(msg.sender)) revert NotAuthorized();\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        if (!isOwner(_msgSender())) revert NotTheOwner();\\n        _;\\n    }\\n\\n    modifier onlyStakingContract() {\\n        if (!isStakingContract(_msgSender())) revert NotTheStakingContract();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!isAdmin(_msgSender())) revert NotAnAdmin();\\n        _;\\n    }\\n\\n    function initializeAccess() public onlyInitializing {\\n        __AccessControl_init();\\n        _setRoleAdmin(SMOLNEANDER_OWNER_ROLE, SMOLNEANDER_OWNER_ROLE);\\n        _setRoleAdmin(SMOLNEANDER_CONTRACT_ROLE, SMOLNEANDER_OWNER_ROLE);\\n        _setRoleAdmin(SMOLNEANDER_DEV_GROUND_ROLE, SMOLNEANDER_OWNER_ROLE);\\n\\n        _setRoleAdmin(SMOLNEANDER_ADMIN_ROLE, SMOLNEANDER_OWNER_ROLE);\\n\\n        _setupRole(SMOLNEANDER_OWNER_ROLE, _msgSender());\\n        _setupRole(SMOLNEANDER_CONTRACT_ROLE, _msgSender());\\n        _setupRole(SMOLNEANDER_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    function grantStakingContracts(address[] calldata _contracts) external {\\n        for (uint256 i; i < _contracts.length; ++i) grantStaking(_contracts[i]);\\n    }\\n\\n    function grantStaking(address _contract) public {\\n        grantRole(SMOLNEANDER_CONTRACT_ROLE, _contract);\\n    }\\n\\n    function grantDevGround(address _devGround) external {\\n        grantRole(SMOLNEANDER_DEV_GROUND_ROLE, _devGround);\\n    }\\n\\n    function isDevGround(address _devGround) public view returns (bool) {\\n        return hasRole(SMOLNEANDER_DEV_GROUND_ROLE, _devGround);\\n    }\\n\\n    function isStakingContract(address _contract) public view returns (bool) {\\n        return hasRole(SMOLNEANDER_CONTRACT_ROLE, _contract);\\n    }\\n\\n    function grantOwner(address _owner) external {\\n        grantRole(SMOLNEANDER_OWNER_ROLE, _owner);\\n    }\\n\\n    function isOwner(address _owner) public view returns (bool) {\\n        return hasRole(SMOLNEANDER_OWNER_ROLE, _owner);\\n    }\\n\\n    function grantAdmin(address _admin) external {\\n        grantRole(SMOLNEANDER_ADMIN_ROLE, _admin);\\n    }\\n\\n    function isAdmin(address _admin) public view returns (bool) {\\n        return hasRole(SMOLNEANDER_ADMIN_ROLE, _admin);\\n    }\\n}\\n\",\"keccak256\":\"0x7735d3b3008affcd19ee9876dc9685e410f51928ba373aca041c64e59ec913b9\",\"license\":\"MIT\"},\"contracts/NeanderSmol.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.13;\\n\\nimport \\\"./ContractControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/MerkleProofUpgradeable.sol\\\";\\n\\nerror TokenIsStaked();\\n\\ncontract NeanderSmol is ContractControl, ERC721EnumerableUpgradeable {\\n    using StringsUpgradeable for uint256;\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    uint256 constant TOTAL_SUPPLY = 5678;\\n\\n    CountersUpgradeable.Counter public _tokenIdTracker;\\n\\n    string public baseURI;\\n\\n    uint256 public decimals;\\n    uint256 public commonSenseMaxLevel;\\n\\n    bool public publicActive;\\n    uint256 public publicPrice;\\n\\n    bool private revealed;\\n\\n    IERC20 private magic;\\n\\n    address public devGround;\\n\\n    struct PrimarySkill {\\n        uint256 mystics;\\n        uint256 farmers;\\n        uint256 fighters;\\n    }\\n\\n    mapping(uint256 => PrimarySkill) private tokenToSkill;\\n    mapping(uint256 => bool) public staked;\\n    mapping(uint256 => uint256) public commonSense;\\n\\n    mapping(address => bool) private minted;\\n    mapping(address => uint256) private publicMinted;\\n\\n    event SmolNeanderMint(address to, uint256 tokenId);\\n\\n    event uriUpdate(string newURI);\\n\\n    event commonSenseUpdated(uint256 tokenId, uint256 commonSense);\\n\\n    function initialize() public initializer {\\n        __ERC721_init(\\\"Neander Smol\\\", \\\"NeanderSmol\\\");\\n        ContractControl.initializeAccess();\\n        decimals = 9;\\n        commonSenseMaxLevel = 100 * (10 ** decimals);\\n        publicActive = false;\\n        publicPrice = 0.02 ether;\\n        revealed = true;\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        override(ERC721EnumerableUpgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            ERC721EnumerableUpgradeable.supportsInterface(interfaceId) ||\\n            AccessControlUpgradeable.supportsInterface(interfaceId);\\n    }\\n\\n    function publicMint(uint256 amount) external payable {\\n        require(msg.value >= publicPrice * amount, \\\"Incorrect Price\\\");\\n        require(publicActive, \\\"Public not active\\\");\\n        require(_tokenIdTracker.current() < TOTAL_SUPPLY, \\\"5678 Max Supply\\\");\\n        require(publicMinted[msg.sender] + amount <= 30, \\\"Mints exceeded\\\");\\n        publicMinted[msg.sender] += amount;\\n\\n        for (uint256 i = 0; i < amount; i++) {\\n            _mint(msg.sender);\\n        }\\n    }\\n\\n    function _mint(address _to) internal {\\n        uint256 _tokenId = _tokenIdTracker.current();\\n        _tokenIdTracker.increment();\\n        require(_tokenId <= TOTAL_SUPPLY, \\\"Exceeded supply\\\");\\n\\n        emit SmolNeanderMint(_to, _tokenId);\\n        _safeMint(_to, _tokenId);\\n    }\\n\\n    function updateCommonSense(\\n        uint256 _tokenId,\\n        uint256 amount\\n    ) external onlyOwner {\\n        if (commonSense[_tokenId] + amount >= commonSenseMaxLevel) {\\n            commonSense[_tokenId] = commonSenseMaxLevel;\\n        } else {\\n            commonSense[_tokenId] += amount;\\n        }\\n\\n        emit commonSenseUpdated(_tokenId, commonSense[_tokenId]);\\n    }\\n\\n    function developMystics(\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) external onlyDevGround {\\n        tokenToSkill[_tokenId].mystics += _amount;\\n        emit MysticsSkillUpdated(_tokenId, _amount);\\n    }\\n\\n    function developFarmers(\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) external onlyDevGround {\\n        tokenToSkill[_tokenId].farmers += _amount;\\n        emit FarmerSkillUpdated(_tokenId, _amount);\\n    }\\n\\n    function developFighter(\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) external onlyDevGround {\\n        tokenToSkill[_tokenId].fighters += _amount;\\n        emit FightersSkillUpdated(_tokenId, _amount);\\n    }\\n\\n    function stakingHandler(\\n        uint256 _tokenId,\\n        bool _state\\n    ) external onlyStakingContract {\\n        staked[_tokenId] = _state;\\n        emit StakeState(_tokenId, _state);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _firstTokenId,\\n        uint256 _batchSize\\n    ) internal virtual override {\\n        if (staked[_firstTokenId]) revert TokenIsStaked();\\n        super._beforeTokenTransfer(_from, _to, _firstTokenId, _batchSize);\\n    }\\n\\n    function getCommonSense(uint256 _tokenId) external view returns (uint256) {\\n        return commonSense[_tokenId] / (10 ** decimals);\\n    }\\n\\n    function getPrimarySkill(\\n        uint256 _tokenId\\n    ) external view returns (PrimarySkill memory) {\\n        return tokenToSkill[_tokenId];\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function setBaseURI(string memory newBaseURI) external onlyAdmin {\\n        baseURI = newBaseURI;\\n        emit uriUpdate(newBaseURI);\\n    }\\n\\n    function flipPublicState() external onlyAdmin {\\n        publicActive = !publicActive;\\n    }\\n\\n    function setPublicPrice(uint256 amount) external onlyAdmin {\\n        publicPrice = amount;\\n    }\\n\\n    function tokenURI(\\n        uint256 /*tokenId*/\\n    ) public view virtual override returns (string memory) {\\n        return \\\"ipfs://QmUZvuiDzeKvKCeizPVKoWesrpGTfy4Ysf3rzgSAps7N9K\\\";\\n    }\\n\\n    function withdrawAll() external onlyOwner {\\n        require(payable(msg.sender).send(address(this).balance));\\n        require(magic.transfer(msg.sender, magic.balanceOf(address(this))));\\n    }\\n\\n    event StakeState(uint256 indexed tokenId, bool state);\\n    event MysticsSkillUpdated(uint256 indexed tokenId, uint256 indexed amount);\\n    event FarmerSkillUpdated(uint256 indexed tokenId, uint256 indexed amount);\\n    event FightersSkillUpdated(uint256 indexed tokenId, uint256 indexed amount);\\n}\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xaf618522d5ae80ec7a3c3a812aa4cf7c1ab880c174c58e773c14607e04254bba\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615e9580620000216000396000f3fe6080604052600436106103815760003560e01c80635e1bef32116101d1578063a22cb46511610102578063c87b56dd116100a0578063e0c505771161006f578063e0c5057714610d33578063e985e9c514610d5c578063ec95461e14610d99578063f822a5b214610dc457610381565b8063c87b56dd14610c79578063cf1c7d8414610cb6578063d547741f14610ce1578063dc97805914610d0a57610381565b8063b8673a3f116100dc578063b8673a3f14610bd1578063b88d4fde14610bfc578063c1c4db7f14610c25578063c627525514610c5057610381565b8063a22cb46514610b52578063a945bf8014610b7b578063b6ddc8a114610ba657610381565b8063853828b61161016f57806391d148541161014957806391d1485414610a9457806395d89b4114610ad157806398bcede914610afc578063a217fddf14610b2757610381565b8063853828b614610a29578063882b180814610a405780638dd919bb14610a5757610381565b80636c0360eb116101ab5780636c0360eb1461098157806370a08231146109ac578063743f4e94146109e95780638129fc1c14610a1257610381565b80635e1bef32146108ca57806362cd8ade146109075780636352211e1461094457610381565b80632a25e57c116102b657806336568abe1161025457806342842e0e1161022357806342842e0e14610812578063458b43361461083b5780634f6ccce71461086457806355f804b3146108a157610381565b806336568abe1461076a57806337bf06a6146107935780633f2981cf146107bc57806341754c57146107e757610381565b80632f54bf6e116102905780632f54bf6e1461069c5780632f745c59146106d9578063313ce5671461071657806335bb3e161461074157610381565b80632a25e57c1461062e5780632db11544146106575780632f2ff15d1461067357610381565b806323b872dd116103235780632548b9b0116102fd5780632548b9b014610588578063261b2fda1461059f57806329eef985146105c85780632a1f4146146105f157610381565b806323b872dd146104e5578063248a9ca31461050e57806324d7806c1461054b57610381565b806306fdde031161035f57806306fdde0314610429578063081812fc14610454578063095ea7b31461049157806318160ddd146104ba57610381565b806301ffc9a714610386578063067ea392146103c357806306df2719146103ec575b600080fd5b34801561039257600080fd5b506103ad60048036038101906103a8919061428d565b610e01565b6040516103ba91906142d5565b60405180910390f35b3480156103cf57600080fd5b506103ea60048036038101906103e59190614326565b610e23565b005b3480156103f857600080fd5b50610413600480360381019061040e91906143c4565b610ec2565b60405161042091906142d5565b60405180910390f35b34801561043557600080fd5b5061043e610ef5565b60405161044b919061448a565b60405180910390f35b34801561046057600080fd5b5061047b600480360381019061047691906144ac565b610f87565b60405161048891906144e8565b60405180910390f35b34801561049d57600080fd5b506104b860048036038101906104b39190614503565b610fcd565b005b3480156104c657600080fd5b506104cf6110e4565b6040516104dc9190614552565b60405180910390f35b3480156104f157600080fd5b5061050c6004803603810190610507919061456d565b6110f1565b005b34801561051a57600080fd5b50610535600480360381019061053091906145f6565b611151565b6040516105429190614632565b60405180910390f35b34801561055757600080fd5b50610572600480360381019061056d91906143c4565b611171565b60405161057f91906142d5565b60405180910390f35b34801561059457600080fd5b5061059d6111a4565b005b3480156105ab57600080fd5b506105c660048036038101906105c19190614326565b611397565b005b3480156105d457600080fd5b506105ef60048036038101906105ea91906146b2565b6114a2565b005b3480156105fd57600080fd5b50610618600480360381019061061391906144ac565b6114f6565b6040516106259190614750565b60405180910390f35b34801561063a57600080fd5b50610655600480360381019061065091906143c4565b611542565b005b610671600480360381019061066c91906144ac565b61156f565b005b34801561067f57600080fd5b5061069a6004803603810190610695919061476b565b61176d565b005b3480156106a857600080fd5b506106c360048036038101906106be91906143c4565b61178e565b6040516106d091906142d5565b60405180910390f35b3480156106e557600080fd5b5061070060048036038101906106fb9190614503565b6117c1565b60405161070d9190614552565b60405180910390f35b34801561072257600080fd5b5061072b611866565b6040516107389190614552565b60405180910390f35b34801561074d57600080fd5b50610768600480360381019061076391906143c4565b61186c565b005b34801561077657600080fd5b50610791600480360381019061078c919061476b565b611899565b005b34801561079f57600080fd5b506107ba60048036038101906107b591906147d7565b61191c565b005b3480156107c857600080fd5b506107d16119ca565b6040516107de91906142d5565b60405180910390f35b3480156107f357600080fd5b506107fc6119dd565b6040516108099190614552565b60405180910390f35b34801561081e57600080fd5b506108396004803603810190610834919061456d565b6119e3565b005b34801561084757600080fd5b50610862600480360381019061085d91906143c4565b611a03565b005b34801561087057600080fd5b5061088b600480360381019061088691906144ac565b611a2f565b6040516108989190614552565b60405180910390f35b3480156108ad57600080fd5b506108c860048036038101906108c39190614947565b611aa0565b005b3480156108d657600080fd5b506108f160048036038101906108ec91906144ac565b611b37565b6040516108fe91906142d5565b60405180910390f35b34801561091357600080fd5b5061092e600480360381019061092991906143c4565b611b58565b60405161093b91906142d5565b60405180910390f35b34801561095057600080fd5b5061096b600480360381019061096691906144ac565b611b8a565b60405161097891906144e8565b60405180910390f35b34801561098d57600080fd5b50610996611c10565b6040516109a3919061448a565b60405180910390f35b3480156109b857600080fd5b506109d360048036038101906109ce91906143c4565b611c9e565b6040516109e09190614552565b60405180910390f35b3480156109f557600080fd5b50610a106004803603810190610a0b9190614326565b611d55565b005b348015610a1e57600080fd5b50610a27611df4565b005b348015610a3557600080fd5b50610a3e612015565b005b348015610a4c57600080fd5b50610a556121e1565b005b348015610a6357600080fd5b50610a7e6004803603810190610a7991906144ac565b612253565b604051610a8b9190614552565b60405180910390f35b348015610aa057600080fd5b50610abb6004803603810190610ab6919061476b565b61226c565b604051610ac891906142d5565b60405180910390f35b348015610add57600080fd5b50610ae66122d7565b604051610af3919061448a565b60405180910390f35b348015610b0857600080fd5b50610b11612369565b604051610b1e9190614552565b60405180910390f35b348015610b3357600080fd5b50610b3c612375565b604051610b499190614632565b60405180910390f35b348015610b5e57600080fd5b50610b796004803603810190610b749190614990565b61237c565b005b348015610b8757600080fd5b50610b90612392565b604051610b9d9190614552565b60405180910390f35b348015610bb257600080fd5b50610bbb612399565b604051610bc891906144e8565b60405180910390f35b348015610bdd57600080fd5b50610be66123c0565b604051610bf39190614632565b60405180910390f35b348015610c0857600080fd5b50610c236004803603810190610c1e9190614a71565b6123e3565b005b348015610c3157600080fd5b50610c3a612445565b604051610c479190614632565b60405180910390f35b348015610c5c57600080fd5b50610c776004803603810190610c7291906144ac565b612469565b005b348015610c8557600080fd5b50610ca06004803603810190610c9b91906144ac565b6124ba565b604051610cad919061448a565b60405180910390f35b348015610cc257600080fd5b50610ccb6124dc565b604051610cd89190614632565b60405180910390f35b348015610ced57600080fd5b50610d086004803603810190610d03919061476b565b612500565b005b348015610d1657600080fd5b50610d316004803603810190610d2c91906143c4565b612521565b005b348015610d3f57600080fd5b50610d5a6004803603810190610d559190614326565b61254e565b005b348015610d6857600080fd5b50610d836004803603810190610d7e9190614af4565b6125ed565b604051610d9091906142d5565b60405180910390f35b348015610da557600080fd5b50610dae612681565b604051610dbb9190614632565b60405180910390f35b348015610dd057600080fd5b50610deb6004803603810190610de691906144ac565b6126a5565b604051610df89190614552565b60405180910390f35b6000610e0c826126dc565b80610e1c5750610e1b82612756565b5b9050919050565b610e2c33611b58565b610e62576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061010360008481526020019081526020016000206001016000828254610e899190614b63565b9250508190555080827f46aff80f5a0f8e2858db912b4f55d84a73e02bcf0db483da3113e39f4d61800360405160405180910390a35050565b6000610eee7fa619569270f7f4a1d8f7ed82794221f15c6f8595dada80d85ac4e31cdd6fe04c8361226c565b9050919050565b606060978054610f0490614be8565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3090614be8565b8015610f7d5780601f10610f5257610100808354040283529160200191610f7d565b820191906000526020600020905b815481529060010190602001808311610f6057829003601f168201915b5050505050905090565b6000610f92826127d0565b609b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610fd882611b8a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103f90614c8b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661106761281b565b73ffffffffffffffffffffffffffffffffffffffff16148061109657506110958161109061281b565b6125ed565b5b6110d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cc90614d1d565b60405180910390fd5b6110df8383612823565b505050565b600060cb80549050905090565b6111026110fc61281b565b826128dc565b611141576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113890614daf565b60405180910390fd5b61114c838383612971565b505050565b600060656000838152602001908152602001600020600101549050919050565b600061119d7f3b351bd1fe2dfe571b64d5c9adc99cfeeccb1e4f46d0485613dcb1ff87242f4d8361226c565b9050919050565b600060019054906101000a900460ff166111f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ea90614e41565b60405180910390fd5b6111fb612c6a565b6112257f9aa77ce78f008f23606e6755d96256721080001bc839bd46f3566a5b8e3f318880612cbb565b61126f7fa619569270f7f4a1d8f7ed82794221f15c6f8595dada80d85ac4e31cdd6fe04c7f9aa77ce78f008f23606e6755d96256721080001bc839bd46f3566a5b8e3f3188612cbb565b6112b87ee9ab62a5761636687b05e2e7b04f22689d99792df38552d31664fa3f9584097f9aa77ce78f008f23606e6755d96256721080001bc839bd46f3566a5b8e3f3188612cbb565b6113027f3b351bd1fe2dfe571b64d5c9adc99cfeeccb1e4f46d0485613dcb1ff87242f4d7f9aa77ce78f008f23606e6755d96256721080001bc839bd46f3566a5b8e3f3188612cbb565b6113337f9aa77ce78f008f23606e6755d96256721080001bc839bd46f3566a5b8e3f318861132e61281b565b612d17565b6113647fa619569270f7f4a1d8f7ed82794221f15c6f8595dada80d85ac4e31cdd6fe04c61135f61281b565b612d17565b6113957f3b351bd1fe2dfe571b64d5c9adc99cfeeccb1e4f46d0485613dcb1ff87242f4d61139061281b565b612d17565b565b6113a76113a261281b565b61178e565b6113dd576040517f36b6b89500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60fe54816101056000858152602001908152602001600020546114009190614b63565b106114255760fe54610105600084815260200190815260200160002081905550611451565b80610105600084815260200190815260200160002060008282546114499190614b63565b925050819055505b7f78ebbea0f2bcf8b35cdcad5cb93b4c13bc6d80b2e6ec67dfc1cfc85db8ddaeb182610105600085815260200190815260200160002054604051611496929190614e61565b60405180910390a15050565b60005b828290508110156114f1576114e08383838181106114c6576114c5614e8a565b5b90506020020160208101906114db91906143c4565b611542565b806114ea90614eb9565b90506114a5565b505050565b6114fe61415d565b610103600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b61156c7fa619569270f7f4a1d8f7ed82794221f15c6f8595dada80d85ac4e31cdd6fe04c8261176d565b50565b806101005461157e9190614f01565b3410156115c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b790614fa7565b60405180910390fd5b60ff60009054906101000a900460ff1661160f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160690615013565b60405180910390fd5b61162e61161c60fb612d25565b1061165c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116539061507f565b60405180910390fd5b601e8161010760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116aa9190614b63565b11156116eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e2906150eb565b60405180910390fd5b8061010760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461173b9190614b63565b9250508190555060005b818110156117695761175633612d33565b808061176190614eb9565b915050611745565b5050565b61177682611151565b61177f81612dd7565b6117898383612deb565b505050565b60006117ba7f9aa77ce78f008f23606e6755d96256721080001bc839bd46f3566a5b8e3f31888361226c565b9050919050565b60006117cc83611c9e565b821061180d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118049061517d565b60405180910390fd5b60c960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60fd5481565b6118967f3b351bd1fe2dfe571b64d5c9adc99cfeeccb1e4f46d0485613dcb1ff87242f4d8261176d565b50565b6118a161281b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461190e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119059061520f565b60405180910390fd5b6119188282612ecc565b5050565b61192c61192761281b565b610ec2565b611962576040517fcc8576e900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80610104600084815260200190815260200160002060006101000a81548160ff021916908315150217905550817fa95329310e1e9618d3340bf022b833c8cc09e95e9fa8b248d36dd3bdad7df5aa826040516119be91906142d5565b60405180910390a25050565b60ff60009054906101000a900460ff1681565b60fe5481565b6119fe838383604051806020016040528060008152506123e3565b505050565b611a2c7ee9ab62a5761636687b05e2e7b04f22689d99792df38552d31664fa3f9584098261176d565b50565b6000611a396110e4565b8210611a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a71906152a1565b60405180910390fd5b60cb8281548110611a8e57611a8d614e8a565b5b90600052602060002001549050919050565b611ab0611aab61281b565b611171565b611ae6576040517f55098f2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060fc9080519060200190611afc92919061417e565b507fb7dc3d82553f66494744771504119d99246c225f02cb0aec4e13b7be3bfc88bb81604051611b2c919061448a565b60405180910390a150565b6101046020528060005260406000206000915054906101000a900460ff1681565b6000611b837ee9ab62a5761636687b05e2e7b04f22689d99792df38552d31664fa3f9584098361226c565b9050919050565b600080611b9683612fae565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfe9061530d565b60405180910390fd5b80915050919050565b60fc8054611c1d90614be8565b80601f0160208091040260200160405190810160405280929190818152602001828054611c4990614be8565b8015611c965780601f10611c6b57610100808354040283529160200191611c96565b820191906000526020600020905b815481529060010190602001808311611c7957829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d059061539f565b60405180910390fd5b609a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611d5e33611b58565b611d94576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061010360008481526020019081526020016000206000016000828254611dbb9190614b63565b9250508190555080827fe35569cc02c4dbfef78de8b7236cf1da89364a064bebc436c0e50538433326ae60405160405180910390a35050565b60008060019054906101000a900460ff16159050808015611e255750600160008054906101000a900460ff1660ff16105b80611e525750611e3430612feb565b158015611e515750600160008054906101000a900460ff1660ff16145b5b611e91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8890615431565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611ece576001600060016101000a81548160ff0219169083151502179055505b611f426040518060400160405280600c81526020017f4e65616e64657220536d6f6c00000000000000000000000000000000000000008152506040518060400160405280600b81526020017f4e65616e646572536d6f6c00000000000000000000000000000000000000000081525061300e565b611f4a6111a4565b600960fd8190555060fd54600a611f619190615584565b6064611f6d9190614f01565b60fe81905550600060ff60006101000a81548160ff02191690831515021790555066470de4df82000061010081905550600161010160006101000a81548160ff02191690831515021790555080156120125760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516120099190615621565b60405180910390a15b50565b61202561202061281b565b61178e565b61205b576040517f36b6b89500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505061209957600080fd5b61010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3361010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161213591906144e8565b602060405180830381865afa158015612152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121769190615651565b6040518363ffffffff1660e01b815260040161219392919061567e565b6020604051808303816000875af11580156121b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d691906156bc565b6121df57600080fd5b565b6121f16121ec61281b565b611171565b612227576040517f55098f2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff60009054906101000a900460ff161560ff60006101000a81548160ff021916908315150217905550565b6101056020528060005260406000206000915090505481565b60006065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6060609880546122e690614be8565b80601f016020809104026020016040519081016040528092919081815260200182805461231290614be8565b801561235f5780601f106123345761010080835404028352916020019161235f565b820191906000526020600020905b81548152906001019060200180831161234257829003601f168201915b5050505050905090565b60fb8060000154905081565b6000801b81565b61238e61238761281b565b838361306b565b5050565b6101005481565b61010260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7ee9ab62a5761636687b05e2e7b04f22689d99792df38552d31664fa3f95840981565b6123f46123ee61281b565b836128dc565b612433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242a90614daf565b60405180910390fd5b61243f848484846131d7565b50505050565b7fa619569270f7f4a1d8f7ed82794221f15c6f8595dada80d85ac4e31cdd6fe04c81565b61247961247461281b565b611171565b6124af576040517f55098f2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806101008190555050565b6060604051806060016040528060358152602001615e2b603591399050919050565b7f3b351bd1fe2dfe571b64d5c9adc99cfeeccb1e4f46d0485613dcb1ff87242f4d81565b61250982611151565b61251281612dd7565b61251c8383612ecc565b505050565b61254b7f9aa77ce78f008f23606e6755d96256721080001bc839bd46f3566a5b8e3f31888261176d565b50565b61255733611b58565b61258d576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80610103600084815260200190815260200160002060020160008282546125b49190614b63565b9250508190555080827fe852686fc3379988351fab3924b8412a69b0f884879d23a989640c46daca203060405160405180910390a35050565b6000609c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f9aa77ce78f008f23606e6755d96256721080001bc839bd46f3566a5b8e3f318881565b600060fd54600a6126b69190615584565b6101056000848152602001908152602001600020546126d59190615718565b9050919050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061274f575061274e82613233565b5b9050919050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806127c957506127c882613315565b5b9050919050565b6127d98161337f565b612818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280f9061530d565b60405180910390fd5b50565b600033905090565b81609b600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661289683611b8a565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806128e883611b8a565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061292a575061292981856125ed565b5b8061296857508373ffffffffffffffffffffffffffffffffffffffff1661295084610f87565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661299182611b8a565b73ffffffffffffffffffffffffffffffffffffffff16146129e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129de906157bb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a4d9061584d565b60405180910390fd5b612a6383838360016133c0565b8273ffffffffffffffffffffffffffffffffffffffff16612a8382611b8a565b73ffffffffffffffffffffffffffffffffffffffff1614612ad9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ad0906157bb565b60405180910390fd5b609b600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001609a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001609a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816099600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612c65838383600161342b565b505050565b600060019054906101000a900460ff16612cb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cb090614e41565b60405180910390fd5b565b6000612cc683611151565b90508160656000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b612d218282612deb565b5050565b600081600001549050919050565b6000612d3f60fb612d25565b9050612d4b60fb613431565b61162e811115612d90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d87906158b9565b60405180910390fd5b7f13d0c6609c1489bff1e3c88b5ad19c5647fe75c23c7ab35e81f04afdce4f95648282604051612dc192919061567e565b60405180910390a1612dd38282613447565b5050565b612de881612de361281b565b613465565b50565b612df5828261226c565b612ec85760016065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612e6d61281b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b612ed6828261226c565b15612faa5760006065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612f4f61281b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60006099600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661305d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161305490614e41565b60405180910390fd5b61306782826134ea565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036130d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130d090615925565b60405180910390fd5b80609c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516131ca91906142d5565b60405180910390a3505050565b6131e2848484612971565b6131ee8484848461356b565b61322d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613224906159b7565b60405180910390fd5b50505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806132fe57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061330e575061330d82612756565b5b9050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166133a183612fae565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b610104600083815260200190815260200160002060009054906101000a900460ff1615613419576040517f3899ae3600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b613425848484846136f2565b50505050565b50505050565b6001816000016000828254019250508190555050565b613461828260405180602001604052806000815250613850565b5050565b61346f828261226c565b6134e65761347c816138ab565b61348a8360001c60206138d8565b60405160200161349b929190615aab565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134dd919061448a565b60405180910390fd5b5050565b600060019054906101000a900460ff16613539576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161353090614e41565b60405180910390fd5b816097908051906020019061354f92919061417e565b50806098908051906020019061356692919061417e565b505050565b600061358c8473ffffffffffffffffffffffffffffffffffffffff16612feb565b156136e5578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026135b561281b565b8786866040518563ffffffff1660e01b81526004016135d79493929190615b3a565b6020604051808303816000875af192505050801561361357506040513d601f19601f820116820180604052508101906136109190615b9b565b60015b613695573d8060008114613643576040519150601f19603f3d011682016040523d82523d6000602084013e613648565b606091505b50600081510361368d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613684906159b7565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506136ea565b600190505b949350505050565b6136fe84848484613b14565b6001811115613742576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161373990615c3a565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036137895761378481613c3a565b6137c8565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146137c7576137c68582613c83565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361380a5761380581613df0565b613849565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614613848576138478482613ec1565b5b5b5050505050565b61385a8383613f40565b613867600084848461356b565b6138a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161389d906159b7565b60405180910390fd5b505050565b60606138d18273ffffffffffffffffffffffffffffffffffffffff16601460ff166138d8565b9050919050565b6060600060028360026138eb9190614f01565b6138f59190614b63565b67ffffffffffffffff81111561390e5761390d61481c565b5b6040519080825280601f01601f1916602001820160405280156139405781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061397857613977614e8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106139dc576139db614e8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002613a1c9190614f01565b613a269190614b63565b90505b6001811115613ac6577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110613a6857613a67614e8a565b5b1a60f81b828281518110613a7f57613a7e614e8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080613abf90615c5a565b9050613a29565b5060008414613b0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b0190615ccf565b60405180910390fd5b8091505092915050565b6001811115613c3457600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614613ba85780609a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613ba09190615cef565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614613c335780609a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613c2b9190614b63565b925050819055505b5b50505050565b60cb8054905060cc60008381526020019081526020016000208190555060cb81908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001613c9084611c9e565b613c9a9190615cef565b9050600060ca6000848152602001908152602001600020549050818114613d7f57600060c960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205490508060c960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020819055508160ca600083815260200190815260200160002081905550505b60ca60008481526020019081526020016000206000905560c960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160cb80549050613e049190615cef565b9050600060cc6000848152602001908152602001600020549050600060cb8381548110613e3457613e33614e8a565b5b906000526020600020015490508060cb8381548110613e5657613e55614e8a565b5b90600052602060002001819055508160cc60008381526020019081526020016000208190555060cc60008581526020019081526020016000206000905560cb805480613ea557613ea4615d23565b5b6001900381819060005260206000200160009055905550505050565b6000613ecc83611c9e565b90508160c960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020819055508060ca600084815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603613faf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613fa690615d9e565b60405180910390fd5b613fb88161337f565b15613ff8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613fef90615e0a565b60405180910390fd5b6140066000838360016133c0565b61400f8161337f565b1561404f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161404690615e0a565b60405180910390fd5b6001609a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816099600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461415960008383600161342b565b5050565b60405180606001604052806000815260200160008152602001600081525090565b82805461418a90614be8565b90600052602060002090601f0160209004810192826141ac57600085556141f3565b82601f106141c557805160ff19168380011785556141f3565b828001600101855582156141f3579182015b828111156141f25782518255916020019190600101906141d7565b5b5090506142009190614204565b5090565b5b8082111561421d576000816000905550600101614205565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61426a81614235565b811461427557600080fd5b50565b60008135905061428781614261565b92915050565b6000602082840312156142a3576142a261422b565b5b60006142b184828501614278565b91505092915050565b60008115159050919050565b6142cf816142ba565b82525050565b60006020820190506142ea60008301846142c6565b92915050565b6000819050919050565b614303816142f0565b811461430e57600080fd5b50565b600081359050614320816142fa565b92915050565b6000806040838503121561433d5761433c61422b565b5b600061434b85828601614311565b925050602061435c85828601614311565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061439182614366565b9050919050565b6143a181614386565b81146143ac57600080fd5b50565b6000813590506143be81614398565b92915050565b6000602082840312156143da576143d961422b565b5b60006143e8848285016143af565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561442b578082015181840152602081019050614410565b8381111561443a576000848401525b50505050565b6000601f19601f8301169050919050565b600061445c826143f1565b61446681856143fc565b935061447681856020860161440d565b61447f81614440565b840191505092915050565b600060208201905081810360008301526144a48184614451565b905092915050565b6000602082840312156144c2576144c161422b565b5b60006144d084828501614311565b91505092915050565b6144e281614386565b82525050565b60006020820190506144fd60008301846144d9565b92915050565b6000806040838503121561451a5761451961422b565b5b6000614528858286016143af565b925050602061453985828601614311565b9150509250929050565b61454c816142f0565b82525050565b60006020820190506145676000830184614543565b92915050565b6000806000606084860312156145865761458561422b565b5b6000614594868287016143af565b93505060206145a5868287016143af565b92505060406145b686828701614311565b9150509250925092565b6000819050919050565b6145d3816145c0565b81146145de57600080fd5b50565b6000813590506145f0816145ca565b92915050565b60006020828403121561460c5761460b61422b565b5b600061461a848285016145e1565b91505092915050565b61462c816145c0565b82525050565b60006020820190506146476000830184614623565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126146725761467161464d565b5b8235905067ffffffffffffffff81111561468f5761468e614652565b5b6020830191508360208202830111156146ab576146aa614657565b5b9250929050565b600080602083850312156146c9576146c861422b565b5b600083013567ffffffffffffffff8111156146e7576146e6614230565b5b6146f38582860161465c565b92509250509250929050565b614708816142f0565b82525050565b60608201600082015161472460008501826146ff565b50602082015161473760208501826146ff565b50604082015161474a60408501826146ff565b50505050565b6000606082019050614765600083018461470e565b92915050565b600080604083850312156147825761478161422b565b5b6000614790858286016145e1565b92505060206147a1858286016143af565b9150509250929050565b6147b4816142ba565b81146147bf57600080fd5b50565b6000813590506147d1816147ab565b92915050565b600080604083850312156147ee576147ed61422b565b5b60006147fc85828601614311565b925050602061480d858286016147c2565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61485482614440565b810181811067ffffffffffffffff821117156148735761487261481c565b5b80604052505050565b6000614886614221565b9050614892828261484b565b919050565b600067ffffffffffffffff8211156148b2576148b161481c565b5b6148bb82614440565b9050602081019050919050565b82818337600083830152505050565b60006148ea6148e584614897565b61487c565b90508281526020810184848401111561490657614905614817565b5b6149118482856148c8565b509392505050565b600082601f83011261492e5761492d61464d565b5b813561493e8482602086016148d7565b91505092915050565b60006020828403121561495d5761495c61422b565b5b600082013567ffffffffffffffff81111561497b5761497a614230565b5b61498784828501614919565b91505092915050565b600080604083850312156149a7576149a661422b565b5b60006149b5858286016143af565b92505060206149c6858286016147c2565b9150509250929050565b600067ffffffffffffffff8211156149eb576149ea61481c565b5b6149f482614440565b9050602081019050919050565b6000614a14614a0f846149d0565b61487c565b905082815260208101848484011115614a3057614a2f614817565b5b614a3b8482856148c8565b509392505050565b600082601f830112614a5857614a5761464d565b5b8135614a68848260208601614a01565b91505092915050565b60008060008060808587031215614a8b57614a8a61422b565b5b6000614a99878288016143af565b9450506020614aaa878288016143af565b9350506040614abb87828801614311565b925050606085013567ffffffffffffffff811115614adc57614adb614230565b5b614ae887828801614a43565b91505092959194509250565b60008060408385031215614b0b57614b0a61422b565b5b6000614b19858286016143af565b9250506020614b2a858286016143af565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614b6e826142f0565b9150614b79836142f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614bae57614bad614b34565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614c0057607f821691505b602082108103614c1357614c12614bb9565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000614c756021836143fc565b9150614c8082614c19565b604082019050919050565b60006020820190508181036000830152614ca481614c68565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000614d07603d836143fc565b9150614d1282614cab565b604082019050919050565b60006020820190508181036000830152614d3681614cfa565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000614d99602d836143fc565b9150614da482614d3d565b604082019050919050565b60006020820190508181036000830152614dc881614d8c565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614e2b602b836143fc565b9150614e3682614dcf565b604082019050919050565b60006020820190508181036000830152614e5a81614e1e565b9050919050565b6000604082019050614e766000830185614543565b614e836020830184614543565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000614ec4826142f0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614ef657614ef5614b34565b5b600182019050919050565b6000614f0c826142f0565b9150614f17836142f0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614f5057614f4f614b34565b5b828202905092915050565b7f496e636f72726563742050726963650000000000000000000000000000000000600082015250565b6000614f91600f836143fc565b9150614f9c82614f5b565b602082019050919050565b60006020820190508181036000830152614fc081614f84565b9050919050565b7f5075626c6963206e6f7420616374697665000000000000000000000000000000600082015250565b6000614ffd6011836143fc565b915061500882614fc7565b602082019050919050565b6000602082019050818103600083015261502c81614ff0565b9050919050565b7f35363738204d617820537570706c790000000000000000000000000000000000600082015250565b6000615069600f836143fc565b915061507482615033565b602082019050919050565b600060208201905081810360008301526150988161505c565b9050919050565b7f4d696e7473206578636565646564000000000000000000000000000000000000600082015250565b60006150d5600e836143fc565b91506150e08261509f565b602082019050919050565b60006020820190508181036000830152615104816150c8565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000615167602b836143fc565b91506151728261510b565b604082019050919050565b600060208201905081810360008301526151968161515a565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006151f9602f836143fc565b91506152048261519d565b604082019050919050565b60006020820190508181036000830152615228816151ec565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b600061528b602c836143fc565b91506152968261522f565b604082019050919050565b600060208201905081810360008301526152ba8161527e565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006152f76018836143fc565b9150615302826152c1565b602082019050919050565b60006020820190508181036000830152615326816152ea565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006153896029836143fc565b91506153948261532d565b604082019050919050565b600060208201905081810360008301526153b88161537c565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061541b602e836143fc565b9150615426826153bf565b604082019050919050565b6000602082019050818103600083015261544a8161540e565b9050919050565b60008160011c9050919050565b6000808291508390505b60018511156154a85780860481111561548457615483614b34565b5b60018516156154935780820291505b80810290506154a185615451565b9450615468565b94509492505050565b6000826154c1576001905061557d565b816154cf576000905061557d565b81600181146154e557600281146154ef5761551e565b600191505061557d565b60ff84111561550157615500614b34565b5b8360020a91508482111561551857615517614b34565b5b5061557d565b5060208310610133831016604e8410600b84101617156155535782820a90508381111561554e5761554d614b34565b5b61557d565b615560848484600161545e565b9250905081840481111561557757615576614b34565b5b81810290505b9392505050565b600061558f826142f0565b915061559a836142f0565b92506155c77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846154b1565b905092915050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061560b615606615601846155cf565b6155e6565b6155d9565b9050919050565b61561b816155f0565b82525050565b60006020820190506156366000830184615612565b92915050565b60008151905061564b816142fa565b92915050565b6000602082840312156156675761566661422b565b5b60006156758482850161563c565b91505092915050565b600060408201905061569360008301856144d9565b6156a06020830184614543565b9392505050565b6000815190506156b6816147ab565b92915050565b6000602082840312156156d2576156d161422b565b5b60006156e0848285016156a7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000615723826142f0565b915061572e836142f0565b92508261573e5761573d6156e9565b5b828204905092915050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006157a56025836143fc565b91506157b082615749565b604082019050919050565b600060208201905081810360008301526157d481615798565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006158376024836143fc565b9150615842826157db565b604082019050919050565b600060208201905081810360008301526158668161582a565b9050919050565b7f457863656564656420737570706c790000000000000000000000000000000000600082015250565b60006158a3600f836143fc565b91506158ae8261586d565b602082019050919050565b600060208201905081810360008301526158d281615896565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061590f6019836143fc565b915061591a826158d9565b602082019050919050565b6000602082019050818103600083015261593e81615902565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006159a16032836143fc565b91506159ac82615945565b604082019050919050565b600060208201905081810360008301526159d081615994565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000615a186017836159d7565b9150615a23826159e2565b601782019050919050565b6000615a39826143f1565b615a4381856159d7565b9350615a5381856020860161440d565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000615a956011836159d7565b9150615aa082615a5f565b601182019050919050565b6000615ab682615a0b565b9150615ac28285615a2e565b9150615acd82615a88565b9150615ad98284615a2e565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b6000615b0c82615ae5565b615b168185615af0565b9350615b2681856020860161440d565b615b2f81614440565b840191505092915050565b6000608082019050615b4f60008301876144d9565b615b5c60208301866144d9565b615b696040830185614543565b8181036060830152615b7b8184615b01565b905095945050505050565b600081519050615b9581614261565b92915050565b600060208284031215615bb157615bb061422b565b5b6000615bbf84828501615b86565b91505092915050565b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b6000615c246035836143fc565b9150615c2f82615bc8565b604082019050919050565b60006020820190508181036000830152615c5381615c17565b9050919050565b6000615c65826142f0565b915060008203615c7857615c77614b34565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000615cb96020836143fc565b9150615cc482615c83565b602082019050919050565b60006020820190508181036000830152615ce881615cac565b9050919050565b6000615cfa826142f0565b9150615d05836142f0565b925082821015615d1857615d17614b34565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000615d886020836143fc565b9150615d9382615d52565b602082019050919050565b60006020820190508181036000830152615db781615d7b565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000615df4601c836143fc565b9150615dff82615dbe565b602082019050919050565b60006020820190508181036000830152615e2381615de7565b905091905056fe697066733a2f2f516d555a767569447a654b764b4365697a50564b6f5765737270475466793459736633727a6753417073374e394ba2646970667358221220e5399c609027e21734837ccc52c6d4ed3883681b7e3db31cd548ee52a33afa0264736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106103815760003560e01c80635e1bef32116101d1578063a22cb46511610102578063c87b56dd116100a0578063e0c505771161006f578063e0c5057714610d33578063e985e9c514610d5c578063ec95461e14610d99578063f822a5b214610dc457610381565b8063c87b56dd14610c79578063cf1c7d8414610cb6578063d547741f14610ce1578063dc97805914610d0a57610381565b8063b8673a3f116100dc578063b8673a3f14610bd1578063b88d4fde14610bfc578063c1c4db7f14610c25578063c627525514610c5057610381565b8063a22cb46514610b52578063a945bf8014610b7b578063b6ddc8a114610ba657610381565b8063853828b61161016f57806391d148541161014957806391d1485414610a9457806395d89b4114610ad157806398bcede914610afc578063a217fddf14610b2757610381565b8063853828b614610a29578063882b180814610a405780638dd919bb14610a5757610381565b80636c0360eb116101ab5780636c0360eb1461098157806370a08231146109ac578063743f4e94146109e95780638129fc1c14610a1257610381565b80635e1bef32146108ca57806362cd8ade146109075780636352211e1461094457610381565b80632a25e57c116102b657806336568abe1161025457806342842e0e1161022357806342842e0e14610812578063458b43361461083b5780634f6ccce71461086457806355f804b3146108a157610381565b806336568abe1461076a57806337bf06a6146107935780633f2981cf146107bc57806341754c57146107e757610381565b80632f54bf6e116102905780632f54bf6e1461069c5780632f745c59146106d9578063313ce5671461071657806335bb3e161461074157610381565b80632a25e57c1461062e5780632db11544146106575780632f2ff15d1461067357610381565b806323b872dd116103235780632548b9b0116102fd5780632548b9b014610588578063261b2fda1461059f57806329eef985146105c85780632a1f4146146105f157610381565b806323b872dd146104e5578063248a9ca31461050e57806324d7806c1461054b57610381565b806306fdde031161035f57806306fdde0314610429578063081812fc14610454578063095ea7b31461049157806318160ddd146104ba57610381565b806301ffc9a714610386578063067ea392146103c357806306df2719146103ec575b600080fd5b34801561039257600080fd5b506103ad60048036038101906103a8919061428d565b610e01565b6040516103ba91906142d5565b60405180910390f35b3480156103cf57600080fd5b506103ea60048036038101906103e59190614326565b610e23565b005b3480156103f857600080fd5b50610413600480360381019061040e91906143c4565b610ec2565b60405161042091906142d5565b60405180910390f35b34801561043557600080fd5b5061043e610ef5565b60405161044b919061448a565b60405180910390f35b34801561046057600080fd5b5061047b600480360381019061047691906144ac565b610f87565b60405161048891906144e8565b60405180910390f35b34801561049d57600080fd5b506104b860048036038101906104b39190614503565b610fcd565b005b3480156104c657600080fd5b506104cf6110e4565b6040516104dc9190614552565b60405180910390f35b3480156104f157600080fd5b5061050c6004803603810190610507919061456d565b6110f1565b005b34801561051a57600080fd5b50610535600480360381019061053091906145f6565b611151565b6040516105429190614632565b60405180910390f35b34801561055757600080fd5b50610572600480360381019061056d91906143c4565b611171565b60405161057f91906142d5565b60405180910390f35b34801561059457600080fd5b5061059d6111a4565b005b3480156105ab57600080fd5b506105c660048036038101906105c19190614326565b611397565b005b3480156105d457600080fd5b506105ef60048036038101906105ea91906146b2565b6114a2565b005b3480156105fd57600080fd5b50610618600480360381019061061391906144ac565b6114f6565b6040516106259190614750565b60405180910390f35b34801561063a57600080fd5b50610655600480360381019061065091906143c4565b611542565b005b610671600480360381019061066c91906144ac565b61156f565b005b34801561067f57600080fd5b5061069a6004803603810190610695919061476b565b61176d565b005b3480156106a857600080fd5b506106c360048036038101906106be91906143c4565b61178e565b6040516106d091906142d5565b60405180910390f35b3480156106e557600080fd5b5061070060048036038101906106fb9190614503565b6117c1565b60405161070d9190614552565b60405180910390f35b34801561072257600080fd5b5061072b611866565b6040516107389190614552565b60405180910390f35b34801561074d57600080fd5b50610768600480360381019061076391906143c4565b61186c565b005b34801561077657600080fd5b50610791600480360381019061078c919061476b565b611899565b005b34801561079f57600080fd5b506107ba60048036038101906107b591906147d7565b61191c565b005b3480156107c857600080fd5b506107d16119ca565b6040516107de91906142d5565b60405180910390f35b3480156107f357600080fd5b506107fc6119dd565b6040516108099190614552565b60405180910390f35b34801561081e57600080fd5b506108396004803603810190610834919061456d565b6119e3565b005b34801561084757600080fd5b50610862600480360381019061085d91906143c4565b611a03565b005b34801561087057600080fd5b5061088b600480360381019061088691906144ac565b611a2f565b6040516108989190614552565b60405180910390f35b3480156108ad57600080fd5b506108c860048036038101906108c39190614947565b611aa0565b005b3480156108d657600080fd5b506108f160048036038101906108ec91906144ac565b611b37565b6040516108fe91906142d5565b60405180910390f35b34801561091357600080fd5b5061092e600480360381019061092991906143c4565b611b58565b60405161093b91906142d5565b60405180910390f35b34801561095057600080fd5b5061096b600480360381019061096691906144ac565b611b8a565b60405161097891906144e8565b60405180910390f35b34801561098d57600080fd5b50610996611c10565b6040516109a3919061448a565b60405180910390f35b3480156109b857600080fd5b506109d360048036038101906109ce91906143c4565b611c9e565b6040516109e09190614552565b60405180910390f35b3480156109f557600080fd5b50610a106004803603810190610a0b9190614326565b611d55565b005b348015610a1e57600080fd5b50610a27611df4565b005b348015610a3557600080fd5b50610a3e612015565b005b348015610a4c57600080fd5b50610a556121e1565b005b348015610a6357600080fd5b50610a7e6004803603810190610a7991906144ac565b612253565b604051610a8b9190614552565b60405180910390f35b348015610aa057600080fd5b50610abb6004803603810190610ab6919061476b565b61226c565b604051610ac891906142d5565b60405180910390f35b348015610add57600080fd5b50610ae66122d7565b604051610af3919061448a565b60405180910390f35b348015610b0857600080fd5b50610b11612369565b604051610b1e9190614552565b60405180910390f35b348015610b3357600080fd5b50610b3c612375565b604051610b499190614632565b60405180910390f35b348015610b5e57600080fd5b50610b796004803603810190610b749190614990565b61237c565b005b348015610b8757600080fd5b50610b90612392565b604051610b9d9190614552565b60405180910390f35b348015610bb257600080fd5b50610bbb612399565b604051610bc891906144e8565b60405180910390f35b348015610bdd57600080fd5b50610be66123c0565b604051610bf39190614632565b60405180910390f35b348015610c0857600080fd5b50610c236004803603810190610c1e9190614a71565b6123e3565b005b348015610c3157600080fd5b50610c3a612445565b604051610c479190614632565b60405180910390f35b348015610c5c57600080fd5b50610c776004803603810190610c7291906144ac565b612469565b005b348015610c8557600080fd5b50610ca06004803603810190610c9b91906144ac565b6124ba565b604051610cad919061448a565b60405180910390f35b348015610cc257600080fd5b50610ccb6124dc565b604051610cd89190614632565b60405180910390f35b348015610ced57600080fd5b50610d086004803603810190610d03919061476b565b612500565b005b348015610d1657600080fd5b50610d316004803603810190610d2c91906143c4565b612521565b005b348015610d3f57600080fd5b50610d5a6004803603810190610d559190614326565b61254e565b005b348015610d6857600080fd5b50610d836004803603810190610d7e9190614af4565b6125ed565b604051610d9091906142d5565b60405180910390f35b348015610da557600080fd5b50610dae612681565b604051610dbb9190614632565b60405180910390f35b348015610dd057600080fd5b50610deb6004803603810190610de691906144ac565b6126a5565b604051610df89190614552565b60405180910390f35b6000610e0c826126dc565b80610e1c5750610e1b82612756565b5b9050919050565b610e2c33611b58565b610e62576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061010360008481526020019081526020016000206001016000828254610e899190614b63565b9250508190555080827f46aff80f5a0f8e2858db912b4f55d84a73e02bcf0db483da3113e39f4d61800360405160405180910390a35050565b6000610eee7fa619569270f7f4a1d8f7ed82794221f15c6f8595dada80d85ac4e31cdd6fe04c8361226c565b9050919050565b606060978054610f0490614be8565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3090614be8565b8015610f7d5780601f10610f5257610100808354040283529160200191610f7d565b820191906000526020600020905b815481529060010190602001808311610f6057829003601f168201915b5050505050905090565b6000610f92826127d0565b609b600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610fd882611b8a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103f90614c8b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661106761281b565b73ffffffffffffffffffffffffffffffffffffffff16148061109657506110958161109061281b565b6125ed565b5b6110d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cc90614d1d565b60405180910390fd5b6110df8383612823565b505050565b600060cb80549050905090565b6111026110fc61281b565b826128dc565b611141576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113890614daf565b60405180910390fd5b61114c838383612971565b505050565b600060656000838152602001908152602001600020600101549050919050565b600061119d7f3b351bd1fe2dfe571b64d5c9adc99cfeeccb1e4f46d0485613dcb1ff87242f4d8361226c565b9050919050565b600060019054906101000a900460ff166111f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ea90614e41565b60405180910390fd5b6111fb612c6a565b6112257f9aa77ce78f008f23606e6755d96256721080001bc839bd46f3566a5b8e3f318880612cbb565b61126f7fa619569270f7f4a1d8f7ed82794221f15c6f8595dada80d85ac4e31cdd6fe04c7f9aa77ce78f008f23606e6755d96256721080001bc839bd46f3566a5b8e3f3188612cbb565b6112b87ee9ab62a5761636687b05e2e7b04f22689d99792df38552d31664fa3f9584097f9aa77ce78f008f23606e6755d96256721080001bc839bd46f3566a5b8e3f3188612cbb565b6113027f3b351bd1fe2dfe571b64d5c9adc99cfeeccb1e4f46d0485613dcb1ff87242f4d7f9aa77ce78f008f23606e6755d96256721080001bc839bd46f3566a5b8e3f3188612cbb565b6113337f9aa77ce78f008f23606e6755d96256721080001bc839bd46f3566a5b8e3f318861132e61281b565b612d17565b6113647fa619569270f7f4a1d8f7ed82794221f15c6f8595dada80d85ac4e31cdd6fe04c61135f61281b565b612d17565b6113957f3b351bd1fe2dfe571b64d5c9adc99cfeeccb1e4f46d0485613dcb1ff87242f4d61139061281b565b612d17565b565b6113a76113a261281b565b61178e565b6113dd576040517f36b6b89500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60fe54816101056000858152602001908152602001600020546114009190614b63565b106114255760fe54610105600084815260200190815260200160002081905550611451565b80610105600084815260200190815260200160002060008282546114499190614b63565b925050819055505b7f78ebbea0f2bcf8b35cdcad5cb93b4c13bc6d80b2e6ec67dfc1cfc85db8ddaeb182610105600085815260200190815260200160002054604051611496929190614e61565b60405180910390a15050565b60005b828290508110156114f1576114e08383838181106114c6576114c5614e8a565b5b90506020020160208101906114db91906143c4565b611542565b806114ea90614eb9565b90506114a5565b505050565b6114fe61415d565b610103600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b61156c7fa619569270f7f4a1d8f7ed82794221f15c6f8595dada80d85ac4e31cdd6fe04c8261176d565b50565b806101005461157e9190614f01565b3410156115c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b790614fa7565b60405180910390fd5b60ff60009054906101000a900460ff1661160f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160690615013565b60405180910390fd5b61162e61161c60fb612d25565b1061165c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116539061507f565b60405180910390fd5b601e8161010760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116aa9190614b63565b11156116eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e2906150eb565b60405180910390fd5b8061010760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461173b9190614b63565b9250508190555060005b818110156117695761175633612d33565b808061176190614eb9565b915050611745565b5050565b61177682611151565b61177f81612dd7565b6117898383612deb565b505050565b60006117ba7f9aa77ce78f008f23606e6755d96256721080001bc839bd46f3566a5b8e3f31888361226c565b9050919050565b60006117cc83611c9e565b821061180d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118049061517d565b60405180910390fd5b60c960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b60fd5481565b6118967f3b351bd1fe2dfe571b64d5c9adc99cfeeccb1e4f46d0485613dcb1ff87242f4d8261176d565b50565b6118a161281b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461190e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119059061520f565b60405180910390fd5b6119188282612ecc565b5050565b61192c61192761281b565b610ec2565b611962576040517fcc8576e900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80610104600084815260200190815260200160002060006101000a81548160ff021916908315150217905550817fa95329310e1e9618d3340bf022b833c8cc09e95e9fa8b248d36dd3bdad7df5aa826040516119be91906142d5565b60405180910390a25050565b60ff60009054906101000a900460ff1681565b60fe5481565b6119fe838383604051806020016040528060008152506123e3565b505050565b611a2c7ee9ab62a5761636687b05e2e7b04f22689d99792df38552d31664fa3f9584098261176d565b50565b6000611a396110e4565b8210611a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a71906152a1565b60405180910390fd5b60cb8281548110611a8e57611a8d614e8a565b5b90600052602060002001549050919050565b611ab0611aab61281b565b611171565b611ae6576040517f55098f2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060fc9080519060200190611afc92919061417e565b507fb7dc3d82553f66494744771504119d99246c225f02cb0aec4e13b7be3bfc88bb81604051611b2c919061448a565b60405180910390a150565b6101046020528060005260406000206000915054906101000a900460ff1681565b6000611b837ee9ab62a5761636687b05e2e7b04f22689d99792df38552d31664fa3f9584098361226c565b9050919050565b600080611b9683612fae565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfe9061530d565b60405180910390fd5b80915050919050565b60fc8054611c1d90614be8565b80601f0160208091040260200160405190810160405280929190818152602001828054611c4990614be8565b8015611c965780601f10611c6b57610100808354040283529160200191611c96565b820191906000526020600020905b815481529060010190602001808311611c7957829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d059061539f565b60405180910390fd5b609a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611d5e33611b58565b611d94576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061010360008481526020019081526020016000206000016000828254611dbb9190614b63565b9250508190555080827fe35569cc02c4dbfef78de8b7236cf1da89364a064bebc436c0e50538433326ae60405160405180910390a35050565b60008060019054906101000a900460ff16159050808015611e255750600160008054906101000a900460ff1660ff16105b80611e525750611e3430612feb565b158015611e515750600160008054906101000a900460ff1660ff16145b5b611e91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8890615431565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611ece576001600060016101000a81548160ff0219169083151502179055505b611f426040518060400160405280600c81526020017f4e65616e64657220536d6f6c00000000000000000000000000000000000000008152506040518060400160405280600b81526020017f4e65616e646572536d6f6c00000000000000000000000000000000000000000081525061300e565b611f4a6111a4565b600960fd8190555060fd54600a611f619190615584565b6064611f6d9190614f01565b60fe81905550600060ff60006101000a81548160ff02191690831515021790555066470de4df82000061010081905550600161010160006101000a81548160ff02191690831515021790555080156120125760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516120099190615621565b60405180910390a15b50565b61202561202061281b565b61178e565b61205b576040517f36b6b89500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505061209957600080fd5b61010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3361010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161213591906144e8565b602060405180830381865afa158015612152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121769190615651565b6040518363ffffffff1660e01b815260040161219392919061567e565b6020604051808303816000875af11580156121b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d691906156bc565b6121df57600080fd5b565b6121f16121ec61281b565b611171565b612227576040517f55098f2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff60009054906101000a900460ff161560ff60006101000a81548160ff021916908315150217905550565b6101056020528060005260406000206000915090505481565b60006065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6060609880546122e690614be8565b80601f016020809104026020016040519081016040528092919081815260200182805461231290614be8565b801561235f5780601f106123345761010080835404028352916020019161235f565b820191906000526020600020905b81548152906001019060200180831161234257829003601f168201915b5050505050905090565b60fb8060000154905081565b6000801b81565b61238e61238761281b565b838361306b565b5050565b6101005481565b61010260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7ee9ab62a5761636687b05e2e7b04f22689d99792df38552d31664fa3f95840981565b6123f46123ee61281b565b836128dc565b612433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242a90614daf565b60405180910390fd5b61243f848484846131d7565b50505050565b7fa619569270f7f4a1d8f7ed82794221f15c6f8595dada80d85ac4e31cdd6fe04c81565b61247961247461281b565b611171565b6124af576040517f55098f2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806101008190555050565b6060604051806060016040528060358152602001615e2b603591399050919050565b7f3b351bd1fe2dfe571b64d5c9adc99cfeeccb1e4f46d0485613dcb1ff87242f4d81565b61250982611151565b61251281612dd7565b61251c8383612ecc565b505050565b61254b7f9aa77ce78f008f23606e6755d96256721080001bc839bd46f3566a5b8e3f31888261176d565b50565b61255733611b58565b61258d576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80610103600084815260200190815260200160002060020160008282546125b49190614b63565b9250508190555080827fe852686fc3379988351fab3924b8412a69b0f884879d23a989640c46daca203060405160405180910390a35050565b6000609c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f9aa77ce78f008f23606e6755d96256721080001bc839bd46f3566a5b8e3f318881565b600060fd54600a6126b69190615584565b6101056000848152602001908152602001600020546126d59190615718565b9050919050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061274f575061274e82613233565b5b9050919050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806127c957506127c882613315565b5b9050919050565b6127d98161337f565b612818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280f9061530d565b60405180910390fd5b50565b600033905090565b81609b600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661289683611b8a565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806128e883611b8a565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061292a575061292981856125ed565b5b8061296857508373ffffffffffffffffffffffffffffffffffffffff1661295084610f87565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661299182611b8a565b73ffffffffffffffffffffffffffffffffffffffff16146129e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129de906157bb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a4d9061584d565b60405180910390fd5b612a6383838360016133c0565b8273ffffffffffffffffffffffffffffffffffffffff16612a8382611b8a565b73ffffffffffffffffffffffffffffffffffffffff1614612ad9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ad0906157bb565b60405180910390fd5b609b600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001609a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001609a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816099600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612c65838383600161342b565b505050565b600060019054906101000a900460ff16612cb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cb090614e41565b60405180910390fd5b565b6000612cc683611151565b90508160656000858152602001908152602001600020600101819055508181847fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a4505050565b612d218282612deb565b5050565b600081600001549050919050565b6000612d3f60fb612d25565b9050612d4b60fb613431565b61162e811115612d90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d87906158b9565b60405180910390fd5b7f13d0c6609c1489bff1e3c88b5ad19c5647fe75c23c7ab35e81f04afdce4f95648282604051612dc192919061567e565b60405180910390a1612dd38282613447565b5050565b612de881612de361281b565b613465565b50565b612df5828261226c565b612ec85760016065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612e6d61281b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b612ed6828261226c565b15612faa5760006065600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612f4f61281b565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60006099600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661305d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161305490614e41565b60405180910390fd5b61306782826134ea565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036130d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130d090615925565b60405180910390fd5b80609c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516131ca91906142d5565b60405180910390a3505050565b6131e2848484612971565b6131ee8484848461356b565b61322d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613224906159b7565b60405180910390fd5b50505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806132fe57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061330e575061330d82612756565b5b9050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166133a183612fae565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b610104600083815260200190815260200160002060009054906101000a900460ff1615613419576040517f3899ae3600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b613425848484846136f2565b50505050565b50505050565b6001816000016000828254019250508190555050565b613461828260405180602001604052806000815250613850565b5050565b61346f828261226c565b6134e65761347c816138ab565b61348a8360001c60206138d8565b60405160200161349b929190615aab565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134dd919061448a565b60405180910390fd5b5050565b600060019054906101000a900460ff16613539576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161353090614e41565b60405180910390fd5b816097908051906020019061354f92919061417e565b50806098908051906020019061356692919061417e565b505050565b600061358c8473ffffffffffffffffffffffffffffffffffffffff16612feb565b156136e5578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026135b561281b565b8786866040518563ffffffff1660e01b81526004016135d79493929190615b3a565b6020604051808303816000875af192505050801561361357506040513d601f19601f820116820180604052508101906136109190615b9b565b60015b613695573d8060008114613643576040519150601f19603f3d011682016040523d82523d6000602084013e613648565b606091505b50600081510361368d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613684906159b7565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506136ea565b600190505b949350505050565b6136fe84848484613b14565b6001811115613742576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161373990615c3a565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036137895761378481613c3a565b6137c8565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146137c7576137c68582613c83565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361380a5761380581613df0565b613849565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614613848576138478482613ec1565b5b5b5050505050565b61385a8383613f40565b613867600084848461356b565b6138a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161389d906159b7565b60405180910390fd5b505050565b60606138d18273ffffffffffffffffffffffffffffffffffffffff16601460ff166138d8565b9050919050565b6060600060028360026138eb9190614f01565b6138f59190614b63565b67ffffffffffffffff81111561390e5761390d61481c565b5b6040519080825280601f01601f1916602001820160405280156139405781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061397857613977614e8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106139dc576139db614e8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002613a1c9190614f01565b613a269190614b63565b90505b6001811115613ac6577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110613a6857613a67614e8a565b5b1a60f81b828281518110613a7f57613a7e614e8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080613abf90615c5a565b9050613a29565b5060008414613b0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b0190615ccf565b60405180910390fd5b8091505092915050565b6001811115613c3457600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614613ba85780609a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613ba09190615cef565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614613c335780609a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613c2b9190614b63565b925050819055505b5b50505050565b60cb8054905060cc60008381526020019081526020016000208190555060cb81908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001613c9084611c9e565b613c9a9190615cef565b9050600060ca6000848152602001908152602001600020549050818114613d7f57600060c960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205490508060c960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020819055508160ca600083815260200190815260200160002081905550505b60ca60008481526020019081526020016000206000905560c960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160cb80549050613e049190615cef565b9050600060cc6000848152602001908152602001600020549050600060cb8381548110613e3457613e33614e8a565b5b906000526020600020015490508060cb8381548110613e5657613e55614e8a565b5b90600052602060002001819055508160cc60008381526020019081526020016000208190555060cc60008581526020019081526020016000206000905560cb805480613ea557613ea4615d23565b5b6001900381819060005260206000200160009055905550505050565b6000613ecc83611c9e565b90508160c960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020819055508060ca600084815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603613faf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613fa690615d9e565b60405180910390fd5b613fb88161337f565b15613ff8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613fef90615e0a565b60405180910390fd5b6140066000838360016133c0565b61400f8161337f565b1561404f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161404690615e0a565b60405180910390fd5b6001609a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816099600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461415960008383600161342b565b5050565b60405180606001604052806000815260200160008152602001600081525090565b82805461418a90614be8565b90600052602060002090601f0160209004810192826141ac57600085556141f3565b82601f106141c557805160ff19168380011785556141f3565b828001600101855582156141f3579182015b828111156141f25782518255916020019190600101906141d7565b5b5090506142009190614204565b5090565b5b8082111561421d576000816000905550600101614205565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61426a81614235565b811461427557600080fd5b50565b60008135905061428781614261565b92915050565b6000602082840312156142a3576142a261422b565b5b60006142b184828501614278565b91505092915050565b60008115159050919050565b6142cf816142ba565b82525050565b60006020820190506142ea60008301846142c6565b92915050565b6000819050919050565b614303816142f0565b811461430e57600080fd5b50565b600081359050614320816142fa565b92915050565b6000806040838503121561433d5761433c61422b565b5b600061434b85828601614311565b925050602061435c85828601614311565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061439182614366565b9050919050565b6143a181614386565b81146143ac57600080fd5b50565b6000813590506143be81614398565b92915050565b6000602082840312156143da576143d961422b565b5b60006143e8848285016143af565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561442b578082015181840152602081019050614410565b8381111561443a576000848401525b50505050565b6000601f19601f8301169050919050565b600061445c826143f1565b61446681856143fc565b935061447681856020860161440d565b61447f81614440565b840191505092915050565b600060208201905081810360008301526144a48184614451565b905092915050565b6000602082840312156144c2576144c161422b565b5b60006144d084828501614311565b91505092915050565b6144e281614386565b82525050565b60006020820190506144fd60008301846144d9565b92915050565b6000806040838503121561451a5761451961422b565b5b6000614528858286016143af565b925050602061453985828601614311565b9150509250929050565b61454c816142f0565b82525050565b60006020820190506145676000830184614543565b92915050565b6000806000606084860312156145865761458561422b565b5b6000614594868287016143af565b93505060206145a5868287016143af565b92505060406145b686828701614311565b9150509250925092565b6000819050919050565b6145d3816145c0565b81146145de57600080fd5b50565b6000813590506145f0816145ca565b92915050565b60006020828403121561460c5761460b61422b565b5b600061461a848285016145e1565b91505092915050565b61462c816145c0565b82525050565b60006020820190506146476000830184614623565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126146725761467161464d565b5b8235905067ffffffffffffffff81111561468f5761468e614652565b5b6020830191508360208202830111156146ab576146aa614657565b5b9250929050565b600080602083850312156146c9576146c861422b565b5b600083013567ffffffffffffffff8111156146e7576146e6614230565b5b6146f38582860161465c565b92509250509250929050565b614708816142f0565b82525050565b60608201600082015161472460008501826146ff565b50602082015161473760208501826146ff565b50604082015161474a60408501826146ff565b50505050565b6000606082019050614765600083018461470e565b92915050565b600080604083850312156147825761478161422b565b5b6000614790858286016145e1565b92505060206147a1858286016143af565b9150509250929050565b6147b4816142ba565b81146147bf57600080fd5b50565b6000813590506147d1816147ab565b92915050565b600080604083850312156147ee576147ed61422b565b5b60006147fc85828601614311565b925050602061480d858286016147c2565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61485482614440565b810181811067ffffffffffffffff821117156148735761487261481c565b5b80604052505050565b6000614886614221565b9050614892828261484b565b919050565b600067ffffffffffffffff8211156148b2576148b161481c565b5b6148bb82614440565b9050602081019050919050565b82818337600083830152505050565b60006148ea6148e584614897565b61487c565b90508281526020810184848401111561490657614905614817565b5b6149118482856148c8565b509392505050565b600082601f83011261492e5761492d61464d565b5b813561493e8482602086016148d7565b91505092915050565b60006020828403121561495d5761495c61422b565b5b600082013567ffffffffffffffff81111561497b5761497a614230565b5b61498784828501614919565b91505092915050565b600080604083850312156149a7576149a661422b565b5b60006149b5858286016143af565b92505060206149c6858286016147c2565b9150509250929050565b600067ffffffffffffffff8211156149eb576149ea61481c565b5b6149f482614440565b9050602081019050919050565b6000614a14614a0f846149d0565b61487c565b905082815260208101848484011115614a3057614a2f614817565b5b614a3b8482856148c8565b509392505050565b600082601f830112614a5857614a5761464d565b5b8135614a68848260208601614a01565b91505092915050565b60008060008060808587031215614a8b57614a8a61422b565b5b6000614a99878288016143af565b9450506020614aaa878288016143af565b9350506040614abb87828801614311565b925050606085013567ffffffffffffffff811115614adc57614adb614230565b5b614ae887828801614a43565b91505092959194509250565b60008060408385031215614b0b57614b0a61422b565b5b6000614b19858286016143af565b9250506020614b2a858286016143af565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614b6e826142f0565b9150614b79836142f0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614bae57614bad614b34565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614c0057607f821691505b602082108103614c1357614c12614bb9565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000614c756021836143fc565b9150614c8082614c19565b604082019050919050565b60006020820190508181036000830152614ca481614c68565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000614d07603d836143fc565b9150614d1282614cab565b604082019050919050565b60006020820190508181036000830152614d3681614cfa565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000614d99602d836143fc565b9150614da482614d3d565b604082019050919050565b60006020820190508181036000830152614dc881614d8c565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614e2b602b836143fc565b9150614e3682614dcf565b604082019050919050565b60006020820190508181036000830152614e5a81614e1e565b9050919050565b6000604082019050614e766000830185614543565b614e836020830184614543565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000614ec4826142f0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614ef657614ef5614b34565b5b600182019050919050565b6000614f0c826142f0565b9150614f17836142f0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614f5057614f4f614b34565b5b828202905092915050565b7f496e636f72726563742050726963650000000000000000000000000000000000600082015250565b6000614f91600f836143fc565b9150614f9c82614f5b565b602082019050919050565b60006020820190508181036000830152614fc081614f84565b9050919050565b7f5075626c6963206e6f7420616374697665000000000000000000000000000000600082015250565b6000614ffd6011836143fc565b915061500882614fc7565b602082019050919050565b6000602082019050818103600083015261502c81614ff0565b9050919050565b7f35363738204d617820537570706c790000000000000000000000000000000000600082015250565b6000615069600f836143fc565b915061507482615033565b602082019050919050565b600060208201905081810360008301526150988161505c565b9050919050565b7f4d696e7473206578636565646564000000000000000000000000000000000000600082015250565b60006150d5600e836143fc565b91506150e08261509f565b602082019050919050565b60006020820190508181036000830152615104816150c8565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000615167602b836143fc565b91506151728261510b565b604082019050919050565b600060208201905081810360008301526151968161515a565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006151f9602f836143fc565b91506152048261519d565b604082019050919050565b60006020820190508181036000830152615228816151ec565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b600061528b602c836143fc565b91506152968261522f565b604082019050919050565b600060208201905081810360008301526152ba8161527e565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006152f76018836143fc565b9150615302826152c1565b602082019050919050565b60006020820190508181036000830152615326816152ea565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006153896029836143fc565b91506153948261532d565b604082019050919050565b600060208201905081810360008301526153b88161537c565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061541b602e836143fc565b9150615426826153bf565b604082019050919050565b6000602082019050818103600083015261544a8161540e565b9050919050565b60008160011c9050919050565b6000808291508390505b60018511156154a85780860481111561548457615483614b34565b5b60018516156154935780820291505b80810290506154a185615451565b9450615468565b94509492505050565b6000826154c1576001905061557d565b816154cf576000905061557d565b81600181146154e557600281146154ef5761551e565b600191505061557d565b60ff84111561550157615500614b34565b5b8360020a91508482111561551857615517614b34565b5b5061557d565b5060208310610133831016604e8410600b84101617156155535782820a90508381111561554e5761554d614b34565b5b61557d565b615560848484600161545e565b9250905081840481111561557757615576614b34565b5b81810290505b9392505050565b600061558f826142f0565b915061559a836142f0565b92506155c77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846154b1565b905092915050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061560b615606615601846155cf565b6155e6565b6155d9565b9050919050565b61561b816155f0565b82525050565b60006020820190506156366000830184615612565b92915050565b60008151905061564b816142fa565b92915050565b6000602082840312156156675761566661422b565b5b60006156758482850161563c565b91505092915050565b600060408201905061569360008301856144d9565b6156a06020830184614543565b9392505050565b6000815190506156b6816147ab565b92915050565b6000602082840312156156d2576156d161422b565b5b60006156e0848285016156a7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000615723826142f0565b915061572e836142f0565b92508261573e5761573d6156e9565b5b828204905092915050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006157a56025836143fc565b91506157b082615749565b604082019050919050565b600060208201905081810360008301526157d481615798565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006158376024836143fc565b9150615842826157db565b604082019050919050565b600060208201905081810360008301526158668161582a565b9050919050565b7f457863656564656420737570706c790000000000000000000000000000000000600082015250565b60006158a3600f836143fc565b91506158ae8261586d565b602082019050919050565b600060208201905081810360008301526158d281615896565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061590f6019836143fc565b915061591a826158d9565b602082019050919050565b6000602082019050818103600083015261593e81615902565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006159a16032836143fc565b91506159ac82615945565b604082019050919050565b600060208201905081810360008301526159d081615994565b9050919050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000615a186017836159d7565b9150615a23826159e2565b601782019050919050565b6000615a39826143f1565b615a4381856159d7565b9350615a5381856020860161440d565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000615a956011836159d7565b9150615aa082615a5f565b601182019050919050565b6000615ab682615a0b565b9150615ac28285615a2e565b9150615acd82615a88565b9150615ad98284615a2e565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b6000615b0c82615ae5565b615b168185615af0565b9350615b2681856020860161440d565b615b2f81614440565b840191505092915050565b6000608082019050615b4f60008301876144d9565b615b5c60208301866144d9565b615b696040830185614543565b8181036060830152615b7b8184615b01565b905095945050505050565b600081519050615b9581614261565b92915050565b600060208284031215615bb157615bb061422b565b5b6000615bbf84828501615b86565b91505092915050565b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b6000615c246035836143fc565b9150615c2f82615bc8565b604082019050919050565b60006020820190508181036000830152615c5381615c17565b9050919050565b6000615c65826142f0565b915060008203615c7857615c77614b34565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000615cb96020836143fc565b9150615cc482615c83565b602082019050919050565b60006020820190508181036000830152615ce881615cac565b9050919050565b6000615cfa826142f0565b9150615d05836142f0565b925082821015615d1857615d17614b34565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000615d886020836143fc565b9150615d9382615d52565b602082019050919050565b60006020820190508181036000830152615db781615d7b565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000615df4601c836143fc565b9150615dff82615dbe565b602082019050919050565b60006020820190508181036000830152615e2381615de7565b905091905056fe697066733a2f2f516d555a767569447a654b764b4365697a50564b6f5765737270475466793459736633727a6753417073374e394ba2646970667358221220e5399c609027e21734837ccc52c6d4ed3883681b7e3db31cd548ee52a33afa0264736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 415,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 418,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2438,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3233,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 606,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "_name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 608,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "_symbol",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 612,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "_owners",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 616,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "_balances",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 620,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 626,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1546,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 1711,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1715,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1718,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "_allTokens",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1722,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2054,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "__gap",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 4391,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "_tokenIdTracker",
        "offset": 0,
        "slot": "251",
        "type": "t_struct(Counter)2445_storage"
      },
      {
        "astId": 4393,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "baseURI",
        "offset": 0,
        "slot": "252",
        "type": "t_string_storage"
      },
      {
        "astId": 4395,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "decimals",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 4397,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "commonSenseMaxLevel",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 4399,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "publicActive",
        "offset": 0,
        "slot": "255",
        "type": "t_bool"
      },
      {
        "astId": 4401,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "publicPrice",
        "offset": 0,
        "slot": "256",
        "type": "t_uint256"
      },
      {
        "astId": 4403,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "revealed",
        "offset": 0,
        "slot": "257",
        "type": "t_bool"
      },
      {
        "astId": 4406,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "magic",
        "offset": 1,
        "slot": "257",
        "type": "t_contract(IERC20)4947"
      },
      {
        "astId": 4408,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "devGround",
        "offset": 0,
        "slot": "258",
        "type": "t_address"
      },
      {
        "astId": 4420,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "tokenToSkill",
        "offset": 0,
        "slot": "259",
        "type": "t_mapping(t_uint256,t_struct(PrimarySkill)4415_storage)"
      },
      {
        "astId": 4424,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "staked",
        "offset": 0,
        "slot": "260",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 4428,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "commonSense",
        "offset": 0,
        "slot": "261",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4432,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "minted",
        "offset": 0,
        "slot": "262",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4436,
        "contract": "contracts/NeanderSmol.sol:NeanderSmol",
        "label": "publicMinted",
        "offset": 0,
        "slot": "263",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)4947": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(PrimarySkill)4415_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NeanderSmol.PrimarySkill)",
        "numberOfBytes": "32",
        "value": "t_struct(PrimarySkill)4415_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2445_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 2444,
            "contract": "contracts/NeanderSmol.sol:NeanderSmol",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PrimarySkill)4415_storage": {
        "encoding": "inplace",
        "label": "struct NeanderSmol.PrimarySkill",
        "members": [
          {
            "astId": 4410,
            "contract": "contracts/NeanderSmol.sol:NeanderSmol",
            "label": "mystics",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4412,
            "contract": "contracts/NeanderSmol.sol:NeanderSmol",
            "label": "farmers",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4414,
            "contract": "contracts/NeanderSmol.sol:NeanderSmol",
            "label": "fighters",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/NeanderSmol.sol:NeanderSmol",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/NeanderSmol.sol:NeanderSmol",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}