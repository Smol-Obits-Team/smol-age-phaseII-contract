{
  "address": "0xB2ba90A226ab4d0B78Ca655B27f4d87D9326aBfb",
  "abi": [
    {
      "inputs": [],
      "name": "BalanceIsInsufficient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CsIsBellowHundred",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DevelopmentGroundIsLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLockTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthsNotEqual",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeandersmolIsNotInDevelopmentGround",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeandersmolsIsLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongMultiple",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroBalanceError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "stake",
          "type": "bool"
        }
      ],
      "name": "ClaimDevelopmentGroundBonesReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Grounds",
          "name": "ground",
          "type": "uint8"
        }
      ],
      "name": "EnterDevelopmentGround",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "LeaveDevelopmentGround",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveBones",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "StakeBonesInDevelopmentGround",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bones",
      "outputs": [
        {
          "internalType": "contract IBones",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "_stake",
          "type": "bool[]"
        }
      ],
      "name": "claimDevelopmentGroundBonesReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lockTime",
          "type": "uint256[]"
        },
        {
          "internalType": "enum Grounds[]",
          "name": "_ground",
          "type": "uint8[]"
        }
      ],
      "name": "enterDevelopmentGround",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDevelopmentGroundBonesReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDevelopmentGroundInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "lockPeriod",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "amountPosition",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "entryTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "lastRewardTime",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "bonesStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentPitsLockPeriod",
              "type": "uint256"
            },
            {
              "internalType": "enum Grounds",
              "name": "ground",
              "type": "uint8"
            }
          ],
          "internalType": "struct DevelopmentGround",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPrimarySkill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getStakedTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "res",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pits",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_neandersmol",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bones",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "leaveDevelopmentGround",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "neandersmol",
      "outputs": [
        {
          "internalType": "contract INeandersmol",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pits",
      "outputs": [
        {
          "internalType": "contract IPits",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "_all",
          "type": "bool[]"
        }
      ],
      "name": "removeBones",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_amount",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "stakeBonesInDevelopmentGround",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x026211a3cb2df1340ef62473e8b99d317fc4e3800d0dfee1a21511e604a6b77f",
  "receipt": {
    "to": null,
    "from": "0x45947dfDE271FDbB7759a1F71007528437682Ec2",
    "contractAddress": "0xB2ba90A226ab4d0B78Ca655B27f4d87D9326aBfb",
    "transactionIndex": 1,
    "gasUsed": "3545195",
    "logsBloom": "0x
    "blockHash": "0xe6e1c136a1f655110a894b394ed41f9d3b31bd5fae5fdad5f3c3d6af9472c007",
    "transactionHash": "0x026211a3cb2df1340ef62473e8b99d317fc4e3800d0dfee1a21511e604a6b77f",
    "logs": [],
    "blockNumber": 9493860,
    "cumulativeGasUsed": "3545195",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "3754ff12c22bbcd82280df154a5c110c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BalanceIsInsufficient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CsIsBellowHundred\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DevelopmentGroundIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLockTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthsNotEqual\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeandersmolIsNotInDevelopmentGround\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeandersmolsIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongMultiple\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBalanceError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"stake\",\"type\":\"bool\"}],\"name\":\"ClaimDevelopmentGroundBonesReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Grounds\",\"name\":\"ground\",\"type\":\"uint8\"}],\"name\":\"EnterDevelopmentGround\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LeaveDevelopmentGround\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveBones\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"StakeBonesInDevelopmentGround\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bones\",\"outputs\":[{\"internalType\":\"contract IBones\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_stake\",\"type\":\"bool[]\"}],\"name\":\"claimDevelopmentGroundBonesReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lockTime\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Grounds[]\",\"name\":\"_ground\",\"type\":\"uint8[]\"}],\"name\":\"enterDevelopmentGround\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDevelopmentGroundBonesReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDevelopmentGroundInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"amountPosition\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"bonesStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPitsLockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"enum Grounds\",\"name\":\"ground\",\"type\":\"uint8\"}],\"internalType\":\"struct DevelopmentGround\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPrimarySkill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getStakedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"res\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pits\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_neandersmol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bones\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"leaveDevelopmentGround\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"neandersmol\",\"outputs\":[{\"internalType\":\"contract INeandersmol\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pits\",\"outputs\":[{\"internalType\":\"contract IPits\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_all\",\"type\":\"bool[]\"}],\"name\":\"removeBones\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"stakeBonesInDevelopmentGround\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimDevelopmentGroundBonesReward(uint256[],bool[])\":{\"params\":{\"_stake\":\"Whether to stake the reward bones in the development ground\",\"_tokenId\":\"ID of the development ground\"}},\"enterDevelopmentGround(uint256[],uint256[],uint8[])\":{\"details\":\"Enters the DevelopmentGround by transferring the tokens from the sender to the contract and setting the development ground data such as owner, entry time, lock period, etc.\",\"params\":{\"_ground\":\"Array of grounds for each corresponding token\",\"_lockTime\":\"Array of lock times for each corresponding token\",\"_tokenId\":\"Array of token IDs to be transferred\"}},\"getDevelopmentGroundBonesReward(uint256)\":{\"details\":\"Returns the reward for the bones staked in the development ground.\",\"params\":{\"_tokenId\":\"The token ID for the development ground.\"},\"returns\":{\"_0\":\"The reward for the bones staked in the development ground.\"}},\"getDevelopmentGroundInfo(uint256)\":{\"details\":\"This function returns a DevelopmentGround struct containing information about a Development Ground token, specified by its ID, _tokenId.\",\"params\":{\"_tokenId\":\"ID of the Development Ground token to retrieve information for\"},\"returns\":{\"_0\":\"The DevelopmentGround struct containing information about the specified Development Ground token.\"}},\"getPrimarySkill(uint256)\":{\"params\":{\"_tokenId\":\"ID of the development ground\"},\"returns\":{\"_0\":\"The primary skill level\"}},\"leaveDevelopmentGround(uint256[])\":{\"details\":\"Allows the owner to leave the development ground. This will transfer the token back to the owner and remove any bones staked in the development ground.\",\"params\":{\"_tokenId\":\"The token ID of the development ground to leave.\"}},\"removeBones(uint256[],bool[])\":{\"details\":\"Removes bones from a specific development ground.\",\"params\":{\"_all\":\"Indicates whether to remove all bones or just a portion of them\",\"_tokenId\":\"The unique identifier for the development ground\"}},\"stakeBonesInDevelopmentGround(uint256[],uint256[])\":{\"details\":\"Stakes the bones in the DevelopmentGround by transferring the bones from the sender to the contract and updating the development ground data.\",\"params\":{\"_amount\":\"Array of amounts of bones to be transferred\",\"_tokenId\":\"Array of token IDs for the corresponding amounts of bones\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimDevelopmentGroundBonesReward(uint256[],bool[])\":{\"notice\":\"This function allows the owner of multiple development grounds to claim rewards earned by them.\"},\"getDevelopmentGroundInfo(uint256)\":{\"notice\":\"Retrieve information about a Development Ground token.\"},\"getPrimarySkill(uint256)\":{\"notice\":\"This function retrieves the primary skill of the `_tokenId` development ground.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DevelopmentGrounds.sol\":\"DevelopmentGrounds\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/DevelopmentGrounds.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { Lib } from \\\"./library/Lib.sol\\\";\\nimport { IPits } from \\\"./interfaces/IPits.sol\\\";\\nimport { IBones } from \\\"./interfaces/IBones.sol\\\";\\nimport { IRandomizer } from \\\"./interfaces/IRandomizer.sol\\\";\\nimport { INeandersmol } from \\\"./interfaces/INeandersmol.sol\\\";\\nimport { SafeTransferLib } from \\\"solady/src/utils/SafeTransferLib.sol\\\";\\n\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {\\n    DevelopmentGround,\\n    LaborGround,\\n    Jobs,\\n    Grounds\\n} from \\\"./library/StructsEnums.sol\\\";\\nimport {\\n    LengthsNotEqual,\\n    ZeroBalanceError,\\n    NotYourToken,\\n    WrongMultiple,\\n    CsIsBellowHundred,\\n    BalanceIsInsufficient,\\n    InvalidLockTime,\\n    NeandersmolIsNotInDevelopmentGround,\\n    NeandersmolsIsLocked\\n} from \\\"./library/Error.sol\\\";\\n\\ncontract DevelopmentGrounds is Initializable {\\n    IBones public bones;\\n    IPits public pits;\\n    INeandersmol public neandersmol;\\n\\n    function initialize(\\n        address _pits,\\n        address _neandersmol,\\n        address _bones\\n    ) external initializer {\\n        bones = IBones(_bones);\\n        pits = IPits(_pits);\\n        neandersmol = INeandersmol(_neandersmol);\\n    }\\n\\n    // tokenId -> amount position -> staking time\\n    mapping(uint256 => mapping(uint256 => uint256)) private trackTime;\\n    // tokenId -> time -> amount\\n    mapping(uint256 => mapping(uint256 => uint256)) private trackToken;\\n\\n    mapping(address => uint256[]) private ownerToTokens;\\n\\n    mapping(uint256 => DevelopmentGround) private developmentGround;\\n\\n    uint256 private constant MINIMUM_BONE_STAKE = 1000 * 10 ** 18;\\n\\n    /**\\n     * @dev Enters the DevelopmentGround by transferring the tokens from the sender to the contract\\n     * and setting the development ground data such as owner, entry time, lock period, etc.\\n     * @param _tokenId Array of token IDs to be transferred\\n     * @param _lockTime Array of lock times for each corresponding token\\n     * @param _ground Array of grounds for each corresponding token\\n     */\\n\\n    function enterDevelopmentGround(\\n        uint256[] calldata _tokenId,\\n        uint256[] calldata _lockTime,\\n        Grounds[] calldata _ground\\n    ) external {\\n        uint256 i;\\n        checkLength(_tokenId, _lockTime);\\n        if (_lockTime.length != _ground.length) revert LengthsNotEqual();\\n        Lib.pitsValidation(pits);\\n        for (; i < _tokenId.length; ) {\\n            (uint256 tokenId, uint256 lockTime) = (_tokenId[i], _lockTime[i]);\\n            DevelopmentGround storage devGround = developmentGround[tokenId];\\n            if (neandersmol.getCommonSense(tokenId) < 100)\\n                revert CsIsBellowHundred();\\n            if (neandersmol.ownerOf(tokenId) != msg.sender)\\n                revert NotYourToken();\\n            if (!lockTimeExists(lockTime)) revert InvalidLockTime();\\n            neandersmol.transferFrom(msg.sender, address(this), tokenId);\\n            devGround.owner = msg.sender;\\n            devGround.entryTime = uint64(block.timestamp);\\n            devGround.lockPeriod = uint64(lockTime);\\n            devGround.lastRewardTime = uint64(block.timestamp);\\n            devGround.ground = _ground[i];\\n            devGround.currentPitsLockPeriod = pits.getTimeOut();\\n            ownerToTokens[msg.sender].push(tokenId);\\n            emit EnterDevelopmentGround(\\n                msg.sender,\\n                tokenId,\\n                lockTime,\\n                block.timestamp,\\n                _ground[i]\\n            );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Stakes the bones in the DevelopmentGround by transferring the bones from the sender to the contract\\n     * and updating the development ground data.\\n     * @param _amount Array of amounts of bones to be transferred\\n     * @param _tokenId Array of token IDs for the corresponding amounts of bones\\n     */\\n\\n    function stakeBonesInDevelopmentGround(\\n        uint256[] calldata _amount,\\n        uint256[] calldata _tokenId\\n    ) external {\\n        Lib.pitsValidation(pits);\\n        checkLength(_amount, _tokenId);\\n        uint256 i;\\n        for (; i < _amount.length; ) {\\n            (uint256 tokenId, uint256 amount) = (_tokenId[i], _amount[i]);\\n            DevelopmentGround storage devGround = developmentGround[tokenId];\\n            if (bones.balanceOf(msg.sender) < amount)\\n                revert BalanceIsInsufficient();\\n            if (devGround.owner != msg.sender)\\n                revert NeandersmolIsNotInDevelopmentGround();\\n            if (amount % MINIMUM_BONE_STAKE != 0) revert WrongMultiple();\\n            SafeTransferLib.safeTransferFrom(\\n                address(bones),\\n                msg.sender,\\n                address(this),\\n                amount\\n            );\\n            updateDevelopmentGround(devGround, tokenId, amount);\\n            emit StakeBonesInDevelopmentGround(msg.sender, amount, tokenId);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes bones from a specific development ground.\\n     * @param _tokenId The unique identifier for the development ground\\n     * @param _all Indicates whether to remove all bones or just a portion of them\\n     */\\n\\n    function removeBones(\\n        uint256[] calldata _tokenId,\\n        bool[] calldata _all\\n    ) external {\\n        if (_tokenId.length != _all.length) revert LengthsNotEqual();\\n        uint256 i;\\n        for (; i < _tokenId.length; ) {\\n            developPrimarySkill(_tokenId[i]);\\n            removeBones(_tokenId[i], _all[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper function to remove bones from a specific development ground\\n     * @param _tokenId The unique identifier for the development ground\\n     * @param _all Indicates whether to remove all bones if it will be taxed or not\\n     */\\n    function removeBones(uint256 _tokenId, bool _all) internal {\\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\\n        if (devGround.bonesStaked == 0) revert ZeroBalanceError();\\n        uint256 bal;\\n        uint256 i = 1;\\n        uint256 amount;\\n        uint64 count;\\n        unchecked {\\n            for (; i <= devGround.amountPosition; ++i) {\\n                (uint256 time, uint256 prev) = (\\n                    trackTime[_tokenId][i],\\n                    trackTime[_tokenId][i + 1]\\n                );\\n                if (block.timestamp < time + 30 days && !_all) continue;\\n\\n                block.timestamp < time + 30 days && _all\\n                    ? amount += trackToken[_tokenId][time] / 2\\n                    : amount += trackToken[_tokenId][time];\\n\\n                _all || devGround.amountPosition == 1\\n                    ? trackTime[_tokenId][i] = 0\\n                    : trackTime[_tokenId][i] = prev;\\n                trackToken[_tokenId][time] = 0;\\n\\n                ++count;\\n            }\\n\\n            developmentGround[_tokenId].amountPosition -= count;\\n            developmentGround[_tokenId].bonesStaked -= amount;\\n\\n            bal = devGround.bonesStaked - amount;\\n        }\\n        if (bal != 0 && _all)\\n            SafeTransferLib.safeTransfer(address(bones), address(1), bal);\\n\\n        if (amount != 0)\\n            SafeTransferLib.safeTransfer(address(bones), msg.sender, bal);\\n\\n        emit RemoveBones(msg.sender, _tokenId, amount);\\n    }\\n\\n    /**\\n     *  This function develops the primary skill of the `_tokenId` development ground.\\n     * @param _tokenId ID of the development ground\\n     */\\n\\n    function developPrimarySkill(uint256 _tokenId) internal {\\n        // make sure bones staked is more than 30% the total supply\\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\\n        (uint256 amount, Grounds ground) = (\\n            getPrimarySkill(_tokenId),\\n            devGround.ground\\n        );\\n        if (ground == Grounds.Chambers) {\\n            neandersmol.developMystics(_tokenId, amount);\\n        } else if (ground == Grounds.Garden) {\\n            neandersmol.developFarmers(_tokenId, amount);\\n        } else {\\n            neandersmol.developFighter(_tokenId, amount);\\n        }\\n    }\\n\\n    /**\\n     * This function retrieves the primary skill of the `_tokenId` development ground.\\n     * @param _tokenId ID of the development ground\\n     * @return The primary skill level\\n     */\\n\\n    function getPrimarySkill(uint256 _tokenId) public view returns (uint256) {\\n        DevelopmentGround memory token = developmentGround[_tokenId];\\n\\n        return\\n            Lib.calculatePrimarySkill(\\n                token.bonesStaked,\\n                token.amountPosition,\\n                token.currentPitsLockPeriod,\\n                _tokenId,\\n                pits,\\n                trackTime,\\n                trackToken\\n            );\\n    }\\n\\n    /**\\n     * This function allows the owner of the development ground to claim the rewards earned by the development ground.\\n     * @param _tokenId ID of the development ground\\n     * @param _stake Whether to stake the reward bones in the development ground\\n     */\\n\\n    function claimDevelopmentGroundBonesReward(\\n        uint256 _tokenId,\\n        bool _stake\\n    ) internal {\\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\\n        if (devGround.owner != msg.sender) revert NotYourToken();\\n        uint256 reward = getDevelopmentGroundBonesReward(_tokenId);\\n        if (reward == 0) revert ZeroBalanceError();\\n        developmentGround[_tokenId].lastRewardTime = uint64(block.timestamp);\\n        _stake\\n            ? stakeBonesInDevelopmentGround(_tokenId, reward)\\n            : bones.mint(msg.sender, reward);\\n\\n        emit ClaimDevelopmentGroundBonesReward(msg.sender, _tokenId, _stake);\\n    }\\n\\n    /**\\n     * This function allows the owner of multiple development grounds to claim rewards earned by them.\\n     * @param _tokenId ID of the development ground\\n     * @param _stake Whether to stake the reward bones in the development ground\\n     */\\n\\n    function claimDevelopmentGroundBonesReward(\\n        uint256[] calldata _tokenId,\\n        bool[] calldata _stake\\n    ) external {\\n        if (_tokenId.length != _stake.length) revert LengthsNotEqual();\\n        uint256 i;\\n        for (; i < _tokenId.length; ) {\\n            claimDevelopmentGroundBonesReward(_tokenId[i], _stake[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Stakes the specified amount of Bones in the Development Ground of the specified token ID.\\n     * @param _tokenId The ID of the Neandersmol token that represents the Development Ground.\\n     * @param _amount The amount of Bones to be staked.\\n     */\\n    function stakeBonesInDevelopmentGround(\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) internal {\\n        uint256 remainder = _amount % MINIMUM_BONE_STAKE;\\n        if (remainder == _amount) revert WrongMultiple(); // if the amount is less than Minimum\\n        if (remainder != 0) bones.mint(msg.sender, remainder); // if the amount is greater than minimum but wrong multiple\\n        uint256 newAmount = _amount - remainder;\\n        updateDevelopmentGround(\\n            developmentGround[_tokenId],\\n            _tokenId,\\n            newAmount\\n        );\\n        bones.mint(address(this), newAmount);\\n        emit StakeBonesInDevelopmentGround(msg.sender, newAmount, _tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the reward for the bones staked in the development ground.\\n     * @param _tokenId The token ID for the development ground.\\n     * @return The reward for the bones staked in the development ground.\\n     */\\n\\n    function getDevelopmentGroundBonesReward(\\n        uint256 _tokenId\\n    ) public view returns (uint256) {\\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\\n        return\\n            Lib.getDevelopmentGroundBonesReward(\\n                devGround.currentPitsLockPeriod,\\n                devGround.lockPeriod,\\n                devGround.lastRewardTime,\\n                pits\\n            );\\n    }\\n\\n    /**\\n     * @dev Allows the owner to leave the development ground. This will transfer the token back to the owner and remove any bones staked in the development ground.\\n     * @param _tokenId The token ID of the development ground to leave.\\n     */\\n\\n    function leaveDevelopmentGround(uint256[] calldata _tokenId) external {\\n        uint256 i;\\n        for (; i < _tokenId.length; ) {\\n            leaveDevelopmentGround(_tokenId[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function for the leaveDevelopmentGround function to remove the development ground and transfer the token back to the owner.\\n     * @param _tokenId The token ID of the development ground to leave.\\n     */\\n\\n    function leaveDevelopmentGround(uint256 _tokenId) internal {\\n        DevelopmentGround memory devGround = developmentGround[_tokenId];\\n        if (devGround.owner != msg.sender) revert NotYourToken();\\n        if (block.timestamp < devGround.entryTime + devGround.lockPeriod)\\n            revert NeandersmolsIsLocked();\\n        if (getDevelopmentGroundBonesReward(_tokenId) > 0)\\n            claimDevelopmentGroundBonesReward(_tokenId, false);\\n        if (devGround.bonesStaked > 0) removeBones(_tokenId, true);\\n        Lib.removeItem(ownerToTokens[msg.sender], (_tokenId));\\n        delete developmentGround[_tokenId];\\n        neandersmol.transferFrom(address(this), msg.sender, _tokenId);\\n        emit LeaveDevelopmentGround(msg.sender, _tokenId);\\n    }\\n\\n    /**\\n     * @dev This function updates the DevelopmentGround by adding `_amount` to `_devGround.bonesStaked` and increments `_devGround.amountPosition`.\\n     * @param _devGround The DevelopmentGround to be updated.\\n     * @param _tokenId The token ID associated with the DevelopmentGround.\\n     * @param _amount The amount to be added to `_devGround.bonesStaked`.\\n     */\\n\\n    function updateDevelopmentGround(\\n        DevelopmentGround storage _devGround,\\n        uint256 _tokenId,\\n        uint256 _amount\\n    ) internal {\\n        unchecked {\\n            _devGround.bonesStaked += _amount;\\n            ++_devGround.amountPosition;\\n            trackToken[_tokenId][block.timestamp] = _amount;\\n            trackTime[_tokenId][_devGround.amountPosition] = block.timestamp;\\n        }\\n    }\\n\\n    /**\\n     *Check the length of two input arrays, _tokenId and _animalsId, for equality.\\n     *If the lengths are not equal, the function will revert with the error \\\"LengthsNotEqual\\\".\\n     *@dev Internal function called by other functions within the contract.\\n     *@param _tokenId Array of token IDs\\n     */\\n\\n    function checkLength(\\n        uint256[] calldata _tokenId,\\n        uint256[] calldata _animalsId\\n    ) internal pure {\\n        if (_tokenId.length != _animalsId.length) revert LengthsNotEqual();\\n    }\\n\\n    function lockTimeExists(uint256 _lockTime) internal pure returns (bool) {\\n        return\\n            _lockTime == 50 days ||\\n            _lockTime == 100 days ||\\n            _lockTime == 150 days;\\n    }\\n\\n    /**\\n     * Retrieve information about a Development Ground token.\\n     * @dev This function returns a DevelopmentGround struct containing information about a Development Ground token, specified by its ID, _tokenId.\\n     * @param _tokenId ID of the Development Ground token to retrieve information for\\n     * @return The DevelopmentGround struct containing information about the specified Development Ground token.\\n     */\\n\\n    function getDevelopmentGroundInfo(\\n        uint256 _tokenId\\n    ) external view returns (DevelopmentGround memory) {\\n        return developmentGround[_tokenId];\\n    }\\n\\n    function getStakedTokens(\\n        address _owner\\n    ) external view returns (uint256[] memory res) {\\n        return ownerToTokens[_owner];\\n    }\\n\\n    event EnterDevelopmentGround(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 indexed lockTime,\\n        uint256 entryTime,\\n        Grounds ground\\n    );\\n\\n    event ClaimDevelopmentGroundBonesReward(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        bool indexed stake\\n    );\\n\\n    event RemoveBones(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 indexed amount\\n    );\\n\\n    event LeaveDevelopmentGround(\\n        address indexed owner,\\n        uint256 indexed tokenId\\n    );\\n\\n    event StakeBonesInDevelopmentGround(\\n        address indexed owner,\\n        uint256 indexed amount,\\n        uint256 indexed tokenId\\n    );\\n}\\n\",\"keccak256\":\"0x7a0c1fac3367b91d7ff1d1ba1f164dd0007bf5f0b4a4ec1cf9777e3d60390a7d\",\"license\":\"MIT\"},\"contracts/interfaces/IBones.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IBones is IERC20Upgradeable {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x1d61defdfd2e99959e9f4d65b96ceca70df17a1c337f385a519785fe4eda1e47\",\"license\":\"MIT\"},\"contracts/interfaces/INeandersmol.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface INeandersmol is IERC721Upgradeable {\\n    function getCommonSense(uint256 _tokenId) external view returns (uint256);\\n\\n    function developMystics(uint256 _tokenId, uint256 _amount) external;\\n\\n    function developFarmers(uint256 _tokenId, uint256 _amount) external;\\n\\n    function developFighter(uint256 _tokenId, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x3bb0567cb8e37c77a2d29f1ed4736c53ca590b5d2c638ceb22380a0a44823f12\",\"license\":\"MIT\"},\"contracts/interfaces/IPits.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\ninterface IPits {\\n    function validation() external view returns (bool);\\n\\n    function getTimeOut() external view returns (uint256);\\n\\n    function getTimeBelowMinimum() external view returns (uint256);\\n\\n    function getDaysOff(uint256 _timestamp) external view returns (uint256);\\n\\n    function getTotalDaysOff() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x78f6bd4f83335ef0ba713cc1a9b42c6ed988422dd53468e72c0c86526acdedff\",\"license\":\"MIT\"},\"contracts/interfaces/IRandomizer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\ninterface IRandomizer {\\n    // Returns a request ID for a random number. This is unique.\\n    function requestRandomNumber() external returns (uint256);\\n\\n    // Returns the random number for the given request ID. Will revert\\n    // if the random is not ready.\\n    function revealRandomNumber(\\n        uint256 _requestId\\n    ) external view returns (uint256);\\n\\n    // Returns if the random number for the given request ID is ready or not. Call\\n    // before calling revealRandomNumber.\\n    function isRandomReady(uint256 _requestId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x93a0e61fc97c543da993320b700966b07ca068c49324369daa35deddd2762b7d\",\"license\":\"MIT\"},\"contracts/library/Error.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nerror CsToHigh();\\nerror NotAContract();\\nerror NotYourToken();\\nerror NotAuthorized();\\nerror WrongMultiple();\\nerror CannotClaimNow();\\nerror TransferFailed();\\nerror InvalidTokenId();\\nerror InvalidLockTime();\\nerror NoMoreAnimalsAllowed();\\nerror LengthsNotEqual();\\nerror ZeroBalanceError();\\nerror CsIsBellowHundred();\\nerror NeandersmolsIsLocked();\\nerror BalanceIsInsufficient();\\nerror InvalidTokenForThisJob();\\nerror DevelopmentGroundIsLocked();\\nerror NeandersmolIsNotInDevelopmentGround();\\n\",\"keccak256\":\"0x66167beeb11f3505adbc01b1b22ff53d2c67db8b258ffa18a3b284949f1f006b\",\"license\":\"MIT\"},\"contracts/library/Lib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IPits } from \\\"../interfaces/IPits.sol\\\";\\nimport { DevelopmentGroundIsLocked } from \\\"./Error.sol\\\";\\n\\nlibrary Lib {\\n    function getDevelopmentGroundBonesReward(\\n        uint256 _currentLockPeriod,\\n        uint256 _lockPeriod,\\n        uint256 _lastRewardTime,\\n        IPits _pits\\n    ) internal view returns (uint256) {\\n        if (_lockPeriod == 0) return 0;\\n        uint256 rewardRate = getRewardRate(_lockPeriod);\\n\\n        uint256 time = (block.timestamp - _lastRewardTime) / 1 days;\\n\\n        return\\n            (rewardRate *\\n                time -\\n                calculateFinalReward(_currentLockPeriod, _pits)) * 10 ** 18;\\n    }\\n\\n    function calculatePrimarySkill(\\n        uint256 _bonesStaked,\\n        uint256 _amountPosition,\\n        uint256 _currentLockPeriod,\\n        uint256 _tokenId,\\n        IPits _pits,\\n        mapping(uint256 => mapping(uint256 => uint256)) storage trackTime,\\n        mapping(uint256 => mapping(uint256 => uint256)) storage trackToken\\n    ) internal view returns (uint256) {\\n        if (_bonesStaked == 0) return 0;\\n        uint256 amount;\\n        for (uint256 i = 1; i <= _amountPosition; ) {\\n            uint256 time = (block.timestamp - trackTime[_tokenId][i]) / 1 days;\\n            uint256 stakedAmount = trackToken[_tokenId][trackTime[_tokenId][i]];\\n            amount += (time * stakedAmount);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return\\n            (amount -\\n                calculateFinalReward(_currentLockPeriod, _pits) *\\n                10 ** 20) / 10 ** 4;\\n    }\\n\\n    function calculateFinalReward(\\n        uint256 _currentLockPeriod,\\n        IPits _pits\\n    ) internal view returns (uint256) {\\n        uint256 amount;\\n\\n        if (_currentLockPeriod != _pits.getTimeOut()) {\\n            uint256 howLong = (block.timestamp - _pits.getTimeOut()) / 1 days;\\n            amount = (_pits.getTotalDaysOff() -\\n                _pits.getDaysOff(_currentLockPeriod) +\\n                howLong);\\n        }\\n        if (_currentLockPeriod == 0) {\\n            uint256 off;\\n            _pits.getTimeOut() != 0\\n                ? off = (block.timestamp - _pits.getTimeOut()) / 1 days\\n                : 0;\\n            if (_pits.validation()) off = _pits.getTotalDaysOff();\\n            amount = off;\\n        }\\n        return amount * 10;\\n    }\\n\\n    function getRewardRate(\\n        uint _lockTime\\n    ) internal pure returns (uint256 rewardRate) {\\n        if (_lockTime == 50 days) rewardRate = 10;\\n        if (_lockTime == 100 days) rewardRate = 50;\\n        if (_lockTime == 150 days) rewardRate = 100;\\n    }\\n\\n    function pitsValidation(IPits _pits) internal view {\\n        if (!_pits.validation()) revert DevelopmentGroundIsLocked();\\n    }\\n\\n    function removeItem(\\n        uint256[] storage _element,\\n        uint256 _removeElement\\n    ) internal {\\n        uint256 i;\\n        for (; i < _element.length; ) {\\n            if (_element[i] == _removeElement) {\\n                _element[i] = _element[_element.length - 1];\\n                _element.pop();\\n                break;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x31e0b681e04a9c4f0298dfec0675601e7aca00a1a670d2db6343c10370917d89\",\"license\":\"MIT\"},\"contracts/library/StructsEnums.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nstruct DevelopmentGround {\\n    address owner;\\n    uint64 lockPeriod;\\n    uint64 amountPosition;\\n    uint64 entryTime;\\n    uint64 lastRewardTime;\\n    uint256 bonesStaked;\\n    uint256 currentPitsLockPeriod;\\n    Grounds ground;\\n}\\n\\nstruct LaborGround {\\n    address owner;\\n    uint32 lockTime;\\n    uint32 supplyId;\\n    uint32 animalId;\\n    uint256 requestId;\\n    Jobs job;\\n}\\n\\nstruct Cave {\\n    address owner;\\n    uint48 stakingTime;\\n    uint48 lastRewardTimestamp;\\n}\\nenum Jobs {\\n    Digging,\\n    Foraging,\\n    Mining\\n}\\n\\nenum Grounds {\\n    Chambers,\\n    Garden,\\n    Battlefield\\n}\\n\",\"keccak256\":\"0x69fa662ea00c552bd8f93f3ccf65986421c0c7696fd3a6bf1a5d0a4366f77568\",\"license\":\"MIT\"},\"solady/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Caution! This library won't check that a token has code, responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ETH transfer has failed.\\n    error ETHTransferFailed();\\n\\n    /// @dev The ERC20 `transferFrom` has failed.\\n    error TransferFromFailed();\\n\\n    /// @dev The ERC20 `transfer` has failed.\\n    error TransferFailed();\\n\\n    /// @dev The ERC20 `approve` has failed.\\n    error ApproveFailed();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH\\n    /// that disallows any storage writes.\\n    uint256 internal constant _GAS_STIPEND_NO_STORAGE_WRITES = 2300;\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\\n    /// storage reads and writes, but low enough to prevent griefing.\\n    /// Multiply by a small constant (e.g. 2), if needed.\\n    uint256 internal constant _GAS_STIPEND_NO_GRIEF = 100000;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       ETH OPERATIONS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gasStipend, to, amount, 0, 0, 0, 0)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                pop(create(amount, 0x0b, 0x16))\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a gas stipend\\n    /// equal to `_GAS_STIPEND_NO_GRIEF`. This gas stipend is a reasonable default\\n    /// for 99% of cases and can be overriden with the three-argument version of this\\n    /// function if necessary.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount) internal {\\n        // Manually inlined because the compiler doesn't inline functions with branches.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(_GAS_STIPEND_NO_GRIEF, to, amount, 0, 0, 0, 0)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                pop(create(amount, 0x0b, 0x16))\\n            }\\n        }\\n    }\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// Simply use `gasleft()` for `gasStipend` if you don't need a gas stipend.\\n    ///\\n    /// Note: Does NOT revert upon failure.\\n    /// Returns whether the transfer of ETH is successful instead.\\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\\n        internal\\n        returns (bool success)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            success := call(gasStipend, to, amount, 0, 0, 0, 0)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC20 OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x00, 0x23b872dd)\\n            mstore(0x20, from) // Store the `from` argument.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x60, amount) // Store the `amount` argument.\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferAllFrom(address token, address from, address to)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, from) // Store the `from` argument.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x00, 0x23b872dd)\\n            mstore(0x40, to) // Store the `to` argument.\\n            // The `amount` argument is already written to the memory word at 0x6a.\\n            amount := mload(0x60)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1a, to) // Store the `to` argument.\\n            mstore(0x3a, amount) // Store the `amount` argument.\\n            // Store the function selector of `transfer(address,uint256)`,\\n            // left by 6 bytes (enough for 8tb of memory represented by the free memory pointer).\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\n            mstore(0x00, 0xa9059cbb000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x16, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, address()) // Store the address of the current contract.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x3a, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x1a, to) // Store the `to` argument.\\n            // The `amount` argument is already written to the memory word at 0x3a.\\n            amount := mload(0x3a)\\n            // Store the function selector of `transfer(address,uint256)`,\\n            // left by 6 bytes (enough for 8tb of memory represented by the free memory pointer).\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\n            mstore(0x00, 0xa9059cbb000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x16, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// Reverts upon failure.\\n    function safeApprove(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1a, to) // Store the `to` argument.\\n            mstore(0x3a, amount) // Store the `amount` argument.\\n            // Store the function selector of `approve(address,uint256)`,\\n            // left by 6 bytes (enough for 8tb of memory represented by the free memory pointer).\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\n            mstore(0x00, 0x095ea7b3000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x16, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `ApproveFailed()`.\\n                mstore(0x00, 0x3e3f8f73)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\\n    /// Returns zero if the `token` does not exist.\\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, account) // Store the `account` argument.\\n            amount :=\\n                mul(\\n                    mload(0x20),\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                        staticcall(gas(), token, 0x1c, 0x24, 0x20, 0x20)\\n                    )\\n                )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd90b1d9017a6969dce31df5199f92f1b6f5a0a59fa2ac06217a83a2815700082\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613f5a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063b00bec651161008c578063d88ad88711610066578063d88ad88714610210578063dd4fcc161461022e578063ea32dac51461025e578063ec42cb771461027a576100cf565b8063b00bec65146101ba578063c0c53b8b146101d8578063cb2fe05e146101f4576100cf565b80632a1f4146146100d45780633e39953a14610104578063547ac071146101345780635970f4531461015057806363c28db11461016c5780637fd4bfd51461019c575b600080fd5b6100ee60048036038101906100e99190613230565b610296565b6040516100fb919061326c565b60405180910390f35b61011e60048036038101906101199190613230565b610478565b60405161012b919061326c565b60405180910390f35b61014e600480360381019061014991906132ec565b61065f565b005b61016a600480360381019061016591906133c3565b610935565b005b610186600480360381019061018191906134d5565b610f57565b60405161019391906135c0565b60405180910390f35b6101a4610fee565b6040516101b19190613641565b60405180910390f35b6101c2611014565b6040516101cf919061367d565b60405180910390f35b6101f260048036038101906101ed9190613698565b61103a565b005b61020e60048036038101906102099190613741565b611236565b005b610218611301565b60405161022591906137e3565b60405180910390f35b61024860048036038101906102439190613230565b611327565b6040516102559190613949565b60405180910390f35b61027860048036038101906102739190613741565b6114c2565b005b610294600480360381019061028f9190613965565b61156b565b005b60008060066000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16600281111561040f5761040e613830565b5b600281111561042157610420613830565b5b8152505090506104708160a00151826040015167ffffffffffffffff168360c0015186600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360046115ab565b915050919050565b60008060066000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660028111156105f1576105f0613830565b5b600281111561060357610602613830565b5b8152505090506106578160c00151826020015167ffffffffffffffff16836080015167ffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166116c4565b915050919050565b61068a600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611741565b610696848484846117e9565b60005b8484905081101561092e576000808484848181106106ba576106b96139b2565b5b905060200201358787858181106106d4576106d36139b2565b5b9050602002013591509150600060066000848152602001908152602001600020905081600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161075291906139f0565b602060405180830381865afa15801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190613a20565b10156107cb576040517f7276110900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610854576040517fb47f2b3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000683635c9adc5dea000008361086b9190613a7c565b146108a2576040517f1d823d0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108d0600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633308561182e565b6108db81848461187e565b82823373ffffffffffffffffffffffffffffffffffffffff167f1004c640a4c8dbc3c9dd5ff33837d99e4882aaf2b20fb8e7c419fc83c8ca5bd060405160405180910390a4836001019350505050610699565b5050505050565b6000610943878787876117e9565b828290508585905014610982576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109ad600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611741565b5b86869050811015610f4e576000808888848181106109cf576109ce6139b2565b5b905060200201358787858181106109e9576109e86139b2565b5b905060200201359150915060006006600084815260200190815260200160002090506064600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f822a5b2856040518263ffffffff1660e01b8152600401610a68919061326c565b602060405180830381865afa158015610a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa99190613a20565b1015610ae1576040517f7f36105d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610b53919061326c565b602060405180830381865afa158015610b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b949190613ac2565b73ffffffffffffffffffffffffffffffffffffffff1614610be1576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bea8261194d565b610c20576040517fabf20e8f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610c7f93929190613aef565b600060405180830381600087803b158015610c9957600080fd5b505af1158015610cad573d6000803e3d6000fd5b50505050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550818160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550428160010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550858585818110610d8857610d876139b2565b5b9050602002016020810190610d9d9190613b4b565b8160040160006101000a81548160ff02191690836002811115610dc357610dc2613830565b5b0217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e599190613a20565b8160030181905550600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083908060018154018082558091505060019003906000526020600020016000909190919091505581833373ffffffffffffffffffffffffffffffffffffffff167ff0a4b106684863ac7bbc666f47a082e4f6a197f11447743c5347b3344b6b527e428a8a8a818110610f1557610f146139b2565b5b9050602002016020810190610f2a9190613b4b565b604051610f38929190613b87565b60405180910390a48360010193505050506109ae565b50505050505050565b6060600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610fe257602002820191906000526020600020905b815481526020019060010190808311610fce575b50505050509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900460ff1615905080801561106b5750600160008054906101000a900460ff1660ff16105b80611098575061107a30611976565b1580156110975750600160008054906101000a900460ff1660ff16145b5b6110d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ce90613c33565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611114576001600060016101000a81548160ff0219169083151502179055505b81600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156112305760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516112279190613c9b565b60405180910390a15b50505050565b818190508484905014611275576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b848490508110156112fa576112a5858583818110611299576112986139b2565b5b90506020020135611999565b6112ef8585838181106112bb576112ba6139b2565b5b905060200201358484848181106112d5576112d46139b2565b5b90506020020160208101906112ea9190613cee565b611d55565b806001019050611278565b5050505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61132f61315b565b60066000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660028111156114a5576114a4613830565b5b60028111156114b7576114b6613830565b5b815250509050919050565b818190508484905014611501576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8484905081101561156457611559858583818110611525576115246139b2565b5b9050602002013584848481811061153f5761153e6139b2565b5b90506020020160208101906115549190613cee565b612233565b806001019050611504565b5050505050565b60005b828290508110156115a65761159b83838381811061158f5761158e6139b2565b5b905060200201356125a1565b80600101905061156e565b505050565b60008088036115bd57600090506116b9565b600080600190505b88811161167e576000620151808660008a8152602001908152602001600020600084815260200190815260200160002054426116019190613d4a565b61160b9190613d7e565b905060008560008a815260200190815260200160002060008860008c8152602001908152602001600020600086815260200190815260200160002054815260200190815260200160002054905080826116649190613daf565b8461166f9190613df1565b935082600101925050506115c5565b5061271068056bc75e2d631000006116968988612a15565b6116a09190613daf565b826116ab9190613d4a565b6116b59190613d7e565b9150505b979650505050505050565b60008084036116d65760009050611739565b60006116e185612e2f565b905060006201518085426116f59190613d4a565b6116ff9190613d7e565b9050670de0b6b3a76400006117148886612a15565b82846117209190613daf565b61172a9190613d4a565b6117349190613daf565b925050505b949350505050565b8073ffffffffffffffffffffffffffffffffffffffff1663ae4b37e46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561178c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b09190613e3a565b6117e6576040517f288de97200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b818190508484905014611828576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6040516323b872dd600052836020528260405281606052602060006064601c6000895af13d15600160005114171661186e57637939f4246000526004601cfd5b6000606052806040525050505050565b80836002016000828254019250508190555082600101600081819054906101000a900467ffffffffffffffff1660010191906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508060046000848152602001908152602001600020600042815260200190815260200160002081905550426003600084815260200190815260200160002060008560010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002081905550505050565b60006241eb0082148061196257506283d60082145b8061196f575062c5c10082145b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060066000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115611b1157611b10613830565b5b6002811115611b2357611b22613830565b5b815250509050600080611b3584610296565b8360e001519150915060006002811115611b5257611b51613830565b5b816002811115611b6557611b64613830565b5b03611bfe57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663743f4e9485846040518363ffffffff1660e01b8152600401611bc7929190613e67565b600060405180830381600087803b158015611be157600080fd5b505af1158015611bf5573d6000803e3d6000fd5b50505050611d4f565b60016002811115611c1257611c11613830565b5b816002811115611c2557611c24613830565b5b03611cbe57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663067ea39285846040518363ffffffff1660e01b8152600401611c87929190613e67565b600060405180830381600087803b158015611ca157600080fd5b505af1158015611cb5573d6000803e3d6000fd5b50505050611d4e565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0c5057785846040518363ffffffff1660e01b8152600401611d1b929190613e67565b600060405180830381600087803b158015611d3557600080fd5b505af1158015611d49573d6000803e3d6000fd5b505050505b5b50505050565b600060066000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115611ecd57611ecc613830565b5b6002811115611edf57611ede613830565b5b81525050905060008160a0015103611f23576040517f9b4bb81b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600190506000805b846040015167ffffffffffffffff1683116120ea57600080600360008a8152602001908152602001600020600086815260200190815260200160002054600360008b81526020019081526020016000206000600188018152602001908152602001600020549150915062278d00820142108015611fa9575087155b15611fb55750506120df565b62278d00820142108015611fc65750875b611ff957600460008a81526020019081526020016000206000838152602001908152602001600020548401935083612035565b6002600460008b81526020019081526020016000206000848152602001908152602001600020548161202e5761202d613a4d565b5b0484019350835b50878061205057506001876040015167ffffffffffffffff16145b6120815780600360008b815260200190815260200160002060008781526020019081526020016000208190556120ab565b6000600360008b815260200190815260200160002060008781526020019081526020016000208190555b506000600460008b815260200190815260200160002060008481526020019081526020016000208190555082600101925050505b826001019250611f2e565b806006600089815260200190815260200160002060010160008282829054906101000a900467ffffffffffffffff160392506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550816006600089815260200190815260200160002060020160008282540392505081905550818560a001510393506000841415801561217b5750855b156121af576121ae600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600186612e63565b5b600082146121e5576121e4600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff163386612e63565b5b81873373ffffffffffffffffffffffffffffffffffffffff167fa720e44767e2cddb37cfa697023b1f3875d107b58722b1cb628083a465290af860405160405180910390a450505050505050565b600060066000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660028111156123ab576123aa613830565b5b60028111156123bd576123bc613830565b5b8152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161461242c576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061243784610478565b905060008103612473576040517f9b4bb81b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426006600086815260200190815260200160002060010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508261254957600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401612512929190613e90565b600060405180830381600087803b15801561252c57600080fd5b505af1158015612540573d6000803e3d6000fd5b50505050612554565b6125538482612eac565b5b821515843373ffffffffffffffffffffffffffffffffffffffff167f10fffc2725e2f04d2e9a7aa7762d3db31dd4051420267e5be076a5b13e8bb07760405160405180910390a450505050565b600060066000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16600281111561271957612718613830565b5b600281111561272b5761272a613830565b5b8152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161461279a576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806020015181606001516127ae9190613eb9565b67ffffffffffffffff164210156127f1576040517ff5dcc1e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006127fc83610478565b111561280e5761280d826000612233565b5b60008160a00151111561282757612826826001611d55565b5b61286f600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208361309d565b60066000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549067ffffffffffffffff02191690556001820160006101000a81549067ffffffffffffffff02191690556001820160086101000a81549067ffffffffffffffff02191690556001820160106101000a81549067ffffffffffffffff0219169055600282016000905560038201600090556004820160006101000a81549060ff02191690555050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b815260040161299b93929190613aef565b600060405180830381600087803b1580156129b557600080fd5b505af11580156129c9573d6000803e3d6000fd5b50505050813373ffffffffffffffffffffffffffffffffffffffff167f26727522aa20721ee01410aea547e7fc187973e8abf49394168d3c9cb4c90cf260405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a879190613a20565b8414612c1b576000620151808473ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ade573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b029190613a20565b42612b0d9190613d4a565b612b179190613d7e565b9050808473ffffffffffffffffffffffffffffffffffffffff1663d09f53c0876040518263ffffffff1660e01b8152600401612b53919061326c565b602060405180830381865afa158015612b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b949190613a20565b8573ffffffffffffffffffffffffffffffffffffffff16637bd90cc26040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c039190613a20565b612c0d9190613d4a565b612c179190613df1565b9150505b60008403612e19576000808473ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c959190613a20565b03612ca1576000612d2d565b620151808473ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d149190613a20565b42612d1f9190613d4a565b612d299190613d7e565b9050805b508373ffffffffffffffffffffffffffffffffffffffff1663ae4b37e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9d9190613e3a565b15612e14578373ffffffffffffffffffffffffffffffffffffffff16637bd90cc26040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e119190613a20565b90505b809150505b600a81612e269190613daf565b91505092915050565b60006241eb008203612e4057600a90505b6283d6008203612e4f57603290505b62c5c1008203612e5e57606490505b919050565b81601a5280603a5269a9059cbb00000000000060005260206000604460166000875af13d156001600051141716612ea2576390b8ec186000526004601cfd5b6000603a52505050565b6000683635c9adc5dea0000082612ec39190613a7c565b9050818103612efe576040517f1d823d0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008114612f9657600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401612f63929190613e90565b600060405180830381600087803b158015612f7d57600080fd5b505af1158015612f91573d6000803e3d6000fd5b505050505b60008183612fa49190613d4a565b9050612fc360066000868152602001908152602001600020858361187e565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401613020929190613e90565b600060405180830381600087803b15801561303a57600080fd5b505af115801561304e573d6000803e3d6000fd5b5050505083813373ffffffffffffffffffffffffffffffffffffffff167f1004c640a4c8dbc3c9dd5ff33837d99e4882aaf2b20fb8e7c419fc83c8ca5bd060405160405180910390a450505050565b60005b828054905081101561315657818382815481106130c0576130bf6139b2565b5b90600052602060002001540361314b5782600184805490506130e29190613d4a565b815481106130f3576130f26139b2565b5b9060005260206000200154838281548110613111576131106139b2565b5b9060005260206000200181905550828054806131305761312f613ef5565b5b60019003818190600052602060002001600090559055613156565b8060010190506130a0565b505050565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681526020016000815260200160008152602001600060028111156131ea576131e9613830565b5b81525090565b600080fd5b600080fd5b6000819050919050565b61320d816131fa565b811461321857600080fd5b50565b60008135905061322a81613204565b92915050565b600060208284031215613246576132456131f0565b5b60006132548482850161321b565b91505092915050565b613266816131fa565b82525050565b6000602082019050613281600083018461325d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126132ac576132ab613287565b5b8235905067ffffffffffffffff8111156132c9576132c861328c565b5b6020830191508360208202830111156132e5576132e4613291565b5b9250929050565b60008060008060408587031215613306576133056131f0565b5b600085013567ffffffffffffffff811115613324576133236131f5565b5b61333087828801613296565b9450945050602085013567ffffffffffffffff811115613353576133526131f5565b5b61335f87828801613296565b925092505092959194509250565b60008083601f84011261338357613382613287565b5b8235905067ffffffffffffffff8111156133a05761339f61328c565b5b6020830191508360208202830111156133bc576133bb613291565b5b9250929050565b600080600080600080606087890312156133e0576133df6131f0565b5b600087013567ffffffffffffffff8111156133fe576133fd6131f5565b5b61340a89828a01613296565b9650965050602087013567ffffffffffffffff81111561342d5761342c6131f5565b5b61343989828a01613296565b9450945050604087013567ffffffffffffffff81111561345c5761345b6131f5565b5b61346889828a0161336d565b92509250509295509295509295565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006134a282613477565b9050919050565b6134b281613497565b81146134bd57600080fd5b50565b6000813590506134cf816134a9565b92915050565b6000602082840312156134eb576134ea6131f0565b5b60006134f9848285016134c0565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613537816131fa565b82525050565b6000613549838361352e565b60208301905092915050565b6000602082019050919050565b600061356d82613502565b613577818561350d565b93506135828361351e565b8060005b838110156135b357815161359a888261353d565b97506135a583613555565b925050600181019050613586565b5085935050505092915050565b600060208201905081810360008301526135da8184613562565b905092915050565b6000819050919050565b60006136076136026135fd84613477565b6135e2565b613477565b9050919050565b6000613619826135ec565b9050919050565b600061362b8261360e565b9050919050565b61363b81613620565b82525050565b60006020820190506136566000830184613632565b92915050565b60006136678261360e565b9050919050565b6136778161365c565b82525050565b6000602082019050613692600083018461366e565b92915050565b6000806000606084860312156136b1576136b06131f0565b5b60006136bf868287016134c0565b93505060206136d0868287016134c0565b92505060406136e1868287016134c0565b9150509250925092565b60008083601f84011261370157613700613287565b5b8235905067ffffffffffffffff81111561371e5761371d61328c565b5b60208301915083602082028301111561373a57613739613291565b5b9250929050565b6000806000806040858703121561375b5761375a6131f0565b5b600085013567ffffffffffffffff811115613779576137786131f5565b5b61378587828801613296565b9450945050602085013567ffffffffffffffff8111156137a8576137a76131f5565b5b6137b4878288016136eb565b925092505092959194509250565b60006137cd8261360e565b9050919050565b6137dd816137c2565b82525050565b60006020820190506137f860008301846137d4565b92915050565b61380781613497565b82525050565b600067ffffffffffffffff82169050919050565b61382a8161380d565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106138705761386f613830565b5b50565b60008190506138818261385f565b919050565b600061389182613873565b9050919050565b6138a181613886565b82525050565b610100820160008201516138be60008501826137fe565b5060208201516138d16020850182613821565b5060408201516138e46040850182613821565b5060608201516138f76060850182613821565b50608082015161390a6080850182613821565b5060a082015161391d60a085018261352e565b5060c082015161393060c085018261352e565b5060e082015161394360e0850182613898565b50505050565b60006101008201905061395f60008301846138a7565b92915050565b6000806020838503121561397c5761397b6131f0565b5b600083013567ffffffffffffffff81111561399a576139996131f5565b5b6139a685828601613296565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6139ea81613497565b82525050565b6000602082019050613a0560008301846139e1565b92915050565b600081519050613a1a81613204565b92915050565b600060208284031215613a3657613a356131f0565b5b6000613a4484828501613a0b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613a87826131fa565b9150613a92836131fa565b925082613aa257613aa1613a4d565b5b828206905092915050565b600081519050613abc816134a9565b92915050565b600060208284031215613ad857613ad76131f0565b5b6000613ae684828501613aad565b91505092915050565b6000606082019050613b0460008301866139e1565b613b1160208301856139e1565b613b1e604083018461325d565b949350505050565b60038110613b3357600080fd5b50565b600081359050613b4581613b26565b92915050565b600060208284031215613b6157613b606131f0565b5b6000613b6f84828501613b36565b91505092915050565b613b8181613886565b82525050565b6000604082019050613b9c600083018561325d565b613ba96020830184613b78565b9392505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613c1d602e83613bb0565b9150613c2882613bc1565b604082019050919050565b60006020820190508181036000830152613c4c81613c10565b9050919050565b6000819050919050565b600060ff82169050919050565b6000613c85613c80613c7b84613c53565b6135e2565b613c5d565b9050919050565b613c9581613c6a565b82525050565b6000602082019050613cb06000830184613c8c565b92915050565b60008115159050919050565b613ccb81613cb6565b8114613cd657600080fd5b50565b600081359050613ce881613cc2565b92915050565b600060208284031215613d0457613d036131f0565b5b6000613d1284828501613cd9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613d55826131fa565b9150613d60836131fa565b9250828203905081811115613d7857613d77613d1b565b5b92915050565b6000613d89826131fa565b9150613d94836131fa565b925082613da457613da3613a4d565b5b828204905092915050565b6000613dba826131fa565b9150613dc5836131fa565b9250828202613dd3816131fa565b91508282048414831517613dea57613de9613d1b565b5b5092915050565b6000613dfc826131fa565b9150613e07836131fa565b9250828201905080821115613e1f57613e1e613d1b565b5b92915050565b600081519050613e3481613cc2565b92915050565b600060208284031215613e5057613e4f6131f0565b5b6000613e5e84828501613e25565b91505092915050565b6000604082019050613e7c600083018561325d565b613e89602083018461325d565b9392505050565b6000604082019050613ea560008301856139e1565b613eb2602083018461325d565b9392505050565b6000613ec48261380d565b9150613ecf8361380d565b9250828201905067ffffffffffffffff811115613eef57613eee613d1b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212204e18a04c1eb73e4599a87adaac3178795ab19f9464e901ad1554e037d727adee64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063b00bec651161008c578063d88ad88711610066578063d88ad88714610210578063dd4fcc161461022e578063ea32dac51461025e578063ec42cb771461027a576100cf565b8063b00bec65146101ba578063c0c53b8b146101d8578063cb2fe05e146101f4576100cf565b80632a1f4146146100d45780633e39953a14610104578063547ac071146101345780635970f4531461015057806363c28db11461016c5780637fd4bfd51461019c575b600080fd5b6100ee60048036038101906100e99190613230565b610296565b6040516100fb919061326c565b60405180910390f35b61011e60048036038101906101199190613230565b610478565b60405161012b919061326c565b60405180910390f35b61014e600480360381019061014991906132ec565b61065f565b005b61016a600480360381019061016591906133c3565b610935565b005b610186600480360381019061018191906134d5565b610f57565b60405161019391906135c0565b60405180910390f35b6101a4610fee565b6040516101b19190613641565b60405180910390f35b6101c2611014565b6040516101cf919061367d565b60405180910390f35b6101f260048036038101906101ed9190613698565b61103a565b005b61020e60048036038101906102099190613741565b611236565b005b610218611301565b60405161022591906137e3565b60405180910390f35b61024860048036038101906102439190613230565b611327565b6040516102559190613949565b60405180910390f35b61027860048036038101906102739190613741565b6114c2565b005b610294600480360381019061028f9190613965565b61156b565b005b60008060066000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16600281111561040f5761040e613830565b5b600281111561042157610420613830565b5b8152505090506104708160a00151826040015167ffffffffffffffff168360c0015186600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360046115ab565b915050919050565b60008060066000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660028111156105f1576105f0613830565b5b600281111561060357610602613830565b5b8152505090506106578160c00151826020015167ffffffffffffffff16836080015167ffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166116c4565b915050919050565b61068a600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611741565b610696848484846117e9565b60005b8484905081101561092e576000808484848181106106ba576106b96139b2565b5b905060200201358787858181106106d4576106d36139b2565b5b9050602002013591509150600060066000848152602001908152602001600020905081600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161075291906139f0565b602060405180830381865afa15801561076f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107939190613a20565b10156107cb576040517f7276110900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610854576040517fb47f2b3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000683635c9adc5dea000008361086b9190613a7c565b146108a2576040517f1d823d0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108d0600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633308561182e565b6108db81848461187e565b82823373ffffffffffffffffffffffffffffffffffffffff167f1004c640a4c8dbc3c9dd5ff33837d99e4882aaf2b20fb8e7c419fc83c8ca5bd060405160405180910390a4836001019350505050610699565b5050505050565b6000610943878787876117e9565b828290508585905014610982576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109ad600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611741565b5b86869050811015610f4e576000808888848181106109cf576109ce6139b2565b5b905060200201358787858181106109e9576109e86139b2565b5b905060200201359150915060006006600084815260200190815260200160002090506064600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f822a5b2856040518263ffffffff1660e01b8152600401610a68919061326c565b602060405180830381865afa158015610a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa99190613a20565b1015610ae1576040517f7f36105d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610b53919061326c565b602060405180830381865afa158015610b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b949190613ac2565b73ffffffffffffffffffffffffffffffffffffffff1614610be1576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bea8261194d565b610c20576040517fabf20e8f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610c7f93929190613aef565b600060405180830381600087803b158015610c9957600080fd5b505af1158015610cad573d6000803e3d6000fd5b50505050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550818160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550428160010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550858585818110610d8857610d876139b2565b5b9050602002016020810190610d9d9190613b4b565b8160040160006101000a81548160ff02191690836002811115610dc357610dc2613830565b5b0217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e599190613a20565b8160030181905550600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083908060018154018082558091505060019003906000526020600020016000909190919091505581833373ffffffffffffffffffffffffffffffffffffffff167ff0a4b106684863ac7bbc666f47a082e4f6a197f11447743c5347b3344b6b527e428a8a8a818110610f1557610f146139b2565b5b9050602002016020810190610f2a9190613b4b565b604051610f38929190613b87565b60405180910390a48360010193505050506109ae565b50505050505050565b6060600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610fe257602002820191906000526020600020905b815481526020019060010190808311610fce575b50505050509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900460ff1615905080801561106b5750600160008054906101000a900460ff1660ff16105b80611098575061107a30611976565b1580156110975750600160008054906101000a900460ff1660ff16145b5b6110d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ce90613c33565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611114576001600060016101000a81548160ff0219169083151502179055505b81600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156112305760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516112279190613c9b565b60405180910390a15b50505050565b818190508484905014611275576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b848490508110156112fa576112a5858583818110611299576112986139b2565b5b90506020020135611999565b6112ef8585838181106112bb576112ba6139b2565b5b905060200201358484848181106112d5576112d46139b2565b5b90506020020160208101906112ea9190613cee565b611d55565b806001019050611278565b5050505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61132f61315b565b60066000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660028111156114a5576114a4613830565b5b60028111156114b7576114b6613830565b5b815250509050919050565b818190508484905014611501576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8484905081101561156457611559858583818110611525576115246139b2565b5b9050602002013584848481811061153f5761153e6139b2565b5b90506020020160208101906115549190613cee565b612233565b806001019050611504565b5050505050565b60005b828290508110156115a65761159b83838381811061158f5761158e6139b2565b5b905060200201356125a1565b80600101905061156e565b505050565b60008088036115bd57600090506116b9565b600080600190505b88811161167e576000620151808660008a8152602001908152602001600020600084815260200190815260200160002054426116019190613d4a565b61160b9190613d7e565b905060008560008a815260200190815260200160002060008860008c8152602001908152602001600020600086815260200190815260200160002054815260200190815260200160002054905080826116649190613daf565b8461166f9190613df1565b935082600101925050506115c5565b5061271068056bc75e2d631000006116968988612a15565b6116a09190613daf565b826116ab9190613d4a565b6116b59190613d7e565b9150505b979650505050505050565b60008084036116d65760009050611739565b60006116e185612e2f565b905060006201518085426116f59190613d4a565b6116ff9190613d7e565b9050670de0b6b3a76400006117148886612a15565b82846117209190613daf565b61172a9190613d4a565b6117349190613daf565b925050505b949350505050565b8073ffffffffffffffffffffffffffffffffffffffff1663ae4b37e46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561178c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b09190613e3a565b6117e6576040517f288de97200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b818190508484905014611828576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6040516323b872dd600052836020528260405281606052602060006064601c6000895af13d15600160005114171661186e57637939f4246000526004601cfd5b6000606052806040525050505050565b80836002016000828254019250508190555082600101600081819054906101000a900467ffffffffffffffff1660010191906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508060046000848152602001908152602001600020600042815260200190815260200160002081905550426003600084815260200190815260200160002060008560010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002081905550505050565b60006241eb0082148061196257506283d60082145b8061196f575062c5c10082145b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060066000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115611b1157611b10613830565b5b6002811115611b2357611b22613830565b5b815250509050600080611b3584610296565b8360e001519150915060006002811115611b5257611b51613830565b5b816002811115611b6557611b64613830565b5b03611bfe57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663743f4e9485846040518363ffffffff1660e01b8152600401611bc7929190613e67565b600060405180830381600087803b158015611be157600080fd5b505af1158015611bf5573d6000803e3d6000fd5b50505050611d4f565b60016002811115611c1257611c11613830565b5b816002811115611c2557611c24613830565b5b03611cbe57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663067ea39285846040518363ffffffff1660e01b8152600401611c87929190613e67565b600060405180830381600087803b158015611ca157600080fd5b505af1158015611cb5573d6000803e3d6000fd5b50505050611d4e565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0c5057785846040518363ffffffff1660e01b8152600401611d1b929190613e67565b600060405180830381600087803b158015611d3557600080fd5b505af1158015611d49573d6000803e3d6000fd5b505050505b5b50505050565b600060066000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115611ecd57611ecc613830565b5b6002811115611edf57611ede613830565b5b81525050905060008160a0015103611f23576040517f9b4bb81b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600190506000805b846040015167ffffffffffffffff1683116120ea57600080600360008a8152602001908152602001600020600086815260200190815260200160002054600360008b81526020019081526020016000206000600188018152602001908152602001600020549150915062278d00820142108015611fa9575087155b15611fb55750506120df565b62278d00820142108015611fc65750875b611ff957600460008a81526020019081526020016000206000838152602001908152602001600020548401935083612035565b6002600460008b81526020019081526020016000206000848152602001908152602001600020548161202e5761202d613a4d565b5b0484019350835b50878061205057506001876040015167ffffffffffffffff16145b6120815780600360008b815260200190815260200160002060008781526020019081526020016000208190556120ab565b6000600360008b815260200190815260200160002060008781526020019081526020016000208190555b506000600460008b815260200190815260200160002060008481526020019081526020016000208190555082600101925050505b826001019250611f2e565b806006600089815260200190815260200160002060010160008282829054906101000a900467ffffffffffffffff160392506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550816006600089815260200190815260200160002060020160008282540392505081905550818560a001510393506000841415801561217b5750855b156121af576121ae600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600186612e63565b5b600082146121e5576121e4600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff163386612e63565b5b81873373ffffffffffffffffffffffffffffffffffffffff167fa720e44767e2cddb37cfa697023b1f3875d107b58722b1cb628083a465290af860405160405180910390a450505050505050565b600060066000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660028111156123ab576123aa613830565b5b60028111156123bd576123bc613830565b5b8152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161461242c576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061243784610478565b905060008103612473576040517f9b4bb81b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426006600086815260200190815260200160002060010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508261254957600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401612512929190613e90565b600060405180830381600087803b15801561252c57600080fd5b505af1158015612540573d6000803e3d6000fd5b50505050612554565b6125538482612eac565b5b821515843373ffffffffffffffffffffffffffffffffffffffff167f10fffc2725e2f04d2e9a7aa7762d3db31dd4051420267e5be076a5b13e8bb07760405160405180910390a450505050565b600060066000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16600281111561271957612718613830565b5b600281111561272b5761272a613830565b5b8152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161461279a576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806020015181606001516127ae9190613eb9565b67ffffffffffffffff164210156127f1576040517ff5dcc1e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006127fc83610478565b111561280e5761280d826000612233565b5b60008160a00151111561282757612826826001611d55565b5b61286f600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208361309d565b60066000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549067ffffffffffffffff02191690556001820160006101000a81549067ffffffffffffffff02191690556001820160086101000a81549067ffffffffffffffff02191690556001820160106101000a81549067ffffffffffffffff0219169055600282016000905560038201600090556004820160006101000a81549060ff02191690555050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b815260040161299b93929190613aef565b600060405180830381600087803b1580156129b557600080fd5b505af11580156129c9573d6000803e3d6000fd5b50505050813373ffffffffffffffffffffffffffffffffffffffff167f26727522aa20721ee01410aea547e7fc187973e8abf49394168d3c9cb4c90cf260405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a879190613a20565b8414612c1b576000620151808473ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ade573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b029190613a20565b42612b0d9190613d4a565b612b179190613d7e565b9050808473ffffffffffffffffffffffffffffffffffffffff1663d09f53c0876040518263ffffffff1660e01b8152600401612b53919061326c565b602060405180830381865afa158015612b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b949190613a20565b8573ffffffffffffffffffffffffffffffffffffffff16637bd90cc26040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c039190613a20565b612c0d9190613d4a565b612c179190613df1565b9150505b60008403612e19576000808473ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c959190613a20565b03612ca1576000612d2d565b620151808473ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d149190613a20565b42612d1f9190613d4a565b612d299190613d7e565b9050805b508373ffffffffffffffffffffffffffffffffffffffff1663ae4b37e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9d9190613e3a565b15612e14578373ffffffffffffffffffffffffffffffffffffffff16637bd90cc26040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e119190613a20565b90505b809150505b600a81612e269190613daf565b91505092915050565b60006241eb008203612e4057600a90505b6283d6008203612e4f57603290505b62c5c1008203612e5e57606490505b919050565b81601a5280603a5269a9059cbb00000000000060005260206000604460166000875af13d156001600051141716612ea2576390b8ec186000526004601cfd5b6000603a52505050565b6000683635c9adc5dea0000082612ec39190613a7c565b9050818103612efe576040517f1d823d0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008114612f9657600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401612f63929190613e90565b600060405180830381600087803b158015612f7d57600080fd5b505af1158015612f91573d6000803e3d6000fd5b505050505b60008183612fa49190613d4a565b9050612fc360066000868152602001908152602001600020858361187e565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401613020929190613e90565b600060405180830381600087803b15801561303a57600080fd5b505af115801561304e573d6000803e3d6000fd5b5050505083813373ffffffffffffffffffffffffffffffffffffffff167f1004c640a4c8dbc3c9dd5ff33837d99e4882aaf2b20fb8e7c419fc83c8ca5bd060405160405180910390a450505050565b60005b828054905081101561315657818382815481106130c0576130bf6139b2565b5b90600052602060002001540361314b5782600184805490506130e29190613d4a565b815481106130f3576130f26139b2565b5b9060005260206000200154838281548110613111576131106139b2565b5b9060005260206000200181905550828054806131305761312f613ef5565b5b60019003818190600052602060002001600090559055613156565b8060010190506130a0565b505050565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681526020016000815260200160008152602001600060028111156131ea576131e9613830565b5b81525090565b600080fd5b600080fd5b6000819050919050565b61320d816131fa565b811461321857600080fd5b50565b60008135905061322a81613204565b92915050565b600060208284031215613246576132456131f0565b5b60006132548482850161321b565b91505092915050565b613266816131fa565b82525050565b6000602082019050613281600083018461325d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126132ac576132ab613287565b5b8235905067ffffffffffffffff8111156132c9576132c861328c565b5b6020830191508360208202830111156132e5576132e4613291565b5b9250929050565b60008060008060408587031215613306576133056131f0565b5b600085013567ffffffffffffffff811115613324576133236131f5565b5b61333087828801613296565b9450945050602085013567ffffffffffffffff811115613353576133526131f5565b5b61335f87828801613296565b925092505092959194509250565b60008083601f84011261338357613382613287565b5b8235905067ffffffffffffffff8111156133a05761339f61328c565b5b6020830191508360208202830111156133bc576133bb613291565b5b9250929050565b600080600080600080606087890312156133e0576133df6131f0565b5b600087013567ffffffffffffffff8111156133fe576133fd6131f5565b5b61340a89828a01613296565b9650965050602087013567ffffffffffffffff81111561342d5761342c6131f5565b5b61343989828a01613296565b9450945050604087013567ffffffffffffffff81111561345c5761345b6131f5565b5b61346889828a0161336d565b92509250509295509295509295565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006134a282613477565b9050919050565b6134b281613497565b81146134bd57600080fd5b50565b6000813590506134cf816134a9565b92915050565b6000602082840312156134eb576134ea6131f0565b5b60006134f9848285016134c0565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613537816131fa565b82525050565b6000613549838361352e565b60208301905092915050565b6000602082019050919050565b600061356d82613502565b613577818561350d565b93506135828361351e565b8060005b838110156135b357815161359a888261353d565b97506135a583613555565b925050600181019050613586565b5085935050505092915050565b600060208201905081810360008301526135da8184613562565b905092915050565b6000819050919050565b60006136076136026135fd84613477565b6135e2565b613477565b9050919050565b6000613619826135ec565b9050919050565b600061362b8261360e565b9050919050565b61363b81613620565b82525050565b60006020820190506136566000830184613632565b92915050565b60006136678261360e565b9050919050565b6136778161365c565b82525050565b6000602082019050613692600083018461366e565b92915050565b6000806000606084860312156136b1576136b06131f0565b5b60006136bf868287016134c0565b93505060206136d0868287016134c0565b92505060406136e1868287016134c0565b9150509250925092565b60008083601f84011261370157613700613287565b5b8235905067ffffffffffffffff81111561371e5761371d61328c565b5b60208301915083602082028301111561373a57613739613291565b5b9250929050565b6000806000806040858703121561375b5761375a6131f0565b5b600085013567ffffffffffffffff811115613779576137786131f5565b5b61378587828801613296565b9450945050602085013567ffffffffffffffff8111156137a8576137a76131f5565b5b6137b4878288016136eb565b925092505092959194509250565b60006137cd8261360e565b9050919050565b6137dd816137c2565b82525050565b60006020820190506137f860008301846137d4565b92915050565b61380781613497565b82525050565b600067ffffffffffffffff82169050919050565b61382a8161380d565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106138705761386f613830565b5b50565b60008190506138818261385f565b919050565b600061389182613873565b9050919050565b6138a181613886565b82525050565b610100820160008201516138be60008501826137fe565b5060208201516138d16020850182613821565b5060408201516138e46040850182613821565b5060608201516138f76060850182613821565b50608082015161390a6080850182613821565b5060a082015161391d60a085018261352e565b5060c082015161393060c085018261352e565b5060e082015161394360e0850182613898565b50505050565b60006101008201905061395f60008301846138a7565b92915050565b6000806020838503121561397c5761397b6131f0565b5b600083013567ffffffffffffffff81111561399a576139996131f5565b5b6139a685828601613296565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6139ea81613497565b82525050565b6000602082019050613a0560008301846139e1565b92915050565b600081519050613a1a81613204565b92915050565b600060208284031215613a3657613a356131f0565b5b6000613a4484828501613a0b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613a87826131fa565b9150613a92836131fa565b925082613aa257613aa1613a4d565b5b828206905092915050565b600081519050613abc816134a9565b92915050565b600060208284031215613ad857613ad76131f0565b5b6000613ae684828501613aad565b91505092915050565b6000606082019050613b0460008301866139e1565b613b1160208301856139e1565b613b1e604083018461325d565b949350505050565b60038110613b3357600080fd5b50565b600081359050613b4581613b26565b92915050565b600060208284031215613b6157613b606131f0565b5b6000613b6f84828501613b36565b91505092915050565b613b8181613886565b82525050565b6000604082019050613b9c600083018561325d565b613ba96020830184613b78565b9392505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613c1d602e83613bb0565b9150613c2882613bc1565b604082019050919050565b60006020820190508181036000830152613c4c81613c10565b9050919050565b6000819050919050565b600060ff82169050919050565b6000613c85613c80613c7b84613c53565b6135e2565b613c5d565b9050919050565b613c9581613c6a565b82525050565b6000602082019050613cb06000830184613c8c565b92915050565b60008115159050919050565b613ccb81613cb6565b8114613cd657600080fd5b50565b600081359050613ce881613cc2565b92915050565b600060208284031215613d0457613d036131f0565b5b6000613d1284828501613cd9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613d55826131fa565b9150613d60836131fa565b9250828203905081811115613d7857613d77613d1b565b5b92915050565b6000613d89826131fa565b9150613d94836131fa565b925082613da457613da3613a4d565b5b828204905092915050565b6000613dba826131fa565b9150613dc5836131fa565b9250828202613dd3816131fa565b91508282048414831517613dea57613de9613d1b565b5b5092915050565b6000613dfc826131fa565b9150613e07836131fa565b9250828201905080821115613e1f57613e1e613d1b565b5b92915050565b600081519050613e3481613cc2565b92915050565b600060208284031215613e5057613e4f6131f0565b5b6000613e5e84828501613e25565b91505092915050565b6000604082019050613e7c600083018561325d565b613e89602083018461325d565b9392505050565b6000604082019050613ea560008301856139e1565b613eb2602083018461325d565b9392505050565b6000613ec48261380d565b9150613ecf8361380d565b9250828201905067ffffffffffffffff811115613eef57613eee613d1b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212204e18a04c1eb73e4599a87adaac3178795ab19f9464e901ad1554e037d727adee64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimDevelopmentGroundBonesReward(uint256[],bool[])": {
        "params": {
          "_stake": "Whether to stake the reward bones in the development ground",
          "_tokenId": "ID of the development ground"
        }
      },
      "enterDevelopmentGround(uint256[],uint256[],uint8[])": {
        "details": "Enters the DevelopmentGround by transferring the tokens from the sender to the contract and setting the development ground data such as owner, entry time, lock period, etc.",
        "params": {
          "_ground": "Array of grounds for each corresponding token",
          "_lockTime": "Array of lock times for each corresponding token",
          "_tokenId": "Array of token IDs to be transferred"
        }
      },
      "getDevelopmentGroundBonesReward(uint256)": {
        "details": "Returns the reward for the bones staked in the development ground.",
        "params": {
          "_tokenId": "The token ID for the development ground."
        },
        "returns": {
          "_0": "The reward for the bones staked in the development ground."
        }
      },
      "getDevelopmentGroundInfo(uint256)": {
        "details": "This function returns a DevelopmentGround struct containing information about a Development Ground token, specified by its ID, _tokenId.",
        "params": {
          "_tokenId": "ID of the Development Ground token to retrieve information for"
        },
        "returns": {
          "_0": "The DevelopmentGround struct containing information about the specified Development Ground token."
        }
      },
      "getPrimarySkill(uint256)": {
        "params": {
          "_tokenId": "ID of the development ground"
        },
        "returns": {
          "_0": "The primary skill level"
        }
      },
      "leaveDevelopmentGround(uint256[])": {
        "details": "Allows the owner to leave the development ground. This will transfer the token back to the owner and remove any bones staked in the development ground.",
        "params": {
          "_tokenId": "The token ID of the development ground to leave."
        }
      },
      "removeBones(uint256[],bool[])": {
        "details": "Removes bones from a specific development ground.",
        "params": {
          "_all": "Indicates whether to remove all bones or just a portion of them",
          "_tokenId": "The unique identifier for the development ground"
        }
      },
      "stakeBonesInDevelopmentGround(uint256[],uint256[])": {
        "details": "Stakes the bones in the DevelopmentGround by transferring the bones from the sender to the contract and updating the development ground data.",
        "params": {
          "_amount": "Array of amounts of bones to be transferred",
          "_tokenId": "Array of token IDs for the corresponding amounts of bones"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimDevelopmentGroundBonesReward(uint256[],bool[])": {
        "notice": "This function allows the owner of multiple development grounds to claim rewards earned by them."
      },
      "getDevelopmentGroundInfo(uint256)": {
        "notice": "Retrieve information about a Development Ground token."
      },
      "getPrimarySkill(uint256)": {
        "notice": "This function retrieves the primary skill of the `_tokenId` development ground."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4909,
        "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
        "label": "bones",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IBones)7911"
      },
      {
        "astId": 4912,
        "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
        "label": "pits",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPits)7992"
      },
      {
        "astId": 4915,
        "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
        "label": "neandersmol",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(INeandersmol)7962"
      },
      {
        "astId": 4951,
        "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
        "label": "trackTime",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4957,
        "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
        "label": "trackToken",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4962,
        "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
        "label": "ownerToTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4967,
        "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
        "label": "developmentGround",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(DevelopmentGround)8428_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBones)7911": {
        "encoding": "inplace",
        "label": "contract IBones",
        "numberOfBytes": "20"
      },
      "t_contract(INeandersmol)7962": {
        "encoding": "inplace",
        "label": "contract INeandersmol",
        "numberOfBytes": "20"
      },
      "t_contract(IPits)7992": {
        "encoding": "inplace",
        "label": "contract IPits",
        "numberOfBytes": "20"
      },
      "t_enum(Grounds)8457": {
        "encoding": "inplace",
        "label": "enum Grounds",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(DevelopmentGround)8428_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DevelopmentGround)",
        "numberOfBytes": "32",
        "value": "t_struct(DevelopmentGround)8428_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DevelopmentGround)8428_storage": {
        "encoding": "inplace",
        "label": "struct DevelopmentGround",
        "members": [
          {
            "astId": 8412,
            "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8414,
            "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
            "label": "lockPeriod",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 8416,
            "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
            "label": "amountPosition",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 8418,
            "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
            "label": "entryTime",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 8420,
            "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
            "label": "lastRewardTime",
            "offset": 16,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 8422,
            "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
            "label": "bonesStaked",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8424,
            "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
            "label": "currentPitsLockPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8427,
            "contract": "contracts/DevelopmentGrounds.sol:DevelopmentGrounds",
            "label": "ground",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(Grounds)8457"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}