{
  "address": "0xEd8abfC468fDD8E734b3F96248C460Ab4F9eA53B",
  "abi": [
    {
      "inputs": [],
      "name": "DevelopmentGroundIsLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeandersmolsIsLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroBalanceError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimCaveReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeTime",
          "type": "uint256"
        }
      ],
      "name": "EnterCaves",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "LeaveCave",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bones",
      "outputs": [
        {
          "internalType": "contract IBones",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "claimCaveReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "enterCaves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCavesInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "stakingTime",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "lastRewardTimestamp",
              "type": "uint48"
            }
          ],
          "internalType": "struct Cave",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCavesReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getStakedTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "res",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pits",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bones",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_neandersmol",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "leaveCave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "neandersmol",
      "outputs": [
        {
          "internalType": "contract INeandersmol",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pits",
      "outputs": [
        {
          "internalType": "contract IPits",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xddc7a84f4086861efd1a94f85fd58b1f0ddd96f6263d97ae893cbdc71dcca62a",
  "receipt": {
    "to": null,
    "from": "0x45947dfDE271FDbB7759a1F71007528437682Ec2",
    "contractAddress": "0xEd8abfC468fDD8E734b3F96248C460Ab4F9eA53B",
    "transactionIndex": 1,
    "gasUsed": "1469705",
    "logsBloom": "0x
    "blockHash": "0xa5691a0d33c64d4d27b62165925bd45bb2d5bcae7f7c387f1078fce9861366ed",
    "transactionHash": "0xddc7a84f4086861efd1a94f85fd58b1f0ddd96f6263d97ae893cbdc71dcca62a",
    "logs": [],
    "blockNumber": 9493989,
    "cumulativeGasUsed": "1469705",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "3754ff12c22bbcd82280df154a5c110c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DevelopmentGroundIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeandersmolsIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBalanceError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimCaveReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"}],\"name\":\"EnterCaves\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LeaveCave\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bones\",\"outputs\":[{\"internalType\":\"contract IBones\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"claimCaveReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"enterCaves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCavesInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"stakingTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint48\"}],\"internalType\":\"struct Cave\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCavesReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getStakedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"res\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pits\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bones\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_neandersmol\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"leaveCave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"neandersmol\",\"outputs\":[{\"internalType\":\"contract INeandersmol\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pits\",\"outputs\":[{\"internalType\":\"contract IPits\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimCaveReward(uint256[])\":{\"details\":\"Function to allow the caller to claim rewards for multiple Cave tokens.\",\"params\":{\"_tokenId\":\"An array of Cave token IDs to claim rewards for.\"}},\"enterCaves(uint256[])\":{\"details\":\"Allows the owner to enter the caves. This will transfer the token to the contract and set the owner, staking time, and last reward timestamp for the caves.\",\"params\":{\"_tokenId\":\"The token ID of the caves to enter.\"}},\"getCavesInfo(uint256)\":{\"details\":\"This function returns a Caves struct containing information about a Cave token, specified by its ID, _tokenId.\",\"params\":{\"_tokenId\":\"ID of the Cave token to retrieve information for\"},\"returns\":{\"_0\":\"The Caves struct containing information about the specified Cave token.\"}},\"getCavesReward(uint256)\":{\"details\":\"Function to retrieve the rewards for a Cave token.\",\"params\":{\"_tokenId\":\"The ID of the Cave token to retrieve rewards for.\"},\"returns\":{\"_0\":\"The rewards for the specified Cave token.\"}},\"leaveCave(uint256[])\":{\"details\":\"Function to allow the owner of a Cave token to leave the cave and claim any rewards.\",\"params\":{\"_tokenId\":\"An array of Cave token IDs to be claimed and left.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getCavesInfo(uint256)\":{\"notice\":\"Retrieve information about a Cave token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Caves.sol\":\"Caves\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/Caves.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { Lib } from \\\"./library/Lib.sol\\\";\\nimport { IBones } from \\\"./interfaces/IBones.sol\\\";\\nimport { Cave } from \\\"./library/StructsEnums.sol\\\";\\nimport { IPits } from \\\"./interfaces/IPits.sol\\\";\\n\\nimport { INeandersmol } from \\\"./interfaces/INeandersmol.sol\\\";\\n\\nimport {\\n    NotYourToken,\\n    NeandersmolsIsLocked,\\n    ZeroBalanceError\\n} from \\\"./library/Error.sol\\\";\\n\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract Caves is Initializable {\\n    IPits public pits;\\n    IBones public bones;\\n    INeandersmol public neandersmol;\\n\\n    mapping(uint256 => Cave) private caves;\\n\\n    mapping(address => uint256[]) private ownerToTokens;\\n\\n    function initialize(\\n        address _pits,\\n        address _bones,\\n        address _neandersmol\\n    ) external initializer {\\n        bones = IBones(_bones);\\n        pits = IPits(_pits);\\n        neandersmol = INeandersmol(_neandersmol);\\n    }\\n\\n    /**\\n     * @dev Allows the owner to enter the caves. This will transfer the token to the contract and set the owner, staking time, and last reward timestamp for the caves.\\n     * @param _tokenId The token ID of the caves to enter.\\n     */\\n\\n    function enterCaves(uint256[] calldata _tokenId) external {\\n        Lib.pitsValidation(pits);\\n        uint256 i;\\n        for (; i < _tokenId.length; ) {\\n            uint256 tokenId = _tokenId[i];\\n            Cave storage cave = caves[tokenId];\\n            if (neandersmol.ownerOf(tokenId) != msg.sender)\\n                revert NotYourToken();\\n            neandersmol.transferFrom(msg.sender, address(this), tokenId);\\n            cave.owner = msg.sender;\\n            cave.stakingTime = uint48(block.timestamp);\\n            cave.lastRewardTimestamp = uint48(block.timestamp);\\n            ownerToTokens[msg.sender].push(tokenId);\\n            emit EnterCaves(msg.sender, tokenId, block.timestamp);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     *  @dev Function to allow the owner of a Cave token to leave the cave and claim any rewards.\\n     * @param _tokenId An array of Cave token IDs to be claimed and left.\\n     */\\n\\n    function leaveCave(uint256[] calldata _tokenId) external {\\n        uint256 i;\\n        for (; i < _tokenId.length; ) {\\n            uint256 tokenId = _tokenId[i];\\n            Cave memory cave = caves[tokenId];\\n            if (cave.owner != msg.sender) revert NotYourToken();\\n            if (100 days + cave.stakingTime > block.timestamp)\\n                revert NeandersmolsIsLocked();\\n            if (getCavesReward(tokenId) != 0) claimCaveReward(tokenId);\\n            Lib.removeItem(ownerToTokens[msg.sender], tokenId);\\n            delete caves[tokenId];\\n            neandersmol.transferFrom(address(this), msg.sender, tokenId);\\n            emit LeaveCave(msg.sender, tokenId);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to claim the rewards for a Cave token.\\n     * @param _tokenId The ID of the Cave token to claim rewards for.\\n     */\\n\\n    function claimCaveReward(uint256 _tokenId) internal {\\n        uint256 reward = getCavesReward(_tokenId);\\n        if (reward == 0) revert ZeroBalanceError();\\n        caves[_tokenId].lastRewardTimestamp = uint48(block.timestamp);\\n        bones.mint(msg.sender, reward);\\n        emit ClaimCaveReward(msg.sender, _tokenId, reward);\\n    }\\n\\n    /**\\n     * @dev Function to allow the caller to claim rewards for multiple Cave tokens.\\n     * @param _tokenId An array of Cave token IDs to claim rewards for.\\n     */\\n\\n    function claimCaveReward(uint256[] calldata _tokenId) external {\\n        uint256 i;\\n        for (; i < _tokenId.length; ) {\\n            claimCaveReward(_tokenId[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to retrieve the rewards for a Cave token.\\n     * @param _tokenId The ID of the Cave token to retrieve rewards for.\\n     * @return The rewards for the specified Cave token.\\n     */\\n\\n    function getCavesReward(uint256 _tokenId) public view returns (uint256) {\\n        Cave memory cave = caves[_tokenId];\\n        if (cave.lastRewardTimestamp == 0) return 0;\\n        return\\n            ((block.timestamp - cave.lastRewardTimestamp) / 1 days) *\\n            10 *\\n            10 ** 18;\\n    }\\n\\n    /**\\n     * Retrieve information about a Cave token.\\n     * @dev This function returns a Caves struct containing information about a Cave token, specified by its ID, _tokenId.\\n     * @param _tokenId ID of the Cave token to retrieve information for\\n     * @return  The Caves struct containing information about the specified Cave token.\\n     */\\n\\n    function getCavesInfo(\\n        uint256 _tokenId\\n    ) external view returns (Cave memory) {\\n        return caves[_tokenId];\\n    }\\n\\n    function getStakedTokens(\\n        address _owner\\n    ) external view returns (uint256[] memory res) {\\n        return ownerToTokens[_owner];\\n    }\\n\\n    event EnterCaves(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 indexed stakeTime\\n    );\\n\\n    event LeaveCave(address indexed owner, uint256 indexed tokenId);\\n\\n    event ClaimCaveReward(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 indexed amount\\n    );\\n}\\n\",\"keccak256\":\"0xa0570197c9fb5c728a217e3d4abe6ed067987a030dfb0ae2ad6d2e56ed76b287\",\"license\":\"MIT\"},\"contracts/interfaces/IBones.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IBones is IERC20Upgradeable {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x1d61defdfd2e99959e9f4d65b96ceca70df17a1c337f385a519785fe4eda1e47\",\"license\":\"MIT\"},\"contracts/interfaces/INeandersmol.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface INeandersmol is IERC721Upgradeable {\\n    function getCommonSense(uint256 _tokenId) external view returns (uint256);\\n\\n    function developMystics(uint256 _tokenId, uint256 _amount) external;\\n\\n    function developFarmers(uint256 _tokenId, uint256 _amount) external;\\n\\n    function developFighter(uint256 _tokenId, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x3bb0567cb8e37c77a2d29f1ed4736c53ca590b5d2c638ceb22380a0a44823f12\",\"license\":\"MIT\"},\"contracts/interfaces/IPits.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\ninterface IPits {\\n    function validation() external view returns (bool);\\n\\n    function getTimeOut() external view returns (uint256);\\n\\n    function getTimeBelowMinimum() external view returns (uint256);\\n\\n    function getDaysOff(uint256 _timestamp) external view returns (uint256);\\n\\n    function getTotalDaysOff() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x78f6bd4f83335ef0ba713cc1a9b42c6ed988422dd53468e72c0c86526acdedff\",\"license\":\"MIT\"},\"contracts/library/Error.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nerror CsToHigh();\\nerror NotAContract();\\nerror NotYourToken();\\nerror NotAuthorized();\\nerror WrongMultiple();\\nerror CannotClaimNow();\\nerror TransferFailed();\\nerror InvalidTokenId();\\nerror InvalidLockTime();\\nerror NoMoreAnimalsAllowed();\\nerror LengthsNotEqual();\\nerror ZeroBalanceError();\\nerror CsIsBellowHundred();\\nerror NeandersmolsIsLocked();\\nerror BalanceIsInsufficient();\\nerror InvalidTokenForThisJob();\\nerror DevelopmentGroundIsLocked();\\nerror NeandersmolIsNotInDevelopmentGround();\\n\",\"keccak256\":\"0x66167beeb11f3505adbc01b1b22ff53d2c67db8b258ffa18a3b284949f1f006b\",\"license\":\"MIT\"},\"contracts/library/Lib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IPits } from \\\"../interfaces/IPits.sol\\\";\\nimport { DevelopmentGroundIsLocked } from \\\"./Error.sol\\\";\\n\\nlibrary Lib {\\n    function getDevelopmentGroundBonesReward(\\n        uint256 _currentLockPeriod,\\n        uint256 _lockPeriod,\\n        uint256 _lastRewardTime,\\n        IPits _pits\\n    ) internal view returns (uint256) {\\n        if (_lockPeriod == 0) return 0;\\n        uint256 rewardRate = getRewardRate(_lockPeriod);\\n\\n        uint256 time = (block.timestamp - _lastRewardTime) / 1 days;\\n\\n        return\\n            (rewardRate *\\n                time -\\n                calculateFinalReward(_currentLockPeriod, _pits)) * 10 ** 18;\\n    }\\n\\n    function calculatePrimarySkill(\\n        uint256 _bonesStaked,\\n        uint256 _amountPosition,\\n        uint256 _currentLockPeriod,\\n        uint256 _tokenId,\\n        IPits _pits,\\n        mapping(uint256 => mapping(uint256 => uint256)) storage trackTime,\\n        mapping(uint256 => mapping(uint256 => uint256)) storage trackToken\\n    ) internal view returns (uint256) {\\n        if (_bonesStaked == 0) return 0;\\n        uint256 amount;\\n        for (uint256 i = 1; i <= _amountPosition; ) {\\n            uint256 time = (block.timestamp - trackTime[_tokenId][i]) / 1 days;\\n            uint256 stakedAmount = trackToken[_tokenId][trackTime[_tokenId][i]];\\n            amount += (time * stakedAmount);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return\\n            (amount -\\n                calculateFinalReward(_currentLockPeriod, _pits) *\\n                10 ** 20) / 10 ** 4;\\n    }\\n\\n    function calculateFinalReward(\\n        uint256 _currentLockPeriod,\\n        IPits _pits\\n    ) internal view returns (uint256) {\\n        uint256 amount;\\n\\n        if (_currentLockPeriod != _pits.getTimeOut()) {\\n            uint256 howLong = (block.timestamp - _pits.getTimeOut()) / 1 days;\\n            amount = (_pits.getTotalDaysOff() -\\n                _pits.getDaysOff(_currentLockPeriod) +\\n                howLong);\\n        }\\n        if (_currentLockPeriod == 0) {\\n            uint256 off;\\n            _pits.getTimeOut() != 0\\n                ? off = (block.timestamp - _pits.getTimeOut()) / 1 days\\n                : 0;\\n            if (_pits.validation()) off = _pits.getTotalDaysOff();\\n            amount = off;\\n        }\\n        return amount * 10;\\n    }\\n\\n    function getRewardRate(\\n        uint _lockTime\\n    ) internal pure returns (uint256 rewardRate) {\\n        if (_lockTime == 50 days) rewardRate = 10;\\n        if (_lockTime == 100 days) rewardRate = 50;\\n        if (_lockTime == 150 days) rewardRate = 100;\\n    }\\n\\n    function pitsValidation(IPits _pits) internal view {\\n        if (!_pits.validation()) revert DevelopmentGroundIsLocked();\\n    }\\n\\n    function removeItem(\\n        uint256[] storage _element,\\n        uint256 _removeElement\\n    ) internal {\\n        uint256 i;\\n        for (; i < _element.length; ) {\\n            if (_element[i] == _removeElement) {\\n                _element[i] = _element[_element.length - 1];\\n                _element.pop();\\n                break;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x31e0b681e04a9c4f0298dfec0675601e7aca00a1a670d2db6343c10370917d89\",\"license\":\"MIT\"},\"contracts/library/StructsEnums.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nstruct DevelopmentGround {\\n    address owner;\\n    uint64 lockPeriod;\\n    uint64 amountPosition;\\n    uint64 entryTime;\\n    uint64 lastRewardTime;\\n    uint256 bonesStaked;\\n    uint256 currentPitsLockPeriod;\\n    Grounds ground;\\n}\\n\\nstruct LaborGround {\\n    address owner;\\n    uint32 lockTime;\\n    uint32 supplyId;\\n    uint32 animalId;\\n    uint256 requestId;\\n    Jobs job;\\n}\\n\\nstruct Cave {\\n    address owner;\\n    uint48 stakingTime;\\n    uint48 lastRewardTimestamp;\\n}\\nenum Jobs {\\n    Digging,\\n    Foraging,\\n    Mining\\n}\\n\\nenum Grounds {\\n    Chambers,\\n    Garden,\\n    Battlefield\\n}\\n\",\"keccak256\":\"0x69fa662ea00c552bd8f93f3ccf65986421c0c7696fd3a6bf1a5d0a4366f77568\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506119b5806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638de38dda116100665780638de38dda14610145578063b00bec6514610175578063c0c53b8b14610193578063d88ad887146101af578063eee0eaa0146101cd5761009e565b80633336ddde146100a357806342f390d4146100bf5780635ac384be146100db57806363c28db1146100f75780637fd4bfd514610127575b600080fd5b6100bd60048036038101906100b891906111af565b6101fd565b005b6100d960048036038101906100d491906111af565b61056e565b005b6100f560048036038101906100f091906111af565b6108bb565b005b610111600480360381019061010c919061125a565b6108fb565b60405161011e919061134f565b60405180910390f35b61012f610992565b60405161013c91906113d0565b60405180910390f35b61015f600480360381019061015a9190611417565b6109b8565b60405161016c91906114b6565b60405180910390f35b61017d610a93565b60405161018a91906114f2565b60405180910390f35b6101ad60048036038101906101a8919061150d565b610ab9565b005b6101b7610cb5565b6040516101c49190611581565b60405180910390f35b6101e760048036038101906101e29190611417565b610cdb565b6040516101f491906115ab565b60405180910390f35b60005b828290508110156105695760008383838181106102205761021f6115c6565b5b9050602002013590506000600360008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff168152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614610362576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4281602001516283d6006103769190611624565b65ffffffffffff1611156103b6576040517ff5dcc1e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006103c183610cdb565b146103d0576103cf82610e18565b5b610418600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083610f70565b60036000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549065ffffffffffff021916905560008201601a6101000a81549065ffffffffffff02191690555050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b81526004016104e69392919061166d565b600060405180830381600087803b15801561050057600080fd5b505af1158015610514573d6000803e3d6000fd5b50505050813373ffffffffffffffffffffffffffffffffffffffff167fbbfb105669b1ae5c41fb02f67b40def517f625498c28079e8afc15538710ef5d60405160405180910390a38260010192505050610200565b505050565b610599600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661102e565b60005b828290508110156108b65760008383838181106105bc576105bb6115c6565b5b90506020020135905060006003600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b815260040161064e91906115ab565b602060405180830381865afa15801561066b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068f91906116b9565b73ffffffffffffffffffffffffffffffffffffffff16146106dc576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161073b9392919061166d565b600060405180830381600087803b15801561075557600080fd5b505af1158015610769573d6000803e3d6000fd5b50505050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160000160146101000a81548165ffffffffffff021916908365ffffffffffff1602179055504281600001601a6101000a81548165ffffffffffff021916908365ffffffffffff160217905550600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505060019003906000526020600020016000909190919091505542823373ffffffffffffffffffffffffffffffffffffffff167fc691aa41315aadaa128475ed80fa49569e5bd8ce86b076d71695700d4972014760405160405180910390a4826001019250505061059c565b505050565b60005b828290508110156108f6576108eb8383838181106108df576108de6115c6565b5b90506020020135610e18565b8060010190506108be565b505050565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561098657602002820191906000526020600020905b815481526020019060010190808311610972575b50505050509050919050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109c06110f9565b600360008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815250509050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900460ff16159050808015610aea5750600160008054906101000a900460ff1660ff16105b80610b175750610af9306110d6565b158015610b165750600160008054906101000a900460ff1660ff16145b5b610b56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4d90611769565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610b93576001600060016101000a81548160ff0219169083151502179055505b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610caf5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610ca691906117d1565b60405180910390a15b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600360008481526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff168152505090506000816040015165ffffffffffff1603610dca576000915050610e13565b670de0b6b3a7640000600a62015180836040015165ffffffffffff1642610df191906117ec565b610dfb919061184f565b610e059190611880565b610e0f9190611880565b9150505b919050565b6000610e2382610cdb565b905060008103610e5f576040517f9b4bb81b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4260036000848152602001908152602001600020600001601a6101000a81548165ffffffffffff021916908365ffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610ef59291906118c2565b600060405180830381600087803b158015610f0f57600080fd5b505af1158015610f23573d6000803e3d6000fd5b5050505080823373ffffffffffffffffffffffffffffffffffffffff167f97c662bac04c9fd14924d37fb5267cb2203e308f338f2c92418adecab0681b2a60405160405180910390a45050565b60005b82805490508110156110295781838281548110610f9357610f926115c6565b5b90600052602060002001540361101e578260018480549050610fb591906117ec565b81548110610fc657610fc56115c6565b5b9060005260206000200154838281548110610fe457610fe36115c6565b5b906000526020600020018190555082805480611003576110026118eb565b5b60019003818190600052602060002001600090559055611029565b806001019050610f73565b505050565b8073ffffffffffffffffffffffffffffffffffffffff1663ae4b37e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109d9190611952565b6110d3576040517f288de97200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600065ffffffffffff168152602001600065ffffffffffff1681525090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261116f5761116e61114a565b5b8235905067ffffffffffffffff81111561118c5761118b61114f565b5b6020830191508360208202830111156111a8576111a7611154565b5b9250929050565b600080602083850312156111c6576111c5611140565b5b600083013567ffffffffffffffff8111156111e4576111e3611145565b5b6111f085828601611159565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611227826111fc565b9050919050565b6112378161121c565b811461124257600080fd5b50565b6000813590506112548161122e565b92915050565b6000602082840312156112705761126f611140565b5b600061127e84828501611245565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6112c6816112b3565b82525050565b60006112d883836112bd565b60208301905092915050565b6000602082019050919050565b60006112fc82611287565b6113068185611292565b9350611311836112a3565b8060005b8381101561134257815161132988826112cc565b9750611334836112e4565b925050600181019050611315565b5085935050505092915050565b6000602082019050818103600083015261136981846112f1565b905092915050565b6000819050919050565b600061139661139161138c846111fc565b611371565b6111fc565b9050919050565b60006113a88261137b565b9050919050565b60006113ba8261139d565b9050919050565b6113ca816113af565b82525050565b60006020820190506113e560008301846113c1565b92915050565b6113f4816112b3565b81146113ff57600080fd5b50565b600081359050611411816113eb565b92915050565b60006020828403121561142d5761142c611140565b5b600061143b84828501611402565b91505092915050565b61144d8161121c565b82525050565b600065ffffffffffff82169050919050565b61146e81611453565b82525050565b60608201600082015161148a6000850182611444565b50602082015161149d6020850182611465565b5060408201516114b06040850182611465565b50505050565b60006060820190506114cb6000830184611474565b92915050565b60006114dc8261139d565b9050919050565b6114ec816114d1565b82525050565b600060208201905061150760008301846114e3565b92915050565b60008060006060848603121561152657611525611140565b5b600061153486828701611245565b935050602061154586828701611245565b925050604061155686828701611245565b9150509250925092565b600061156b8261139d565b9050919050565b61157b81611560565b82525050565b60006020820190506115966000830184611572565b92915050565b6115a5816112b3565b82525050565b60006020820190506115c0600083018461159c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061162f82611453565b915061163a83611453565b9250828201905065ffffffffffff811115611658576116576115f5565b5b92915050565b6116678161121c565b82525050565b6000606082019050611682600083018661165e565b61168f602083018561165e565b61169c604083018461159c565b949350505050565b6000815190506116b38161122e565b92915050565b6000602082840312156116cf576116ce611140565b5b60006116dd848285016116a4565b91505092915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611753602e836116e6565b915061175e826116f7565b604082019050919050565b6000602082019050818103600083015261178281611746565b9050919050565b6000819050919050565b600060ff82169050919050565b60006117bb6117b66117b184611789565b611371565b611793565b9050919050565b6117cb816117a0565b82525050565b60006020820190506117e660008301846117c2565b92915050565b60006117f7826112b3565b9150611802836112b3565b925082820390508181111561181a576118196115f5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061185a826112b3565b9150611865836112b3565b92508261187557611874611820565b5b828204905092915050565b600061188b826112b3565b9150611896836112b3565b92508282026118a4816112b3565b915082820484148315176118bb576118ba6115f5565b5b5092915050565b60006040820190506118d7600083018561165e565b6118e4602083018461159c565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60008115159050919050565b61192f8161191a565b811461193a57600080fd5b50565b60008151905061194c81611926565b92915050565b60006020828403121561196857611967611140565b5b60006119768482850161193d565b9150509291505056fea2646970667358221220f63822779ebdc3958709018b923e07967605fd02b531998af85aeea77fd4d6e064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638de38dda116100665780638de38dda14610145578063b00bec6514610175578063c0c53b8b14610193578063d88ad887146101af578063eee0eaa0146101cd5761009e565b80633336ddde146100a357806342f390d4146100bf5780635ac384be146100db57806363c28db1146100f75780637fd4bfd514610127575b600080fd5b6100bd60048036038101906100b891906111af565b6101fd565b005b6100d960048036038101906100d491906111af565b61056e565b005b6100f560048036038101906100f091906111af565b6108bb565b005b610111600480360381019061010c919061125a565b6108fb565b60405161011e919061134f565b60405180910390f35b61012f610992565b60405161013c91906113d0565b60405180910390f35b61015f600480360381019061015a9190611417565b6109b8565b60405161016c91906114b6565b60405180910390f35b61017d610a93565b60405161018a91906114f2565b60405180910390f35b6101ad60048036038101906101a8919061150d565b610ab9565b005b6101b7610cb5565b6040516101c49190611581565b60405180910390f35b6101e760048036038101906101e29190611417565b610cdb565b6040516101f491906115ab565b60405180910390f35b60005b828290508110156105695760008383838181106102205761021f6115c6565b5b9050602002013590506000600360008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff168152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614610362576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4281602001516283d6006103769190611624565b65ffffffffffff1611156103b6576040517ff5dcc1e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006103c183610cdb565b146103d0576103cf82610e18565b5b610418600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083610f70565b60036000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549065ffffffffffff021916905560008201601a6101000a81549065ffffffffffff02191690555050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b81526004016104e69392919061166d565b600060405180830381600087803b15801561050057600080fd5b505af1158015610514573d6000803e3d6000fd5b50505050813373ffffffffffffffffffffffffffffffffffffffff167fbbfb105669b1ae5c41fb02f67b40def517f625498c28079e8afc15538710ef5d60405160405180910390a38260010192505050610200565b505050565b610599600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661102e565b60005b828290508110156108b65760008383838181106105bc576105bb6115c6565b5b90506020020135905060006003600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b815260040161064e91906115ab565b602060405180830381865afa15801561066b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068f91906116b9565b73ffffffffffffffffffffffffffffffffffffffff16146106dc576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161073b9392919061166d565b600060405180830381600087803b15801561075557600080fd5b505af1158015610769573d6000803e3d6000fd5b50505050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160000160146101000a81548165ffffffffffff021916908365ffffffffffff1602179055504281600001601a6101000a81548165ffffffffffff021916908365ffffffffffff160217905550600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505060019003906000526020600020016000909190919091505542823373ffffffffffffffffffffffffffffffffffffffff167fc691aa41315aadaa128475ed80fa49569e5bd8ce86b076d71695700d4972014760405160405180910390a4826001019250505061059c565b505050565b60005b828290508110156108f6576108eb8383838181106108df576108de6115c6565b5b90506020020135610e18565b8060010190506108be565b505050565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561098657602002820191906000526020600020905b815481526020019060010190808311610972575b50505050509050919050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109c06110f9565b600360008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815250509050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900460ff16159050808015610aea5750600160008054906101000a900460ff1660ff16105b80610b175750610af9306110d6565b158015610b165750600160008054906101000a900460ff1660ff16145b5b610b56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4d90611769565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610b93576001600060016101000a81548160ff0219169083151502179055505b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610caf5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610ca691906117d1565b60405180910390a15b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600360008481526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff168152505090506000816040015165ffffffffffff1603610dca576000915050610e13565b670de0b6b3a7640000600a62015180836040015165ffffffffffff1642610df191906117ec565b610dfb919061184f565b610e059190611880565b610e0f9190611880565b9150505b919050565b6000610e2382610cdb565b905060008103610e5f576040517f9b4bb81b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4260036000848152602001908152602001600020600001601a6101000a81548165ffffffffffff021916908365ffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610ef59291906118c2565b600060405180830381600087803b158015610f0f57600080fd5b505af1158015610f23573d6000803e3d6000fd5b5050505080823373ffffffffffffffffffffffffffffffffffffffff167f97c662bac04c9fd14924d37fb5267cb2203e308f338f2c92418adecab0681b2a60405160405180910390a45050565b60005b82805490508110156110295781838281548110610f9357610f926115c6565b5b90600052602060002001540361101e578260018480549050610fb591906117ec565b81548110610fc657610fc56115c6565b5b9060005260206000200154838281548110610fe457610fe36115c6565b5b906000526020600020018190555082805480611003576110026118eb565b5b60019003818190600052602060002001600090559055611029565b806001019050610f73565b505050565b8073ffffffffffffffffffffffffffffffffffffffff1663ae4b37e46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109d9190611952565b6110d3576040517f288de97200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600065ffffffffffff168152602001600065ffffffffffff1681525090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261116f5761116e61114a565b5b8235905067ffffffffffffffff81111561118c5761118b61114f565b5b6020830191508360208202830111156111a8576111a7611154565b5b9250929050565b600080602083850312156111c6576111c5611140565b5b600083013567ffffffffffffffff8111156111e4576111e3611145565b5b6111f085828601611159565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611227826111fc565b9050919050565b6112378161121c565b811461124257600080fd5b50565b6000813590506112548161122e565b92915050565b6000602082840312156112705761126f611140565b5b600061127e84828501611245565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6112c6816112b3565b82525050565b60006112d883836112bd565b60208301905092915050565b6000602082019050919050565b60006112fc82611287565b6113068185611292565b9350611311836112a3565b8060005b8381101561134257815161132988826112cc565b9750611334836112e4565b925050600181019050611315565b5085935050505092915050565b6000602082019050818103600083015261136981846112f1565b905092915050565b6000819050919050565b600061139661139161138c846111fc565b611371565b6111fc565b9050919050565b60006113a88261137b565b9050919050565b60006113ba8261139d565b9050919050565b6113ca816113af565b82525050565b60006020820190506113e560008301846113c1565b92915050565b6113f4816112b3565b81146113ff57600080fd5b50565b600081359050611411816113eb565b92915050565b60006020828403121561142d5761142c611140565b5b600061143b84828501611402565b91505092915050565b61144d8161121c565b82525050565b600065ffffffffffff82169050919050565b61146e81611453565b82525050565b60608201600082015161148a6000850182611444565b50602082015161149d6020850182611465565b5060408201516114b06040850182611465565b50505050565b60006060820190506114cb6000830184611474565b92915050565b60006114dc8261139d565b9050919050565b6114ec816114d1565b82525050565b600060208201905061150760008301846114e3565b92915050565b60008060006060848603121561152657611525611140565b5b600061153486828701611245565b935050602061154586828701611245565b925050604061155686828701611245565b9150509250925092565b600061156b8261139d565b9050919050565b61157b81611560565b82525050565b60006020820190506115966000830184611572565b92915050565b6115a5816112b3565b82525050565b60006020820190506115c0600083018461159c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061162f82611453565b915061163a83611453565b9250828201905065ffffffffffff811115611658576116576115f5565b5b92915050565b6116678161121c565b82525050565b6000606082019050611682600083018661165e565b61168f602083018561165e565b61169c604083018461159c565b949350505050565b6000815190506116b38161122e565b92915050565b6000602082840312156116cf576116ce611140565b5b60006116dd848285016116a4565b91505092915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611753602e836116e6565b915061175e826116f7565b604082019050919050565b6000602082019050818103600083015261178281611746565b9050919050565b6000819050919050565b600060ff82169050919050565b60006117bb6117b66117b184611789565b611371565b611793565b9050919050565b6117cb816117a0565b82525050565b60006020820190506117e660008301846117c2565b92915050565b60006117f7826112b3565b9150611802836112b3565b925082820390508181111561181a576118196115f5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061185a826112b3565b9150611865836112b3565b92508261187557611874611820565b5b828204905092915050565b600061188b826112b3565b9150611896836112b3565b92508282026118a4816112b3565b915082820484148315176118bb576118ba6115f5565b5b5092915050565b60006040820190506118d7600083018561165e565b6118e4602083018461159c565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60008115159050919050565b61192f8161191a565b811461193a57600080fd5b50565b60008151905061194c81611926565b92915050565b60006020828403121561196857611967611140565b5b60006119768482850161193d565b9150509291505056fea2646970667358221220f63822779ebdc3958709018b923e07967605fd02b531998af85aeea77fd4d6e064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimCaveReward(uint256[])": {
        "details": "Function to allow the caller to claim rewards for multiple Cave tokens.",
        "params": {
          "_tokenId": "An array of Cave token IDs to claim rewards for."
        }
      },
      "enterCaves(uint256[])": {
        "details": "Allows the owner to enter the caves. This will transfer the token to the contract and set the owner, staking time, and last reward timestamp for the caves.",
        "params": {
          "_tokenId": "The token ID of the caves to enter."
        }
      },
      "getCavesInfo(uint256)": {
        "details": "This function returns a Caves struct containing information about a Cave token, specified by its ID, _tokenId.",
        "params": {
          "_tokenId": "ID of the Cave token to retrieve information for"
        },
        "returns": {
          "_0": "The Caves struct containing information about the specified Cave token."
        }
      },
      "getCavesReward(uint256)": {
        "details": "Function to retrieve the rewards for a Cave token.",
        "params": {
          "_tokenId": "The ID of the Cave token to retrieve rewards for."
        },
        "returns": {
          "_0": "The rewards for the specified Cave token."
        }
      },
      "leaveCave(uint256[])": {
        "details": "Function to allow the owner of a Cave token to leave the cave and claim any rewards.",
        "params": {
          "_tokenId": "An array of Cave token IDs to be claimed and left."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getCavesInfo(uint256)": {
        "notice": "Retrieve information about a Cave token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/Caves.sol:Caves",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/Caves.sol:Caves",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4323,
        "contract": "contracts/Caves.sol:Caves",
        "label": "pits",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IPits)7992"
      },
      {
        "astId": 4326,
        "contract": "contracts/Caves.sol:Caves",
        "label": "bones",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IBones)7911"
      },
      {
        "astId": 4329,
        "contract": "contracts/Caves.sol:Caves",
        "label": "neandersmol",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(INeandersmol)7962"
      },
      {
        "astId": 4334,
        "contract": "contracts/Caves.sol:Caves",
        "label": "caves",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Cave)8449_storage)"
      },
      {
        "astId": 4339,
        "contract": "contracts/Caves.sol:Caves",
        "label": "ownerToTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBones)7911": {
        "encoding": "inplace",
        "label": "contract IBones",
        "numberOfBytes": "20"
      },
      "t_contract(INeandersmol)7962": {
        "encoding": "inplace",
        "label": "contract INeandersmol",
        "numberOfBytes": "20"
      },
      "t_contract(IPits)7992": {
        "encoding": "inplace",
        "label": "contract IPits",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Cave)8449_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Cave)",
        "numberOfBytes": "32",
        "value": "t_struct(Cave)8449_storage"
      },
      "t_struct(Cave)8449_storage": {
        "encoding": "inplace",
        "label": "struct Cave",
        "members": [
          {
            "astId": 8444,
            "contract": "contracts/Caves.sol:Caves",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8446,
            "contract": "contracts/Caves.sol:Caves",
            "label": "stakingTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8448,
            "contract": "contracts/Caves.sol:Caves",
            "label": "lastRewardTimestamp",
            "offset": 26,
            "slot": "0",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}