{
  "address": "0x1EeDe639Bbb8F24609787d4660A919D5448f29f8",
  "abi": [
    {
      "inputs": [],
      "name": "CannotClaimNow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthsNotEqual",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeandersmolsIsLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotYourToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongMultiple",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroBalanceError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "animalsId",
          "type": "uint256"
        }
      ],
      "name": "BringInAnimalsToLaborGround",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimCaveReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ClaimCollectable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "stake",
          "type": "bool"
        }
      ],
      "name": "ClaimDevelopmentGroundBonesReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stakeTime",
          "type": "uint256"
        }
      ],
      "name": "EnterCaves",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Lib.Grounds",
          "name": "ground",
          "type": "uint8"
        }
      ],
      "name": "EnterDevelopmentGround",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "supplyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Lib.Jobs",
          "name": "job",
          "type": "uint8"
        }
      ],
      "name": "EnterLaborGround",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "LeaveDevelopmentGround",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "LeaveLaborGround",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "animalsId",
          "type": "uint256"
        }
      ],
      "name": "RemoveAnimalsFromLaborGround",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveBones",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "StakeBonesInDevelopmentGround",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_animalsId",
          "type": "uint256[]"
        }
      ],
      "name": "bringInAnimalsToLaborGround",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "claimCaveReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "claimCollectables",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "_stake",
          "type": "bool[]"
        }
      ],
      "name": "claimDevelopmentGroundBonesReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "enterCaves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_lockTime",
          "type": "uint256[]"
        },
        {
          "internalType": "enum Lib.Grounds[]",
          "name": "_ground",
          "type": "uint8[]"
        }
      ],
      "name": "enterDevelopmentGround",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_supplyId",
          "type": "uint256[]"
        },
        {
          "internalType": "enum Lib.Jobs[]",
          "name": "_job",
          "type": "uint8[]"
        }
      ],
      "name": "enterLaborGround",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCavesInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint48",
              "name": "stakingTime",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "lastRewardTimestamp",
              "type": "uint48"
            }
          ],
          "internalType": "struct Lib.Caves",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCavesReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDevelopmentGroundBonesReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDevelopmentGroundInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "lockPeriod",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "amountPosition",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "entryTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "lastRewardTime",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "bonesStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentPitsLockPeriod",
              "type": "uint256"
            },
            {
              "internalType": "enum Lib.Grounds",
              "name": "ground",
              "type": "uint8"
            }
          ],
          "internalType": "struct Lib.DevelopmentGround",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getLaborGroundInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "lockTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "supplyId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "animalId",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "requestId",
              "type": "uint256"
            },
            {
              "internalType": "enum Lib.Jobs",
              "name": "job",
              "type": "uint8"
            }
          ],
          "internalType": "struct Lib.LaborGround",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPrimarySkill",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pits",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bones",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_animals",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_supplies",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_consumables",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_neandersmol",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_randomizer",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "leaveCave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "leaveDevelopmentGround",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "leaveLaborGround",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_animalsId",
          "type": "uint256[]"
        }
      ],
      "name": "removeAnimalsFromLaborGround",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "_all",
          "type": "bool[]"
        }
      ],
      "name": "removeBones",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_amount",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenId",
          "type": "uint256[]"
        }
      ],
      "name": "stakeBonesInDevelopmentGround",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5e50fc9146d024715f4088025c388f051e9fd0cecdfc5905337def0bc3348088",
  "receipt": {
    "to": null,
    "from": "0xF454A9675f7fDb9D5431AEab276979fDed1428e4",
    "contractAddress": "0x1EeDe639Bbb8F24609787d4660A919D5448f29f8",
    "transactionIndex": 1,
    "gasUsed": "19953285",
    "logsBloom": "0x
    "blockHash": "0x03fc1ed0839d2dd7b7b33b2b713de3aedd4ae35092dc95697b4dd2e9647568a6",
    "transactionHash": "0x5e50fc9146d024715f4088025c388f051e9fd0cecdfc5905337def0bc3348088",
    "logs": [],
    "blockNumber": 8003660,
    "cumulativeGasUsed": "19953285",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ca3b9eebb5579e3b0477fbd792cde0dd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CannotClaimNow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthsNotEqual\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeandersmolsIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotYourToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongMultiple\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBalanceError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"animalsId\",\"type\":\"uint256\"}],\"name\":\"BringInAnimalsToLaborGround\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimCaveReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ClaimCollectable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"stake\",\"type\":\"bool\"}],\"name\":\"ClaimDevelopmentGroundBonesReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"}],\"name\":\"EnterCaves\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Lib.Grounds\",\"name\":\"ground\",\"type\":\"uint8\"}],\"name\":\"EnterDevelopmentGround\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"supplyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Lib.Jobs\",\"name\":\"job\",\"type\":\"uint8\"}],\"name\":\"EnterLaborGround\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LeaveDevelopmentGround\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"LeaveLaborGround\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"animalsId\",\"type\":\"uint256\"}],\"name\":\"RemoveAnimalsFromLaborGround\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveBones\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"StakeBonesInDevelopmentGround\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_animalsId\",\"type\":\"uint256[]\"}],\"name\":\"bringInAnimalsToLaborGround\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"claimCaveReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"claimCollectables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_stake\",\"type\":\"bool[]\"}],\"name\":\"claimDevelopmentGroundBonesReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"enterCaves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lockTime\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Lib.Grounds[]\",\"name\":\"_ground\",\"type\":\"uint8[]\"}],\"name\":\"enterDevelopmentGround\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_supplyId\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Lib.Jobs[]\",\"name\":\"_job\",\"type\":\"uint8[]\"}],\"name\":\"enterLaborGround\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCavesInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"stakingTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint48\"}],\"internalType\":\"struct Lib.Caves\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCavesReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDevelopmentGroundBonesReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDevelopmentGroundInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"lockPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"amountPosition\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"entryTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"bonesStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPitsLockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"enum Lib.Grounds\",\"name\":\"ground\",\"type\":\"uint8\"}],\"internalType\":\"struct Lib.DevelopmentGround\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLaborGroundInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"supplyId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"animalId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"enum Lib.Jobs\",\"name\":\"job\",\"type\":\"uint8\"}],\"internalType\":\"struct Lib.LaborGround\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPrimarySkill\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pits\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bones\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_animals\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_supplies\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consumables\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_neandersmol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomizer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"leaveCave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"leaveDevelopmentGround\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"leaveLaborGround\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_animalsId\",\"type\":\"uint256[]\"}],\"name\":\"removeAnimalsFromLaborGround\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_all\",\"type\":\"bool[]\"}],\"name\":\"removeBones\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenId\",\"type\":\"uint256[]\"}],\"name\":\"stakeBonesInDevelopmentGround\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bringInAnimalsToLaborGround(uint256[],uint256[])\":{\"params\":{\"_animalsId\":\"An array of token IDs representing the animals.\",\"_tokenId\":\"An array of token IDs representing the labor grounds.\"}},\"claimCaveReward(uint256[])\":{\"details\":\"Function to allow the caller to claim rewards for multiple Cave tokens.\",\"params\":{\"_tokenId\":\"An array of Cave token IDs to claim rewards for.\"}},\"claimCollectables(uint256[])\":{\"details\":\"This function allows a user to claim multiple collectables at once by providing an array of token IDs.\",\"params\":{\"_tokenId\":\"An array of token IDs that the user wants to claim.\"}},\"claimDevelopmentGroundBonesReward(uint256[],bool[])\":{\"params\":{\"_stake\":\"Whether to stake the reward bones in the development ground\",\"_tokenId\":\"ID of the development ground\"}},\"enterCaves(uint256[])\":{\"details\":\"Allows the owner to enter the caves. This will transfer the token to the contract and set the owner, staking time, and last reward timestamp for the caves.\",\"params\":{\"_tokenId\":\"The token ID of the caves to enter.\"}},\"enterDevelopmentGround(uint256[],uint256[],uint8[])\":{\"details\":\"Enters the DevelopmentGround by transferring the tokens from the sender to the contract and setting the development ground data such as owner, entry time, lock period, etc.\",\"params\":{\"_ground\":\"Array of grounds for each corresponding token\",\"_lockTime\":\"Array of lock times for each corresponding token\",\"_tokenId\":\"Array of token IDs to be transferred\"}},\"enterLaborGround(uint256[],uint256[],uint8[])\":{\"params\":{\"_job\":\"Array of jobs assigned to the labor grounds.\",\"_supplyId\":\"Array of supply IDs associated with the labor grounds.\",\"_tokenId\":\"Array of token IDs of the labor grounds.\"}},\"getCavesInfo(uint256)\":{\"details\":\"This function returns a Caves struct containing information about a Cave token, specified by its ID, _tokenId.\",\"params\":{\"_tokenId\":\"ID of the Cave token to retrieve information for\"},\"returns\":{\"_0\":\"The Caves struct containing information about the specified Cave token.\"}},\"getCavesReward(uint256)\":{\"details\":\"Function to retrieve the rewards for a Cave token.\",\"params\":{\"_tokenId\":\"The ID of the Cave token to retrieve rewards for.\"},\"returns\":{\"_0\":\"The rewards for the specified Cave token.\"}},\"getDevelopmentGroundBonesReward(uint256)\":{\"details\":\"Returns the reward for the bones staked in the development ground.\",\"params\":{\"_tokenId\":\"The token ID for the development ground.\"},\"returns\":{\"_0\":\"The reward for the bones staked in the development ground.\"}},\"getDevelopmentGroundInfo(uint256)\":{\"details\":\"This function returns a DevelopmentGround struct containing information about a Development Ground token, specified by its ID, _tokenId.\",\"params\":{\"_tokenId\":\"ID of the Development Ground token to retrieve information for\"},\"returns\":{\"_0\":\"The DevelopmentGround struct containing information about the specified Development Ground token.\"}},\"getLaborGroundInfo(uint256)\":{\"details\":\"This function returns a LaborGround struct containing information about a Labor Ground token, specified by its ID, _tokenId.\",\"params\":{\"_tokenId\":\"ID of the Labor Ground token to retrieve information for\"},\"returns\":{\"_0\":\"The LaborGround struct containing information about the specified Labor Ground token.\"}},\"getPrimarySkill(uint256)\":{\"params\":{\"_tokenId\":\"ID of the development ground\"},\"returns\":{\"_0\":\"The primary skill level\"}},\"leaveCave(uint256[])\":{\"details\":\"Function to allow the owner of a Cave token to leave the cave and claim any rewards.\",\"params\":{\"_tokenId\":\"An array of Cave token IDs to be claimed and left.\"}},\"leaveDevelopmentGround(uint256[])\":{\"details\":\"Allows the owner to leave the development ground. This will transfer the token back to the owner and remove any bones staked in the development ground.\",\"params\":{\"_tokenId\":\"The token ID of the development ground to leave.\"}},\"leaveLaborGround(uint256[])\":{\"details\":\"This function allows a user to leave the LaborGround and receive their animal, supply, and collectable.\",\"params\":{\"_tokenId\":\"An array of token IDs that the user wants to leave.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"This function is the onERC1155Received fallback function for the contract, which is triggered when the contract receives an ERC1155 token transfer.\",\"returns\":{\"_0\":\"The selector for this function, \\\"0x20f90a7e\\\".\"}},\"removeAnimalsFromLaborGround(uint256[],uint256[])\":{\"params\":{\"_animalsId\":\"Array of animals IDs associated with the labor grounds.\",\"_tokenId\":\"Array of token IDs of the labor grounds.\"}},\"removeBones(uint256[],bool[])\":{\"details\":\"Removes bones from a specific development ground.\",\"params\":{\"_all\":\"Indicates whether to remove all bones or just a portion of them\",\"_tokenId\":\"The unique identifier for the development ground\"}},\"stakeBonesInDevelopmentGround(uint256[],uint256[])\":{\"details\":\"Stakes the bones in the DevelopmentGround by transferring the bones from the sender to the contract and updating the development ground data.\",\"params\":{\"_amount\":\"Array of amounts of bones to be transferred\",\"_tokenId\":\"Array of token IDs for the corresponding amounts of bones\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bringInAnimalsToLaborGround(uint256[],uint256[])\":{\"notice\":\"Brings in animals to the labor ground by calling the bringInAnimalsToLaborGround function in the Lib library and transferring the ownership of the animal token from the sender to the contract.\"},\"claimDevelopmentGroundBonesReward(uint256[],bool[])\":{\"notice\":\"This function allows the owner of multiple development grounds to claim rewards earned by them.\"},\"enterLaborGround(uint256[],uint256[],uint8[])\":{\"notice\":\"Enters the labor ground with specified token ID and supply ID, and assigns the job to it. Transfers the token and supply ownership to the contract. Emits the \\\"EnterLaborGround\\\" event.\"},\"getAddress()\":{\"notice\":\"Returns the addresses of various contract instances that are used in this contract.\"},\"getCavesInfo(uint256)\":{\"notice\":\"Retrieve information about a Cave token.\"},\"getDevelopmentGroundInfo(uint256)\":{\"notice\":\"Retrieve information about a Development Ground token.\"},\"getLaborGroundInfo(uint256)\":{\"notice\":\"Retrieve information about a Labor Ground token.\"},\"getPrimarySkill(uint256)\":{\"notice\":\"This function retrieves the primary skill of the `_tokenId` development ground.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handle incoming ERC1155 token transfers.\"},\"removeAnimalsFromLaborGround(uint256[],uint256[])\":{\"notice\":\"Removes the animals from the specified labor ground. Transfers the ownership of the animals back to the sender.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Phase2.sol\":\"Phase2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/Phase2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport {Lib} from \\\"./library/Lib.sol\\\";\\r\\nimport {IPits} from \\\"./interfaces/IPits.sol\\\";\\r\\nimport {IBones} from \\\"./interfaces/IBones.sol\\\";\\r\\nimport {IRandomizer} from \\\"./interfaces/IRandomizer.sol\\\";\\r\\nimport {INeandersmol} from \\\"./interfaces/INeandersmol.sol\\\";\\r\\nimport {SafeTransferLib} from \\\"solady/src/utils/SafeTransferLib.sol\\\";\\r\\nimport {IConsumables, IERC1155Upgradeable} from \\\"./interfaces/IConsumables.sol\\\";\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ncontract Phase2 is Initializable {\\r\\n    IPits private pits;\\r\\n    IBones private bones;\\r\\n    IRandomizer private randomizer;\\r\\n    IConsumables private consumables;\\r\\n    INeandersmol private neandersmol;\\r\\n    IERC1155Upgradeable private animals;\\r\\n    IERC1155Upgradeable private supplies;\\r\\n\\r\\n    uint256 private constant MINIMUM_BONE_STAKE = 1000 * 10 ** 18;\\r\\n\\r\\n    mapping(uint256 => Lib.Caves) private caves;\\r\\n    mapping(uint256 => Lib.LaborGround) private laborGround;\\r\\n    mapping(uint256 => Lib.DevelopmentGround) private developmentGround;\\r\\n    // tokenId -> amount position -> staking time\\r\\n    mapping(uint256 => mapping(uint256 => uint256)) private trackTime;\\r\\n    // tokenId -> time -> amount\\r\\n    mapping(uint256 => mapping(uint256 => uint256)) private trackToken;\\r\\n\\r\\n    function initialize(\\r\\n        address _pits,\\r\\n        address _bones,\\r\\n        address _animals,\\r\\n        address _supplies,\\r\\n        address _consumables,\\r\\n        address _neandersmol,\\r\\n        address _randomizer\\r\\n    ) external initializer {\\r\\n        bones = IBones(_bones);\\r\\n        animals = IERC1155Upgradeable(_animals);\\r\\n        pits = IPits(_pits);\\r\\n        supplies = IERC1155Upgradeable(_supplies);\\r\\n        randomizer = IRandomizer(_randomizer);\\r\\n        consumables = IConsumables(_consumables);\\r\\n        neandersmol = INeandersmol(_neandersmol);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Enters the DevelopmentGround by transferring the tokens from the sender to the contract\\r\\n     * and setting the development ground data such as owner, entry time, lock period, etc.\\r\\n     * @param _tokenId Array of token IDs to be transferred\\r\\n     * @param _lockTime Array of lock times for each corresponding token\\r\\n     * @param _ground Array of grounds for each corresponding token\\r\\n     */\\r\\n\\r\\n    function enterDevelopmentGround(\\r\\n        uint256[] calldata _tokenId,\\r\\n        uint256[] calldata _lockTime,\\r\\n        Lib.Grounds[] calldata _ground\\r\\n    ) external {\\r\\n        uint256 i;\\r\\n        checkLength(_tokenId, _lockTime);\\r\\n        if (_lockTime.length != _ground.length) revert Lib.LengthsNotEqual();\\r\\n        Lib.pitsValidation(pits);\\r\\n        for (; i < _tokenId.length; ) {\\r\\n            (uint256 tokenId, uint256 lockTime) = (_tokenId[i], _lockTime[i]);\\r\\n            Lib.DevelopmentGround storage devGround = developmentGround[\\r\\n                tokenId\\r\\n            ];\\r\\n            Lib.enterDevelopmentGround(neandersmol, tokenId, lockTime);\\r\\n            neandersmol.transferFrom(msg.sender, address(this), tokenId);\\r\\n            devGround.owner = msg.sender;\\r\\n            devGround.entryTime = uint64(block.timestamp);\\r\\n            devGround.lockPeriod = uint64(lockTime);\\r\\n            devGround.lastRewardTime = uint64(block.timestamp);\\r\\n            devGround.ground = _ground[i];\\r\\n            devGround.currentPitsLockPeriod = pits.getTimeOut();\\r\\n\\r\\n            emit EnterDevelopmentGround(\\r\\n                msg.sender,\\r\\n                tokenId,\\r\\n                lockTime,\\r\\n                block.timestamp,\\r\\n                _ground[i]\\r\\n            );\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stakes the bones in the DevelopmentGround by transferring the bones from the sender to the contract\\r\\n     * and updating the development ground data.\\r\\n     * @param _amount Array of amounts of bones to be transferred\\r\\n     * @param _tokenId Array of token IDs for the corresponding amounts of bones\\r\\n     */\\r\\n\\r\\n    function stakeBonesInDevelopmentGround(\\r\\n        uint256[] calldata _amount,\\r\\n        uint256[] calldata _tokenId\\r\\n    ) external {\\r\\n        Lib.pitsValidation(pits);\\r\\n        checkLength(_amount, _tokenId);\\r\\n        uint256 i;\\r\\n        for (; i < _amount.length; ) {\\r\\n            (uint256 tokenId, uint256 amount) = (_tokenId[i], _amount[i]);\\r\\n            Lib.DevelopmentGround storage devGround = developmentGround[\\r\\n                tokenId\\r\\n            ];\\r\\n            Lib.stakeBonesInDevelopmentGround(devGround, bones, amount);\\r\\n            SafeTransferLib.safeTransferFrom(\\r\\n                address(bones),\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                amount\\r\\n            );\\r\\n            updateDevelopmentGround(devGround, tokenId, amount);\\r\\n            emit StakeBonesInDevelopmentGround(msg.sender, amount, tokenId);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes bones from a specific development ground.\\r\\n     * @param _tokenId The unique identifier for the development ground\\r\\n     * @param _all Indicates whether to remove all bones or just a portion of them\\r\\n     */\\r\\n\\r\\n    function removeBones(\\r\\n        uint256[] calldata _tokenId,\\r\\n        bool[] calldata _all\\r\\n    ) external {\\r\\n        if (_tokenId.length != _all.length) revert Lib.LengthsNotEqual();\\r\\n        uint256 i;\\r\\n        for (; i < _tokenId.length; ) {\\r\\n            developPrimarySkill(_tokenId[i]);\\r\\n            removeBones(_tokenId[i], _all[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Helper function to remove bones from a specific development ground\\r\\n     * @param _tokenId The unique identifier for the development ground\\r\\n     * @param _all Indicates whether to remove all bones if it will be taxed or not\\r\\n     */\\r\\n    function removeBones(uint256 _tokenId, bool _all) internal {\\r\\n        Lib.DevelopmentGround memory devGround = developmentGround[_tokenId];\\r\\n        if (devGround.bonesStaked == 0) revert Lib.ZeroBalanceError();\\r\\n        uint256 bal;\\r\\n        uint256 i = 1;\\r\\n        uint256 amount;\\r\\n        uint64 count;\\r\\n        unchecked {\\r\\n            for (; i <= devGround.amountPosition; ++i) {\\r\\n                (uint256 time, uint256 prev) = (\\r\\n                    trackTime[_tokenId][i],\\r\\n                    trackTime[_tokenId][i + 1]\\r\\n                );\\r\\n                if (block.timestamp < time + 30 days && !_all) continue;\\r\\n\\r\\n                block.timestamp < time + 30 days && _all\\r\\n                    ? amount += trackToken[_tokenId][time] / 2\\r\\n                    : amount += trackToken[_tokenId][time];\\r\\n\\r\\n                _all || devGround.amountPosition == 1\\r\\n                    ? trackTime[_tokenId][i] = 0\\r\\n                    : trackTime[_tokenId][i] = prev;\\r\\n                trackToken[_tokenId][time] = 0;\\r\\n\\r\\n                ++count;\\r\\n            }\\r\\n\\r\\n            developmentGround[_tokenId].amountPosition -= count;\\r\\n            developmentGround[_tokenId].bonesStaked -= amount;\\r\\n\\r\\n            bal = devGround.bonesStaked - amount;\\r\\n        }\\r\\n        if (bal != 0 && _all)\\r\\n            SafeTransferLib.safeTransfer(address(bones), address(1), bal);\\r\\n\\r\\n        if (amount != 0)\\r\\n            SafeTransferLib.safeTransfer(address(bones), msg.sender, bal);\\r\\n\\r\\n        emit RemoveBones(msg.sender, _tokenId, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  This function develops the primary skill of the `_tokenId` development ground.\\r\\n     * @param _tokenId ID of the development ground\\r\\n     */\\r\\n\\r\\n    function developPrimarySkill(uint256 _tokenId) internal {\\r\\n        // make sure bones staked is more than 30% the total supply\\r\\n        Lib.DevelopmentGround memory devGround = developmentGround[_tokenId];\\r\\n        (uint256 amount, Lib.Grounds ground) = (\\r\\n            getPrimarySkill(_tokenId),\\r\\n            devGround.ground\\r\\n        );\\r\\n        if (ground == Lib.Grounds.Chambers) {\\r\\n            neandersmol.developMystics(_tokenId, amount);\\r\\n        } else if (ground == Lib.Grounds.Garden) {\\r\\n            neandersmol.developFarmers(_tokenId, amount);\\r\\n        } else {\\r\\n            neandersmol.developFighter(_tokenId, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * This function retrieves the primary skill of the `_tokenId` development ground.\\r\\n     * @param _tokenId ID of the development ground\\r\\n     * @return The primary skill level\\r\\n     */\\r\\n\\r\\n    function getPrimarySkill(uint256 _tokenId) public view returns (uint256) {\\r\\n        Lib.DevelopmentGround memory token = developmentGround[_tokenId];\\r\\n\\r\\n        return\\r\\n            Lib.calculatePrimarySkill(\\r\\n                token.bonesStaked,\\r\\n                token.amountPosition,\\r\\n                token.currentPitsLockPeriod,\\r\\n                _tokenId,\\r\\n                pits,\\r\\n                trackTime,\\r\\n                trackToken\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * This function allows the owner of the development ground to claim the rewards earned by the development ground.\\r\\n     * @param _tokenId ID of the development ground\\r\\n     * @param _stake Whether to stake the reward bones in the development ground\\r\\n     */\\r\\n\\r\\n    function claimDevelopmentGroundBonesReward(\\r\\n        uint256 _tokenId,\\r\\n        bool _stake\\r\\n    ) internal {\\r\\n        Lib.DevelopmentGround memory devGround = developmentGround[_tokenId];\\r\\n        if (devGround.owner != msg.sender) revert Lib.NotYourToken();\\r\\n        uint256 reward = getDevelopmentGroundBonesReward(_tokenId);\\r\\n        if (reward == 0) revert Lib.ZeroBalanceError();\\r\\n        developmentGround[_tokenId].lastRewardTime = uint64(block.timestamp);\\r\\n        _stake\\r\\n            ? stakeBonesInDevelopmentGround(_tokenId, reward)\\r\\n            : bones.mint(msg.sender, reward);\\r\\n\\r\\n        emit ClaimDevelopmentGroundBonesReward(msg.sender, _tokenId, _stake);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * This function allows the owner of multiple development grounds to claim rewards earned by them.\\r\\n     * @param _tokenId ID of the development ground\\r\\n     * @param _stake Whether to stake the reward bones in the development ground\\r\\n     */\\r\\n\\r\\n    function claimDevelopmentGroundBonesReward(\\r\\n        uint256[] calldata _tokenId,\\r\\n        bool[] calldata _stake\\r\\n    ) external {\\r\\n        if (_tokenId.length != _stake.length) revert Lib.LengthsNotEqual();\\r\\n        uint256 i;\\r\\n        for (; i < _tokenId.length; ) {\\r\\n            claimDevelopmentGroundBonesReward(_tokenId[i], _stake[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Stakes the specified amount of Bones in the Development Ground of the specified token ID.\\r\\n     * @param _tokenId The ID of the Neandersmol token that represents the Development Ground.\\r\\n     * @param _amount The amount of Bones to be staked.\\r\\n     */\\r\\n    function stakeBonesInDevelopmentGround(\\r\\n        uint256 _tokenId,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        uint256 remainder = _amount % MINIMUM_BONE_STAKE;\\r\\n        if (remainder == _amount) revert Lib.WrongMultiple(); // if the amount is less than Minimum\\r\\n        if (remainder != 0) bones.mint(msg.sender, remainder); // if the amount is greater than minimum but wrong multiple\\r\\n        uint256 newAmount = _amount - remainder;\\r\\n        updateDevelopmentGround(\\r\\n            developmentGround[_tokenId],\\r\\n            _tokenId,\\r\\n            newAmount\\r\\n        );\\r\\n        bones.mint(address(this), newAmount);\\r\\n        emit StakeBonesInDevelopmentGround(msg.sender, newAmount, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the reward for the bones staked in the development ground.\\r\\n     * @param _tokenId The token ID for the development ground.\\r\\n     * @return The reward for the bones staked in the development ground.\\r\\n     */\\r\\n\\r\\n    function getDevelopmentGroundBonesReward(\\r\\n        uint256 _tokenId\\r\\n    ) public view returns (uint256) {\\r\\n        Lib.DevelopmentGround memory devGround = developmentGround[_tokenId];\\r\\n        return\\r\\n            Lib.getDevelopmentGroundBonesReward(\\r\\n                devGround.currentPitsLockPeriod,\\r\\n                devGround.lockPeriod,\\r\\n                devGround.lastRewardTime,\\r\\n                pits\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the owner to leave the development ground. This will transfer the token back to the owner and remove any bones staked in the development ground.\\r\\n     * @param _tokenId The token ID of the development ground to leave.\\r\\n     */\\r\\n\\r\\n    function leaveDevelopmentGround(uint256[] calldata _tokenId) external {\\r\\n        uint256 i;\\r\\n        for (; i < _tokenId.length; ) {\\r\\n            leaveDevelopmentGround(_tokenId[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function for the leaveDevelopmentGround function to remove the development ground and transfer the token back to the owner.\\r\\n     * @param _tokenId The token ID of the development ground to leave.\\r\\n     */\\r\\n\\r\\n    function leaveDevelopmentGround(uint256 _tokenId) internal {\\r\\n        Lib.DevelopmentGround storage devGround = developmentGround[_tokenId];\\r\\n        Lib.leaveDevelopmentGround(devGround);\\r\\n        if (getDevelopmentGroundBonesReward(_tokenId) > 0)\\r\\n            claimDevelopmentGroundBonesReward(_tokenId, false);\\r\\n        if (devGround.bonesStaked > 0) removeBones(_tokenId, true);\\r\\n        delete developmentGround[_tokenId];\\r\\n        neandersmol.transferFrom(address(this), msg.sender, _tokenId);\\r\\n        emit LeaveDevelopmentGround(msg.sender, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the owner to enter the caves. This will transfer the token to the contract and set the owner, staking time, and last reward timestamp for the caves.\\r\\n     * @param _tokenId The token ID of the caves to enter.\\r\\n     */\\r\\n\\r\\n    function enterCaves(uint256[] calldata _tokenId) external {\\r\\n        uint256 i;\\r\\n        for (; i < _tokenId.length; ) {\\r\\n            uint256 tokenId = _tokenId[i];\\r\\n            Lib.Caves storage cave = caves[tokenId];\\r\\n            if (neandersmol.ownerOf(tokenId) != msg.sender)\\r\\n                revert Lib.NotYourToken();\\r\\n            neandersmol.transferFrom(msg.sender, address(this), tokenId);\\r\\n            cave.owner = msg.sender;\\r\\n            cave.stakingTime = uint48(block.timestamp);\\r\\n            cave.lastRewardTimestamp = uint48(block.timestamp);\\r\\n            emit EnterCaves(msg.sender, tokenId, block.timestamp);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @dev Function to allow the owner of a Cave token to leave the cave and claim any rewards.\\r\\n     * @param _tokenId An array of Cave token IDs to be claimed and left.\\r\\n     */\\r\\n\\r\\n    function leaveCave(uint256[] calldata _tokenId) external {\\r\\n        uint256 i;\\r\\n        for (; i < _tokenId.length; ) {\\r\\n            uint256 tokenId = _tokenId[i];\\r\\n            Lib.Caves memory cave = caves[tokenId];\\r\\n            if (cave.owner != msg.sender) revert Lib.NotYourToken();\\r\\n            if (100 days + cave.stakingTime > block.timestamp)\\r\\n                revert Lib.NeandersmolsIsLocked();\\r\\n            if (getCavesReward(tokenId) != 0) claimCaveReward(tokenId);\\r\\n            delete caves[tokenId];\\r\\n            neandersmol.transferFrom(address(this), msg.sender, tokenId);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to claim the rewards for a Cave token.\\r\\n     * @param _tokenId The ID of the Cave token to claim rewards for.\\r\\n     */\\r\\n\\r\\n    function claimCaveReward(uint256 _tokenId) internal {\\r\\n        uint256 reward = getCavesReward(_tokenId);\\r\\n        if (reward == 0) revert Lib.ZeroBalanceError();\\r\\n        caves[_tokenId].lastRewardTimestamp = uint48(block.timestamp);\\r\\n        bones.mint(msg.sender, reward);\\r\\n        emit ClaimCaveReward(msg.sender, _tokenId, reward);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to allow the caller to claim rewards for multiple Cave tokens.\\r\\n     * @param _tokenId An array of Cave token IDs to claim rewards for.\\r\\n     */\\r\\n\\r\\n    function claimCaveReward(uint256[] calldata _tokenId) external {\\r\\n        uint256 i;\\r\\n        for (; i < _tokenId.length; ) {\\r\\n            claimCaveReward(_tokenId[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to retrieve the rewards for a Cave token.\\r\\n     * @param _tokenId The ID of the Cave token to retrieve rewards for.\\r\\n     * @return The rewards for the specified Cave token.\\r\\n     */\\r\\n\\r\\n    function getCavesReward(uint256 _tokenId) public view returns (uint256) {\\r\\n        Lib.Caves memory cave = caves[_tokenId];\\r\\n        if (cave.lastRewardTimestamp == 0) return 0;\\r\\n        return\\r\\n            ((block.timestamp - cave.lastRewardTimestamp) / 1 days) *\\r\\n            10 *\\r\\n            10 ** 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Enters the labor ground with specified token ID and supply ID,\\r\\n     * and assigns the job to it. Transfers the token and supply ownership to the contract.\\r\\n     * Emits the \\\"EnterLaborGround\\\" event.\\r\\n     * @param _tokenId Array of token IDs of the labor grounds.\\r\\n     * @param _supplyId Array of supply IDs associated with the labor grounds.\\r\\n     * @param _job Array of jobs assigned to the labor grounds.\\r\\n     */\\r\\n\\r\\n    function enterLaborGround(\\r\\n        uint256[] calldata _tokenId,\\r\\n        uint256[] calldata _supplyId,\\r\\n        Lib.Jobs[] calldata _job\\r\\n    ) external {\\r\\n        checkLength(_tokenId, _supplyId);\\r\\n        if (_supplyId.length != _job.length) revert Lib.LengthsNotEqual();\\r\\n        uint256 i;\\r\\n        for (; i < _tokenId.length; ) {\\r\\n            (uint256 tokenId, uint256 supplyId) = (_tokenId[i], _supplyId[i]);\\r\\n            Lib.LaborGround storage labor = laborGround[tokenId];\\r\\n            Lib.enterLaborGround(neandersmol, tokenId, supplyId, _job[i]);\\r\\n            supplies.safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                supplyId,\\r\\n                1,\\r\\n                \\\"\\\"\\r\\n            );\\r\\n            neandersmol.transferFrom(msg.sender, address(this), tokenId);\\r\\n            labor.owner = msg.sender;\\r\\n            labor.lockTime = uint32(block.timestamp);\\r\\n            labor.supplyId = uint32(supplyId);\\r\\n            labor.job = _job[i];\\r\\n            labor.requestId = randomizer.requestRandomNumber();\\r\\n\\r\\n            emit EnterLaborGround(msg.sender, tokenId, supplyId, _job[i]);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  Brings in animals to the labor ground by calling the bringInAnimalsToLaborGround function in the Lib library and transferring the ownership of the animal token from the sender to the contract.\\r\\n     * @param _tokenId An array of token IDs representing the labor grounds.\\r\\n     * @param _animalsId An array of token IDs representing the animals.\\r\\n     */\\r\\n\\r\\n    function bringInAnimalsToLaborGround(\\r\\n        uint256[] calldata _tokenId,\\r\\n        uint256[] calldata _animalsId\\r\\n    ) external {\\r\\n        checkLength(_tokenId, _animalsId);\\r\\n        uint256 i;\\r\\n        for (; i < _tokenId.length; ) {\\r\\n            uint256 animalsId = _animalsId[i];\\r\\n            Lib.LaborGround storage labor = laborGround[_tokenId[i]];\\r\\n            Lib.bringInAnimalsToLaborGround(labor);\\r\\n            animals.safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                animalsId,\\r\\n                1,\\r\\n                \\\"\\\"\\r\\n            );\\r\\n            unchecked {\\r\\n                labor.animalId = uint32(animalsId) + 1; // added one since animals token id starts from 0\\r\\n            }\\r\\n\\r\\n            emit BringInAnimalsToLaborGround(\\r\\n                msg.sender,\\r\\n                _tokenId[i],\\r\\n                animalsId\\r\\n            );\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes the animals from the specified labor ground.\\r\\n     * Transfers the ownership of the animals back to the sender.\\r\\n     * @param _tokenId Array of token IDs of the labor grounds.\\r\\n     * @param _animalsId Array of animals IDs associated with the labor grounds.\\r\\n     */\\r\\n    function removeAnimalsFromLaborGround(\\r\\n        uint256[] calldata _tokenId,\\r\\n        uint256[] calldata _animalsId\\r\\n    ) external {\\r\\n        checkLength(_tokenId, _animalsId);\\r\\n        uint256 i;\\r\\n        for (; i < _tokenId.length; ) {\\r\\n            uint256 animalsId = _animalsId[i];\\r\\n            Lib.LaborGround storage labor = laborGround[_tokenId[i]];\\r\\n            Lib.removeAnimalsFromLaborGround(labor, animalsId);\\r\\n\\r\\n            animals.safeTransferFrom(\\r\\n                address(this),\\r\\n                msg.sender,\\r\\n                animalsId,\\r\\n                1,\\r\\n                \\\"\\\"\\r\\n            );\\r\\n            labor.animalId = 0;\\r\\n            emit RemoveAnimalsFromLaborGround(\\r\\n                msg.sender,\\r\\n                _tokenId[i],\\r\\n                animalsId\\r\\n            );\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * This function allows the token owner to claim a collectable. If the token owner is not the same as the\\r\\n     * stored owner or the lock time has not yet passed, the function will revert. If there are possible claims,\\r\\n     * a consumables token will be minted for the token owner. The lock time for the labor ground is then updated.\\r\\n     * @param _tokenId The id of the labor ground token being claimed.\\r\\n     */\\r\\n\\r\\n    function claimCollectable(uint256 _tokenId) internal {\\r\\n        Lib.LaborGround storage labor = laborGround[_tokenId];\\r\\n        if (msg.sender != labor.owner) revert Lib.NotYourToken();\\r\\n        if (block.timestamp < labor.lockTime + 3 days)\\r\\n            revert Lib.CannotClaimNow();\\r\\n        uint256 consumablesTokenId = checkPossibleClaims(_tokenId, labor);\\r\\n        if (consumablesTokenId != 0)\\r\\n            consumables.mint(msg.sender, consumablesTokenId, 1);\\r\\n\\r\\n        labor.lockTime = uint32(block.timestamp);\\r\\n        emit ClaimCollectable(msg.sender, _tokenId);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n    *@dev This function allows a user to claim multiple collectables at once by providing an array of token IDs.\\r\\n     @param _tokenId An array of token IDs that the user wants to claim.\\r\\n*/\\r\\n    function claimCollectables(uint256[] calldata _tokenId) external {\\r\\n        uint256 i;\\r\\n        for (; i < _tokenId.length; ) {\\r\\n            claimCollectable(_tokenId[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function decides whether the supply will break or fail when the random number generated is smaller than `_min`.\\r\\n     * @param _tokenId ID of the token that the supply is associated with.\\r\\n     * @param _supplyId ID of the supply.\\r\\n     * @param _amount Total amount of possible outcomes.\\r\\n     * @param _min The minimum value of the random number that will cause the supply to break or fail.\\r\\n     * @param _requestId Request ID for accessing the random number.\\r\\n     */\\r\\n    function breakOrFailed(\\r\\n        uint256 _tokenId,\\r\\n        uint256 _supplyId,\\r\\n        uint256 _amount,\\r\\n        uint256 _min,\\r\\n        uint256 _requestId\\r\\n    ) internal {\\r\\n        uint256 random = randomizer.revealRandomNumber(_requestId) % _amount;\\r\\n        if (random < _min) {\\r\\n            supplies.safeTransferFrom(\\r\\n                address(this),\\r\\n                msg.sender,\\r\\n                _supplyId,\\r\\n                1,\\r\\n                \\\"\\\"\\r\\n            );\\r\\n            laborGround[_tokenId].supplyId = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function allows a user to leave the LaborGround and receive their animal, supply, and collectable.\\r\\n     * @param _tokenId An array of token IDs that the user wants to leave.\\r\\n     */\\r\\n\\r\\n    function leaveLaborGround(uint256[] calldata _tokenId) external {\\r\\n        uint256 i;\\r\\n\\r\\n        for (; i < _tokenId.length; ) {\\r\\n            uint256 tokenId = _tokenId[i];\\r\\n            claimCollectable(tokenId);\\r\\n            Lib.LaborGround memory labor = laborGround[tokenId];\\r\\n            delete laborGround[tokenId];\\r\\n            if (labor.animalId != 0)\\r\\n                animals.safeTransferFrom(\\r\\n                    address(this),\\r\\n                    msg.sender,\\r\\n                    labor.animalId - 1,\\r\\n                    1,\\r\\n                    \\\"\\\"\\r\\n                );\\r\\n\\r\\n            if (labor.supplyId != 0)\\r\\n                supplies.safeTransferFrom(\\r\\n                    address(this),\\r\\n                    msg.sender,\\r\\n                    labor.supplyId,\\r\\n                    1,\\r\\n                    \\\"\\\"\\r\\n                );\\r\\n            neandersmol.transferFrom(address(this), msg.sender, tokenId);\\r\\n            emit LeaveLaborGround(msg.sender, tokenId);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This function updates the DevelopmentGround by adding `_amount` to `_devGround.bonesStaked` and increments `_devGround.amountPosition`.\\r\\n     * @param _devGround The DevelopmentGround to be updated.\\r\\n     * @param _tokenId The token ID associated with the DevelopmentGround.\\r\\n     * @param _amount The amount to be added to `_devGround.bonesStaked`.\\r\\n     */\\r\\n\\r\\n    function updateDevelopmentGround(\\r\\n        Lib.DevelopmentGround storage _devGround,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            _devGround.bonesStaked += _amount;\\r\\n            ++_devGround.amountPosition;\\r\\n            trackToken[_tokenId][block.timestamp] = _amount;\\r\\n            trackTime[_tokenId][_devGround.amountPosition] = block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to check the possible claims of an animal job\\r\\n     * @param _tokenId ID of the token\\r\\n     * @param labor LaborGround struct with the information of the job\\r\\n     * @return consumablesTokenId The token ID of the consumables to be claimed\\r\\n     */\\r\\n\\r\\n    function checkPossibleClaims(\\r\\n        uint256 _tokenId,\\r\\n        Lib.LaborGround memory labor\\r\\n    ) internal returns (uint256) {\\r\\n        uint256 rnd = randomizer.revealRandomNumber(labor.requestId) % 101;\\r\\n        uint256 animalId = labor.animalId;\\r\\n        uint256 consumablesTokenId;\\r\\n        (uint256 tokenOne, uint256 tokenTwo) = getConsumablesTokenId(labor.job);\\r\\n        uint256 max;\\r\\n        uint256 min;\\r\\n        if (animalId == 0) {\\r\\n            if (rnd < 61) {\\r\\n                consumablesTokenId = tokenOne;\\r\\n            } else if (rnd > 60 && rnd < 81) {\\r\\n                consumablesTokenId = tokenTwo;\\r\\n            } else {\\r\\n                max = 3;\\r\\n                min = 2;\\r\\n            }\\r\\n        }\\r\\n        if (animalId == 1) {\\r\\n            if (rnd < 66) {\\r\\n                consumablesTokenId = tokenOne;\\r\\n            } else if (rnd > 66 && rnd < 86) {\\r\\n                consumablesTokenId = tokenTwo;\\r\\n            } else {\\r\\n                max = 16;\\r\\n                min = 5;\\r\\n            }\\r\\n        }\\r\\n        if (animalId == 2) {\\r\\n            if (rnd < 66) {\\r\\n                consumablesTokenId = tokenOne;\\r\\n            } else if (rnd > 65 && rnd < 96) {\\r\\n                consumablesTokenId = tokenTwo;\\r\\n            } else {\\r\\n                max = 11;\\r\\n                min = 6;\\r\\n            }\\r\\n        }\\r\\n        if (animalId == 3) {\\r\\n            if (rnd < 71) {\\r\\n                consumablesTokenId = tokenOne;\\r\\n            } else if (rnd > 70 && rnd < 96) {\\r\\n                consumablesTokenId = tokenTwo;\\r\\n            } else {\\r\\n                max = 6;\\r\\n                min = 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (max != 0 && min != 0)\\r\\n            breakOrFailed(_tokenId, labor.supplyId, max, min, labor.requestId);\\r\\n\\r\\n        if (animalId == 4) consumablesTokenId = rnd < 71 ? tokenOne : tokenTwo;\\r\\n\\r\\n        if (animalId == 5) consumablesTokenId = rnd < 66 ? tokenOne : tokenTwo;\\r\\n\\r\\n        if (animalId == 6) consumablesTokenId = rnd < 61 ? tokenOne : tokenTwo;\\r\\n\\r\\n        return consumablesTokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to get the consumables token IDs based on the job type\\r\\n     * @param _job Job type\\r\\n     * @return tokenIdOne and tokenIdTwo The token IDs of the consumables for the job\\r\\n     */\\r\\n\\r\\n    function getConsumablesTokenId(\\r\\n        Lib.Jobs _job\\r\\n    ) internal pure returns (uint256 tokenIdOne, uint256 tokenIdTwo) {\\r\\n        if (_job == Lib.Jobs.Digging) (tokenIdOne, tokenIdTwo) = (1, 4);\\r\\n        if (_job == Lib.Jobs.Foraging) (tokenIdOne, tokenIdTwo) = (2, 5);\\r\\n        if (_job == Lib.Jobs.Mining) (tokenIdOne, tokenIdTwo) = (3, 6);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *Check the length of two input arrays, _tokenId and _animalsId, for equality.\\r\\n     *If the lengths are not equal, the function will revert with the error \\\"LengthsNotEqual\\\".\\r\\n     *@dev Internal function called by other functions within the contract.\\r\\n     *@param _tokenId Array of token IDs\\r\\n     */\\r\\n\\r\\n    function checkLength(\\r\\n        uint256[] calldata _tokenId,\\r\\n        uint256[] calldata _animalsId\\r\\n    ) internal pure {\\r\\n        if (_tokenId.length != _animalsId.length) revert Lib.LengthsNotEqual();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Handle incoming ERC1155 token transfers.\\r\\n     * @dev This function is the onERC1155Received fallback function for the contract, which is triggered when the contract receives an ERC1155 token transfer.\\r\\n     * @return The selector for this function, \\\"0x20f90a7e\\\".\\r\\n     */\\r\\n\\r\\n    function onERC1155Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external pure returns (bytes4) {\\r\\n        return this.onERC1155Received.selector;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Retrieve information about a Cave token.\\r\\n     * @dev This function returns a Caves struct containing information about a Cave token, specified by its ID, _tokenId.\\r\\n     * @param _tokenId ID of the Cave token to retrieve information for\\r\\n     * @return  The Caves struct containing information about the specified Cave token.\\r\\n     */\\r\\n\\r\\n    function getCavesInfo(\\r\\n        uint256 _tokenId\\r\\n    ) external view returns (Lib.Caves memory) {\\r\\n        return caves[_tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Retrieve information about a Labor Ground token.\\r\\n     * @dev This function returns a LaborGround struct containing information about a Labor Ground token, specified by its ID, _tokenId.\\r\\n     * @param _tokenId ID of the Labor Ground token to retrieve information for\\r\\n     * @return The LaborGround struct containing information about the specified Labor Ground token.\\r\\n     */\\r\\n\\r\\n    function getLaborGroundInfo(\\r\\n        uint256 _tokenId\\r\\n    ) external view returns (Lib.LaborGround memory) {\\r\\n        return laborGround[_tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Retrieve information about a Development Ground token.\\r\\n     * @dev This function returns a DevelopmentGround struct containing information about a Development Ground token, specified by its ID, _tokenId.\\r\\n     * @param _tokenId ID of the Development Ground token to retrieve information for\\r\\n     * @return The DevelopmentGround struct containing information about the specified Development Ground token.\\r\\n     */\\r\\n\\r\\n    function getDevelopmentGroundInfo(\\r\\n        uint256 _tokenId\\r\\n    ) external view returns (Lib.DevelopmentGround memory) {\\r\\n        return developmentGround[_tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the addresses of various contract instances that are used in this contract.\\r\\n     */\\r\\n    function getAddress()\\r\\n        external\\r\\n        view\\r\\n        returns (address, address, address, address, address, address, address)\\r\\n    {\\r\\n        return (\\r\\n            address(pits),\\r\\n            address(bones),\\r\\n            address(animals),\\r\\n            address(supplies),\\r\\n            address(randomizer),\\r\\n            address(consumables),\\r\\n            address(neandersmol)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    event EnterCaves(\\r\\n        address indexed owner,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 indexed stakeTime\\r\\n    );\\r\\n\\r\\n    event ClaimDevelopmentGroundBonesReward(\\r\\n        address indexed owner,\\r\\n        uint256 indexed tokenId,\\r\\n        bool indexed stake\\r\\n    );\\r\\n\\r\\n    event LeaveDevelopmentGround(\\r\\n        address indexed owner,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    event ClaimCollectable(address indexed owner, uint256 indexed tokenId);\\r\\n\\r\\n    event LeaveLaborGround(address indexed owner, uint256 indexed tokenId);\\r\\n\\r\\n    event RemoveBones(\\r\\n        address indexed owner,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 indexed amount\\r\\n    );\\r\\n\\r\\n    event StakeBonesInDevelopmentGround(\\r\\n        address indexed owner,\\r\\n        uint256 indexed amount,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    event RemoveAnimalsFromLaborGround(\\r\\n        address indexed owner,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 indexed animalsId\\r\\n    );\\r\\n\\r\\n    event EnterDevelopmentGround(\\r\\n        address indexed owner,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 indexed lockTime,\\r\\n        uint256 entryTime,\\r\\n        Lib.Grounds ground\\r\\n    );\\r\\n\\r\\n    event BringInAnimalsToLaborGround(\\r\\n        address indexed owner,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 indexed animalsId\\r\\n    );\\r\\n\\r\\n    event EnterLaborGround(\\r\\n        address indexed owner,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 indexed supplyId,\\r\\n        Lib.Jobs job\\r\\n    );\\r\\n\\r\\n    event ClaimCaveReward(\\r\\n        address indexed owner,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 indexed amount\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x8419d35767010bec925ef796c12b7dbd46ec5d26d0aa6c6a15c4b7ecaa425324\",\"license\":\"MIT\"},\"contracts/interfaces/IBones.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IBones is IERC20Upgradeable {\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n\\r\\n    function burn(address _from, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x8637ea23284e83e14816895394ef0a70f8dacf7244b13193547c271444f74f54\",\"license\":\"MIT\"},\"contracts/interfaces/IConsumables.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport {IERC1155Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\r\\n\\r\\ninterface IConsumables is IERC1155Upgradeable {\\r\\n    function mint(address _to, uint256 _tokenId, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xca5958ef3b04ea47e120bfbb2c5bf516cfcbea86fb56de2b84142e8f2d119498\",\"license\":\"MIT\"},\"contracts/interfaces/INeandersmol.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\r\\n\\r\\ninterface INeandersmol is IERC721Upgradeable {\\r\\n    function getCommonSense(uint256 _tokenId) external view returns (uint256);\\r\\n\\r\\n    function developMystics(uint256 _tokenId, uint256 _amount) external;\\r\\n\\r\\n    function developFarmers(uint256 _tokenId, uint256 _amount) external;\\r\\n\\r\\n    function developFighter(uint256 _tokenId, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4f4c0cd1d29d2407a64f29d6007840788ca955fd17b2d31f8824415e2281561b\",\"license\":\"MIT\"},\"contracts/interfaces/IPits.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\ninterface IPits {\\r\\n    function validation() external view returns (bool);\\r\\n\\r\\n    function getTimeOut() external view returns (uint256);\\r\\n\\r\\n    function getTimeBelowMinimum() external view returns (uint256);\\r\\n\\r\\n    function getDaysOff(uint256 _timestamp) external view returns (uint256);\\r\\n\\r\\n    function getTotalDaysOff() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x490033dae4f4a91bd8ff6367d7112a32d2495d4d5e4a61bebecb5d8903b0d291\",\"license\":\"MIT\"},\"contracts/interfaces/IRandomizer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\ninterface IRandomizer {\\r\\n    // Returns a request ID for a random number. This is unique.\\r\\n    function requestRandomNumber() external returns (uint256);\\r\\n\\r\\n    // Returns the random number for the given request ID. Will revert\\r\\n    // if the random is not ready.\\r\\n    function revealRandomNumber(\\r\\n        uint256 _requestId\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    // Returns if the random number for the given request ID is ready or not. Call\\r\\n    // before calling revealRandomNumber.\\r\\n    function isRandomReady(uint256 _requestId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xf8673397d8528ab0c2ac1d3a455cb812d493bd7209b3353afd1e96c3d1f16920\",\"license\":\"MIT\"},\"contracts/library/Lib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport {IPits} from \\\"../interfaces/IPits.sol\\\";\\r\\nimport {INeandersmol} from \\\"../interfaces/INeandersmol.sol\\\";\\r\\nimport {IBones} from \\\"../interfaces/IBones.sol\\\";\\r\\n\\r\\nlibrary Lib {\\r\\n    error CsToHigh();\\r\\n    error NotAContract();\\r\\n    error NotYourToken();\\r\\n    error NotAuthorized();\\r\\n    error WrongMultiple();\\r\\n    error CannotClaimNow();\\r\\n    error TransferFailed();\\r\\n    error InvalidTokenId();\\r\\n    error InvalidLockTime();\\r\\n    error NoMoreAnimalsAllowed();\\r\\n    error LengthsNotEqual();\\r\\n    error ZeroBalanceError();\\r\\n    error CsIsBellowHundred();\\r\\n    error NeandersmolsIsLocked();\\r\\n    error BalanceIsInsufficient();\\r\\n    error InvalidTokenForThisJob();\\r\\n    error DevelopmentGroundIsLocked();\\r\\n    error NeandersmolIsNotInDevelopmentGround();\\r\\n\\r\\n    struct DevelopmentGround {\\r\\n        address owner;\\r\\n        uint64 lockPeriod;\\r\\n        uint64 amountPosition;\\r\\n        uint64 entryTime;\\r\\n        uint64 lastRewardTime;\\r\\n        uint256 bonesStaked;\\r\\n        uint256 currentPitsLockPeriod;\\r\\n        Grounds ground;\\r\\n    }\\r\\n\\r\\n    struct LaborGround {\\r\\n        address owner;\\r\\n        uint32 lockTime;\\r\\n        uint32 supplyId;\\r\\n        uint32 animalId;\\r\\n        uint256 requestId;\\r\\n        Jobs job;\\r\\n    }\\r\\n\\r\\n    struct Caves {\\r\\n        address owner;\\r\\n        uint48 stakingTime;\\r\\n        uint48 lastRewardTimestamp;\\r\\n    }\\r\\n\\r\\n    enum Jobs {\\r\\n        Digging,\\r\\n        Foraging,\\r\\n        Mining\\r\\n    }\\r\\n\\r\\n    enum Grounds {\\r\\n        Chambers,\\r\\n        Garden,\\r\\n        Battlefield\\r\\n    }\\r\\n\\r\\n    uint256 private constant MINIMUM_BONE_STAKE = 1000 * 10 ** 18;\\r\\n\\r\\n    function getDevelopmentGroundBonesReward(\\r\\n        uint256 _currentLockPeriod,\\r\\n        uint256 _lockPeriod,\\r\\n        uint256 _lastRewardTime,\\r\\n        IPits _pits\\r\\n    ) external view returns (uint256) {\\r\\n        if (_lockPeriod == 0) return 0;\\r\\n        uint256 rewardRate = getRewardRate(_lockPeriod);\\r\\n\\r\\n        uint256 time = (block.timestamp - _lastRewardTime) / 1 days;\\r\\n\\r\\n        return\\r\\n            (rewardRate *\\r\\n                time -\\r\\n                calculateFinalReward(_currentLockPeriod, _pits)) * 10 ** 18;\\r\\n    }\\r\\n\\r\\n    // check if this can be fixed to reduce gas cost\\r\\n    function calculatePrimarySkill(\\r\\n        uint256 _bonesStaked,\\r\\n        uint256 _amountPosition,\\r\\n        uint256 _currentLockPeriod,\\r\\n        uint256 _tokenId,\\r\\n        IPits _pits,\\r\\n        mapping(uint256 => mapping(uint256 => uint256)) storage trackTime,\\r\\n        mapping(uint256 => mapping(uint256 => uint256)) storage trackToken\\r\\n    ) external view returns (uint256) {\\r\\n        if (_bonesStaked == 0) return 0;\\r\\n        uint256 amount;\\r\\n        for (uint256 i = 1; i <= _amountPosition; ) {\\r\\n            uint256 time = (block.timestamp - trackTime[_tokenId][i]) / 1 days;\\r\\n            uint256 stakedAmount = trackToken[_tokenId][trackTime[_tokenId][i]];\\r\\n            amount += (time * stakedAmount);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return\\r\\n            (amount -\\r\\n                calculateFinalReward(_currentLockPeriod, _pits) *\\r\\n                10 ** 20) / 10 ** 4;\\r\\n    }\\r\\n\\r\\n    function calculateFinalReward(\\r\\n        uint256 _currentLockPeriod,\\r\\n        IPits _pits\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 amount;\\r\\n\\r\\n        if (_currentLockPeriod != _pits.getTimeOut()) {\\r\\n            uint256 howLong = (block.timestamp - _pits.getTimeOut()) / 1 days;\\r\\n            amount = (_pits.getTotalDaysOff() -\\r\\n                _pits.getDaysOff(_currentLockPeriod) +\\r\\n                howLong);\\r\\n        }\\r\\n        if (_currentLockPeriod == 0) {\\r\\n            uint256 off;\\r\\n            _pits.getTimeOut() != 0\\r\\n                ? off = (block.timestamp - _pits.getTimeOut()) / 1 days\\r\\n                : 0;\\r\\n            if (_pits.validation()) off = _pits.getTotalDaysOff();\\r\\n            amount = off;\\r\\n        }\\r\\n        return amount * 10;\\r\\n    }\\r\\n\\r\\n    function getRewardRate(\\r\\n        uint _lockTime\\r\\n    ) internal pure returns (uint256 rewardRate) {\\r\\n        if (_lockTime == 50 days) rewardRate = 10;\\r\\n        if (_lockTime == 100 days) rewardRate = 50;\\r\\n        if (_lockTime == 150 days) rewardRate = 100;\\r\\n    }\\r\\n\\r\\n    function enterDevelopmentGround(\\r\\n        INeandersmol _neandersmol,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _lockTime\\r\\n    ) external view {\\r\\n        if (_neandersmol.getCommonSense(_tokenId) < 100)\\r\\n            revert CsIsBellowHundred();\\r\\n        if (_neandersmol.ownerOf(_tokenId) != msg.sender) revert NotYourToken();\\r\\n        if (!lockTimeExists(_lockTime)) revert InvalidLockTime();\\r\\n    }\\r\\n\\r\\n    function lockTimeExists(uint256 _lockTime) internal pure returns (bool) {\\r\\n        return\\r\\n            _lockTime == 50 days ||\\r\\n            _lockTime == 100 days ||\\r\\n            _lockTime == 150 days;\\r\\n    }\\r\\n\\r\\n    function enterLaborGround(\\r\\n        INeandersmol _neandersmol,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _supplyId,\\r\\n        Jobs _job\\r\\n    ) external view {\\r\\n        if (_neandersmol.ownerOf(_tokenId) != msg.sender) revert NotYourToken();\\r\\n        if (_neandersmol.getCommonSense(_tokenId) > 99) revert CsToHigh();\\r\\n        if (!validateTokenId(_supplyId, _job)) revert InvalidTokenForThisJob();\\r\\n    }\\r\\n\\r\\n    function validateTokenId(\\r\\n        uint256 _tokenId,\\r\\n        Jobs _job\\r\\n    ) internal pure returns (bool res) {\\r\\n        if (_job == Jobs.Digging) return _tokenId == 1;\\r\\n        if (_job == Jobs.Foraging) return _tokenId == 2;\\r\\n        if (_job == Jobs.Mining) return _tokenId == 3;\\r\\n    }\\r\\n\\r\\n    function pitsValidation(IPits _pits) external view {\\r\\n        if (!_pits.validation()) revert DevelopmentGroundIsLocked();\\r\\n    }\\r\\n\\r\\n    function leaveDevelopmentGround(\\r\\n        DevelopmentGround storage _devGround\\r\\n    ) external view {\\r\\n        DevelopmentGround memory devGround = _devGround;\\r\\n        if (devGround.owner != msg.sender) revert NotYourToken();\\r\\n        if (block.timestamp < devGround.entryTime + devGround.lockPeriod)\\r\\n            revert NeandersmolsIsLocked();\\r\\n    }\\r\\n\\r\\n    function stakeBonesInDevelopmentGround(\\r\\n        DevelopmentGround storage _devGround,\\r\\n        IBones _bones,\\r\\n        uint256 _amount\\r\\n    ) external view {\\r\\n        if (_bones.balanceOf(msg.sender) < _amount)\\r\\n            revert BalanceIsInsufficient();\\r\\n        if (_devGround.owner != msg.sender)\\r\\n            revert NeandersmolIsNotInDevelopmentGround();\\r\\n        if (_amount % MINIMUM_BONE_STAKE != 0) revert WrongMultiple();\\r\\n    }\\r\\n\\r\\n    function bringInAnimalsToLaborGround(\\r\\n        LaborGround storage _labor\\r\\n    ) external view {\\r\\n        if (_labor.owner != msg.sender) revert NotYourToken();\\r\\n        if (_labor.animalId != 0) revert NoMoreAnimalsAllowed();\\r\\n    }\\r\\n\\r\\n    function removeAnimalsFromLaborGround(\\r\\n        LaborGround storage _labor,\\r\\n        uint256 _animalsId\\r\\n    ) external view {\\r\\n        if (_labor.owner != msg.sender && _labor.animalId != _animalsId + 1)\\r\\n            revert Lib.NotYourToken();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa0e72777885f386da6a0b94c8dfcde14bad617e0c547b1a6d9e741be3e6784f4\",\"license\":\"MIT\"},\"solady/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Caution! This library won't check that a token has code, responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ETH transfer has failed.\\n    error ETHTransferFailed();\\n\\n    /// @dev The ERC20 `transferFrom` has failed.\\n    error TransferFromFailed();\\n\\n    /// @dev The ERC20 `transfer` has failed.\\n    error TransferFailed();\\n\\n    /// @dev The ERC20 `approve` has failed.\\n    error ApproveFailed();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH\\n    /// that disallows any storage writes.\\n    uint256 internal constant _GAS_STIPEND_NO_STORAGE_WRITES = 2300;\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\\n    /// storage reads and writes, but low enough to prevent griefing.\\n    /// Multiply by a small constant (e.g. 2), if needed.\\n    uint256 internal constant _GAS_STIPEND_NO_GRIEF = 100000;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       ETH OPERATIONS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gasStipend, to, amount, 0, 0, 0, 0)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                pop(create(amount, 0x0b, 0x16))\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a gas stipend\\n    /// equal to `_GAS_STIPEND_NO_GRIEF`. This gas stipend is a reasonable default\\n    /// for 99% of cases and can be overriden with the three-argument version of this\\n    /// function if necessary.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount) internal {\\n        // Manually inlined because the compiler doesn't inline functions with branches.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(_GAS_STIPEND_NO_GRIEF, to, amount, 0, 0, 0, 0)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                pop(create(amount, 0x0b, 0x16))\\n            }\\n        }\\n    }\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// Simply use `gasleft()` for `gasStipend` if you don't need a gas stipend.\\n    ///\\n    /// Note: Does NOT revert upon failure.\\n    /// Returns whether the transfer of ETH is successful instead.\\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\\n        internal\\n        returns (bool success)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            success := call(gasStipend, to, amount, 0, 0, 0, 0)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC20 OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x00, 0x23b872dd)\\n            mstore(0x20, from) // Store the `from` argument.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x60, amount) // Store the `amount` argument.\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferAllFrom(address token, address from, address to)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, from) // Store the `from` argument.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x00, 0x23b872dd)\\n            mstore(0x40, to) // Store the `to` argument.\\n            // The `amount` argument is already written to the memory word at 0x6a.\\n            amount := mload(0x60)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1a, to) // Store the `to` argument.\\n            mstore(0x3a, amount) // Store the `amount` argument.\\n            // Store the function selector of `transfer(address,uint256)`,\\n            // left by 6 bytes (enough for 8tb of memory represented by the free memory pointer).\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\n            mstore(0x00, 0xa9059cbb000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x16, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, address()) // Store the address of the current contract.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x3a, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x1a, to) // Store the `to` argument.\\n            // The `amount` argument is already written to the memory word at 0x3a.\\n            amount := mload(0x3a)\\n            // Store the function selector of `transfer(address,uint256)`,\\n            // left by 6 bytes (enough for 8tb of memory represented by the free memory pointer).\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\n            mstore(0x00, 0xa9059cbb000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x16, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// Reverts upon failure.\\n    function safeApprove(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1a, to) // Store the `to` argument.\\n            mstore(0x3a, amount) // Store the `amount` argument.\\n            // Store the function selector of `approve(address,uint256)`,\\n            // left by 6 bytes (enough for 8tb of memory represented by the free memory pointer).\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\n            mstore(0x00, 0x095ea7b3000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x16, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `ApproveFailed()`.\\n                mstore(0x00, 0x3e3f8f73)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\\n    /// Returns zero if the `token` does not exist.\\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, account) // Store the `account` argument.\\n            amount :=\\n                mul(\\n                    mload(0x20),\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                        staticcall(gas(), token, 0x1c, 0x24, 0x20, 0x20)\\n                    )\\n                )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd90b1d9017a6969dce31df5199f92f1b6f5a0a59fa2ac06217a83a2815700082\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615e6c80620000216000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80639426dba2116100b8578063d4053d5b1161007c578063d4053d5b1461035f578063dd4fcc161461037b578063ea32dac5146103ab578063ec42cb77146103c7578063eee0eaa0146103e3578063f23a6e611461041357610142565b80639426dba2146102bf5780639c1a2678146102db578063b3259e14146102f7578063bd69b15714610327578063cb2fe05e1461034357610142565b806342f390d41161010a57806342f390d414610203578063547ac0711461021f5780635970f4531461023b5780635ac384be1461025757806370914034146102735780638de38dda1461028f57610142565b80632a1f4146146101475780633336ddde14610177578063358764761461019357806338cc4831146101af5780633e39953a146101d3575b600080fd5b610161600480360381019061015c9190614a19565b610443565b60405161016e9190614a55565b60405180910390f35b610191600480360381019061018c9190614ad5565b610690565b005b6101ad60048036038101906101a89190614b80565b610975565b005b6101b7610c79565b6040516101ca9796959493929190614c31565b60405180910390f35b6101ed60048036038101906101e89190614a19565b610d8f565b6040516101fa9190614a55565b60405180910390f35b61021d60048036038101906102189190614ad5565b610fd4565b005b61023960048036038101906102349190614ca0565b611290565b005b61025560048036038101906102509190614d77565b6114a5565b005b610271600480360381019061026c9190614ad5565b611937565b005b61028d60048036038101906102889190614ca0565b611977565b005b6102a960048036038101906102a49190614a19565b611b72565b6040516102b69190614e9d565b60405180910390f35b6102d960048036038101906102d49190614ca0565b611c4d565b005b6102f560048036038101906102f09190614f0e565b611e48565b005b610311600480360381019061030c9190614a19565b6122d3565b60405161031e91906150e2565b60405180910390f35b610341600480360381019061033c9190614ad5565b61240d565b005b61035d60048036038101906103589190615153565b61244d565b005b61037960048036038101906103749190614ad5565b612518565b005b61039560048036038101906103909190614a19565b612963565b6040516103a291906152e1565b60405180910390f35b6103c560048036038101906103c09190615153565b612afe565b005b6103e160048036038101906103dc9190614ad5565b612ba7565b005b6103fd60048036038101906103f89190614a19565b612be7565b60405161040a9190614a55565b60405180910390f35b61042d60048036038101906104289190615353565b612d24565b60405161043a9190615428565b60405180910390f35b60008060096000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660028111156105bc576105bb614ff0565b5b60028111156105ce576105cd614ff0565b5b815250509050734536332EA1b71739428BcE498EaDa851683d4Eb46366ea43f08260a0015183604001518460c0015187600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a600b6040518863ffffffff1660e01b815260040161064797969594939291906154e9565b602060405180830381865af4158015610664573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610688919061556d565b915050919050565b60005b828290508110156109705760008383838181106106b3576106b261559a565b5b9050602002013590506000600760008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff168152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146107f5576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4281602001516283d60061080991906155f8565b65ffffffffffff161115610849576040517ff5dcc1e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061085483612be7565b146108635761086282612d3a565b5b60076000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549065ffffffffffff021916905560008201601a6101000a81549065ffffffffffff02191690555050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b815260040161093193929190615632565b600060405180830381600087803b15801561094b57600080fd5b505af115801561095f573d6000803e3d6000fd5b505050508260010192505050610693565b505050565b60008060019054906101000a900460ff161590508080156109a65750600160008054906101000a900460ff1660ff16105b806109d357506109b530612e92565b1580156109d25750600160008054906101000a900460ff1660ff16145b5b610a12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a09906156ec565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610a4f576001600060016101000a81548160ff0219169083151502179055505b86600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610c6f5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610c669190615754565b60405180910390a15b5050505050505050565b60008060008060008060008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16965096509650965096509650965090919293949596565b60008060096000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115610f0857610f07614ff0565b5b6002811115610f1a57610f19614ff0565b5b815250509050734536332EA1b71739428BcE498EaDa851683d4Eb463f674f6b78260c0015183602001518460800151600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff1660e01b8152600401610f8b949392919061576f565b602060405180830381865af4158015610fa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcc919061556d565b915050919050565b60005b8282905081101561128b576000838383818110610ff757610ff661559a565b5b90506020020135905060006007600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016110899190614a55565b602060405180830381865afa1580156110a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ca91906157c9565b73ffffffffffffffffffffffffffffffffffffffff1614611117576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161117693929190615632565b600060405180830381600087803b15801561119057600080fd5b505af11580156111a4573d6000803e3d6000fd5b50505050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160000160146101000a81548165ffffffffffff021916908365ffffffffffff1602179055504281600001601a6101000a81548165ffffffffffff021916908365ffffffffffff16021790555042823373ffffffffffffffffffffffffffffffffffffffff167fc691aa41315aadaa128475ed80fa49569e5bd8ce86b076d71695700d4972014760405160405180910390a48260010192505050610fd7565b505050565b734536332EA1b71739428BcE498EaDa851683d4Eb46371fcf204600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016112e991906157f6565b60006040518083038186803b15801561130157600080fd5b505af4158015611315573d6000803e3d6000fd5b5050505061132584848484612eb5565b60005b8484905081101561149e576000808484848181106113495761134861559a565b5b905060200201358787858181106113635761136261559a565b5b90506020020135915091506000600960008481526020019081526020016000209050734536332EA1b71739428BcE498EaDa851683d4Eb463e04bed1282600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b81526004016113e293929190615839565b60006040518083038186803b1580156113fa57600080fd5b505af415801561140e573d6000803e3d6000fd5b50505050611440600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16333085612efa565b61144b818484612f4a565b82823373ffffffffffffffffffffffffffffffffffffffff167f1004c640a4c8dbc3c9dd5ff33837d99e4882aaf2b20fb8e7c419fc83c8ca5bd060405160405180910390a4836001019350505050611328565b5050505050565b60006114b387878787612eb5565b8282905085859050146114f2576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b734536332EA1b71739428BcE498EaDa851683d4Eb46371fcf204600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b815260040161154b91906157f6565b60006040518083038186803b15801561156357600080fd5b505af4158015611577573d6000803e3d6000fd5b505050505b8686905081101561192e5760008088888481811061159d5761159c61559a565b5b905060200201358787858181106115b7576115b661559a565b5b90506020020135915091506000600960008481526020019081526020016000209050734536332EA1b71739428BcE498EaDa851683d4Eb4633c1c74ab600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685856040518463ffffffff1660e01b815260040161163693929190615891565b60006040518083038186803b15801561164e57600080fd5b505af4158015611662573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016116c593929190615632565b600060405180830381600087803b1580156116df57600080fd5b505af11580156116f3573d6000803e3d6000fd5b50505050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550818160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550428160010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508585858181106117ce576117cd61559a565b5b90506020020160208101906117e391906158ed565b8160040160006101000a81548160ff0219169083600281111561180957611808614ff0565b5b0217905550600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561187b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189f919061556d565b816003018190555081833373ffffffffffffffffffffffffffffffffffffffff167ff0a4b106684863ac7bbc666f47a082e4f6a197f11447743c5347b3344b6b527e428a8a8a8181106118f5576118f461559a565b5b905060200201602081019061190a91906158ed565b604051611918929190615929565b60405180910390a483600101935050505061157c565b50505050505050565b60005b828290508110156119725761196783838381811061195b5761195a61559a565b5b90506020020135612d3a565b80600101905061193a565b505050565b61198384848484612eb5565b60005b84849050811015611b6b5760008383838181106119a6576119a561559a565b5b9050602002013590506000600860008888868181106119c8576119c761559a565b5b9050602002013581526020019081526020016000209050734536332EA1b71739428BcE498EaDa851683d4Eb46398390484826040518263ffffffff1660e01b8152600401611a169190615959565b60006040518083038186803b158015611a2e57600080fd5b505af4158015611a42573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a33308560016040518563ffffffff1660e01b8152600401611aa894939291906159dc565b600060405180830381600087803b158015611ac257600080fd5b505af1158015611ad6573d6000803e3d6000fd5b505050506001820181600001601c6101000a81548163ffffffff021916908363ffffffff16021790555081878785818110611b1457611b1361559a565b5b905060200201353373ffffffffffffffffffffffffffffffffffffffff167f085b924bab9c71a3a17b45cf23191479522f5088263b5d8e87eb68f16ac1a0a860405160405180910390a48260010192505050611986565b5050505050565b611b7a61488d565b600760008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815250509050919050565b611c5984848484612eb5565b60005b84849050811015611e41576000838383818110611c7c57611c7b61559a565b5b905060200201359050600060086000888886818110611c9e57611c9d61559a565b5b9050602002013581526020019081526020016000209050734536332EA1b71739428BcE498EaDa851683d4Eb4639b0114ec82846040518363ffffffff1660e01b8152600401611cee929190615a34565b60006040518083038186803b158015611d0657600080fd5b505af4158015611d1a573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a30338560016040518563ffffffff1660e01b8152600401611d8094939291906159dc565b600060405180830381600087803b158015611d9a57600080fd5b505af1158015611dae573d6000803e3d6000fd5b50505050600081600001601c6101000a81548163ffffffff021916908363ffffffff16021790555081878785818110611dea57611de961559a565b5b905060200201353373ffffffffffffffffffffffffffffffffffffffff167f7db14b2c864954e7ddaa6550066e524715079a7e4e01a90e1011e357bbc10c6960405160405180910390a48260010192505050611c5c565b5050505050565b611e5486868686612eb5565b818190508484905014611e93576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b868690508110156122ca57600080888884818110611eb757611eb661559a565b5b90506020020135878785818110611ed157611ed061559a565b5b90506020020135915091506000600860008481526020019081526020016000209050734536332EA1b71739428BcE498EaDa851683d4Eb46319bfe45c600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685858a8a8a818110611f4557611f4461559a565b5b9050602002016020810190611f5a9190615a82565b6040518563ffffffff1660e01b8152600401611f799493929190615abe565b60006040518083038186803b158015611f9157600080fd5b505af4158015611fa5573d6000803e3d6000fd5b50505050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a33308560016040518563ffffffff1660e01b815260040161200b94939291906159dc565b600060405180830381600087803b15801561202557600080fd5b505af1158015612039573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161209c93929190615632565b600060405180830381600087803b1580156120b657600080fd5b505af11580156120ca573d6000803e3d6000fd5b50505050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160000160146101000a81548163ffffffff021916908363ffffffff160217905550818160000160186101000a81548163ffffffff021916908363ffffffff16021790555085858581811061216a5761216961559a565b5b905060200201602081019061217f9190615a82565b8160020160006101000a81548160ff021916908360028111156121a5576121a4614ff0565b5b0217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638678a7b26040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223d919061556d565b816001018190555081833373ffffffffffffffffffffffffffffffffffffffff167faf1d047d6158df0c7beade7a6810e77e0817265bf671190ebad2b03dd889a2b28989898181106122925761229161559a565b5b90506020020160208101906122a79190615a82565b6040516122b49190615b12565b60405180910390a4836001019350505050611e96565b50505050505050565b6122db6148d4565b600860008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820160009054906101000a900460ff1660028111156123f0576123ef614ff0565b5b600281111561240257612401614ff0565b5b815250509050919050565b60005b828290508110156124485761243d8383838181106124315761243061559a565b5b90506020020135613019565b806001019050612410565b505050565b81819050848490501461248c576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b84849050811015612511576124bc8585838181106124b0576124af61559a565b5b90506020020135613348565b6125068585838181106124d2576124d161559a565b5b905060200201358484848181106124ec576124eb61559a565b5b90506020020160208101906125019190615b65565b613704565b80600101905061248f565b5050505050565b60005b8282905081101561295e57600083838381811061253b5761253a61559a565b5b90506020020135905061254d81613019565b6000600860008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820160009054906101000a900460ff16600281111561266457612663614ff0565b5b600281111561267657612675614ff0565b5b81525050905060086000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549063ffffffff02191690556000820160186101000a81549063ffffffff021916905560008201601c6101000a81549063ffffffff021916905560018201600090556002820160006101000a81549060ff021916905550506000816060015163ffffffff16146127d157600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a30336001856060015161277d9190615b92565b60016040518563ffffffff1660e01b815260040161279e9493929190615bfb565b600060405180830381600087803b1580156127b857600080fd5b505af11580156127cc573d6000803e3d6000fd5b505050505b6000816040015163ffffffff161461287c57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a3033846040015160016040518563ffffffff1660e01b81526004016128499493929190615bfb565b600060405180830381600087803b15801561286357600080fd5b505af1158015612877573d6000803e3d6000fd5b505050505b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b81526004016128db93929190615632565b600060405180830381600087803b1580156128f557600080fd5b505af1158015612909573d6000803e3d6000fd5b50505050813373ffffffffffffffffffffffffffffffffffffffff167f829b142282bbe71c01b98e565ed26a8cc7cdc9446201b49bf41b184efa57ed5960405160405180910390a3826001019250505061251b565b505050565b61296b614944565b60096000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115612ae157612ae0614ff0565b5b6002811115612af357612af2614ff0565b5b815250509050919050565b818190508484905014612b3d576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b84849050811015612ba057612b95858583818110612b6157612b6061559a565b5b90506020020135848484818110612b7b57612b7a61559a565b5b9050602002016020810190612b909190615b65565b613be2565b806001019050612b40565b5050505050565b60005b82829050811015612be257612bd7838383818110612bcb57612bca61559a565b5b90506020020135613f50565b806001019050612baa565b505050565b600080600760008481526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff168152505090506000816040015165ffffffffffff1603612cd6576000915050612d1f565b670de0b6b3a7640000600a62015180836040015165ffffffffffff1642612cfd9190615c53565b612d079190615cb6565b612d119190615ce7565b612d1b9190615ce7565b9150505b919050565b600063f23a6e6160e01b90509695505050505050565b6000612d4582612be7565b905060008103612d81576040517f9b4bb81b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4260076000848152602001908152602001600020600001601a6101000a81548165ffffffffffff021916908365ffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401612e17929190615d29565b600060405180830381600087803b158015612e3157600080fd5b505af1158015612e45573d6000803e3d6000fd5b5050505080823373ffffffffffffffffffffffffffffffffffffffff167f97c662bac04c9fd14924d37fb5267cb2203e308f338f2c92418adecab0681b2a60405160405180910390a45050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b818190508484905014612ef4576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6040516323b872dd600052836020528260405281606052602060006064601c6000895af13d156001600051141716612f3a57637939f4246000526004601cfd5b6000606052806040525050505050565b80836002016000828254019250508190555082600101600081819054906101000a900467ffffffffffffffff1660010191906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600b600084815260200190815260200160002060004281526020019081526020016000208190555042600a600084815260200190815260200160002060008560010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002081905550505050565b60006008600083815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146130b9576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6203f4808160000160149054906101000a900463ffffffff166130dc9190615d52565b63ffffffff1642101561311b576040517f5488a9fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061323f83836040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820160009054906101000a900460ff16600281111561322457613223614ff0565b5b600281111561323657613235614ff0565b5b815250506141aa565b9050600081146132dc57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663156e29f6338360016040518463ffffffff1660e01b81526004016132a993929190615d8a565b600060405180830381600087803b1580156132c357600080fd5b505af11580156132d7573d6000803e3d6000fd5b505050505b428260000160146101000a81548163ffffffff021916908363ffffffff160217905550823373ffffffffffffffffffffffffffffffffffffffff167f5a0db36dd607437cb4689c3ac30ccb5940e032dab1c80eefe397f5f43202b34e60405160405180910390a3505050565b600060096000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660028111156134c0576134bf614ff0565b5b60028111156134d2576134d1614ff0565b5b8152505090506000806134e484610443565b8360e00151915091506000600281111561350157613500614ff0565b5b81600281111561351457613513614ff0565b5b036135ad57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663743f4e9485846040518363ffffffff1660e01b8152600401613576929190615dc1565b600060405180830381600087803b15801561359057600080fd5b505af11580156135a4573d6000803e3d6000fd5b505050506136fe565b600160028111156135c1576135c0614ff0565b5b8160028111156135d4576135d3614ff0565b5b0361366d57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663067ea39285846040518363ffffffff1660e01b8152600401613636929190615dc1565b600060405180830381600087803b15801561365057600080fd5b505af1158015613664573d6000803e3d6000fd5b505050506136fd565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0c5057785846040518363ffffffff1660e01b81526004016136ca929190615dc1565b600060405180830381600087803b1580156136e457600080fd5b505af11580156136f8573d6000803e3d6000fd5b505050505b5b50505050565b600060096000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16600281111561387c5761387b614ff0565b5b600281111561388e5761388d614ff0565b5b81525050905060008160a00151036138d2576040517f9b4bb81b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600190506000805b846040015167ffffffffffffffff168311613a9957600080600a60008a8152602001908152602001600020600086815260200190815260200160002054600a60008b81526020019081526020016000206000600188018152602001908152602001600020549150915062278d00820142108015613958575087155b15613964575050613a8e565b62278d008201421080156139755750875b6139a857600b60008a815260200190815260200160002060008381526020019081526020016000205484019350836139e4565b6002600b60008b8152602001908152602001600020600084815260200190815260200160002054816139dd576139dc615c87565b5b0484019350835b5087806139ff57506001876040015167ffffffffffffffff16145b613a305780600a60008b81526020019081526020016000206000878152602001908152602001600020819055613a5a565b6000600a60008b815260200190815260200160002060008781526020019081526020016000208190555b506000600b60008b815260200190815260200160002060008481526020019081526020016000208190555082600101925050505b8260010192506138dd565b806009600089815260200190815260200160002060010160008282829054906101000a900467ffffffffffffffff160392506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550816009600089815260200190815260200160002060020160008282540392505081905550818560a0015103935060008414158015613b2a5750855b15613b5e57613b5d600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660018661441b565b5b60008214613b9457613b93600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338661441b565b5b81873373ffffffffffffffffffffffffffffffffffffffff167fa720e44767e2cddb37cfa697023b1f3875d107b58722b1cb628083a465290af860405160405180910390a450505050505050565b600060096000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115613d5a57613d59614ff0565b5b6002811115613d6c57613d6b614ff0565b5b8152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614613ddb576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000613de684610d8f565b905060008103613e22576040517f9b4bb81b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426009600086815260200190815260200160002060010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555082613ef857600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401613ec1929190615d29565b600060405180830381600087803b158015613edb57600080fd5b505af1158015613eef573d6000803e3d6000fd5b50505050613f03565b613f028482614464565b5b821515843373ffffffffffffffffffffffffffffffffffffffff167f10fffc2725e2f04d2e9a7aa7762d3db31dd4051420267e5be076a5b13e8bb07760405160405180910390a450505050565b6000600960008381526020019081526020016000209050734536332EA1b71739428BcE498EaDa851683d4Eb4639d79d148826040518263ffffffff1660e01b8152600401613f9e9190615dea565b60006040518083038186803b158015613fb657600080fd5b505af4158015613fca573d6000803e3d6000fd5b505050506000613fd983610d8f565b1115613feb57613fea826000613be2565b5b60008160020154111561400457614003826001613704565b5b60096000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549067ffffffffffffffff02191690556001820160006101000a81549067ffffffffffffffff02191690556001820160086101000a81549067ffffffffffffffff02191690556001820160106101000a81549067ffffffffffffffff0219169055600282016000905560038201600090556004820160006101000a81549060ff02191690555050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b815260040161413093929190615632565b600060405180830381600087803b15801561414a57600080fd5b505af115801561415e573d6000803e3d6000fd5b50505050813373ffffffffffffffffffffffffffffffffffffffff167f26727522aa20721ee01410aea547e7fc187973e8abf49394168d3c9cb4c90cf260405160405180910390a35050565b6000806065600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ad30a7585608001516040518263ffffffff1660e01b815260040161420e9190614a55565b602060405180830381865afa15801561422b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061424f919061556d565b6142599190615e05565b90506000836060015163ffffffff169050600080600061427c8760a00151614655565b91509150600080600086036142c457603d87101561429c578394506142c3565b603c871180156142ac5750605187105b156142b9578294506142c2565b60039150600290505b5b5b600186036143055760428710156142dd57839450614304565b6042871180156142ed5750605687105b156142fa57829450614303565b60109150600590505b5b5b6002860361434657604287101561431e57839450614345565b60418711801561432e5750606087105b1561433b57829450614344565b600b9150600690505b5b5b6003860361438757604787101561435f57839450614386565b60468711801561436f5750606087105b1561437c57829450614385565b60069150600190505b5b5b60008214158015614399575060008114155b156143ba576143b98a8a6040015163ffffffff1684848d60800151614707565b5b600486036143d557604787106143d057826143d2565b835b94505b600586036143f057604287106143eb57826143ed565b835b94505b6006860361440b57603d87106144065782614408565b835b94505b8497505050505050505092915050565b81601a5280603a5269a9059cbb00000000000060005260206000604460166000875af13d15600160005114171661445a576390b8ec186000526004601cfd5b6000603a52505050565b6000683635c9adc5dea000008261447b9190615e05565b90508181036144b6576040517f1d823d0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000811461454e57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b815260040161451b929190615d29565b600060405180830381600087803b15801561453557600080fd5b505af1158015614549573d6000803e3d6000fd5b505050505b6000818361455c9190615c53565b905061457b600960008681526020019081526020016000208583612f4a565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b81526004016145d8929190615d29565b600060405180830381600087803b1580156145f257600080fd5b505af1158015614606573d6000803e3d6000fd5b5050505083813373ffffffffffffffffffffffffffffffffffffffff167f1004c640a4c8dbc3c9dd5ff33837d99e4882aaf2b20fb8e7c419fc83c8ca5bd060405160405180910390a450505050565b6000806000600281111561466c5761466b614ff0565b5b83600281111561467f5761467e614ff0565b5b03614691576001600480925081935050505b600160028111156146a5576146a4614ff0565b5b8360028111156146b8576146b7614ff0565b5b036146ca576002600580925081935050505b6002808111156146dd576146dc614ff0565b5b8360028111156146f0576146ef614ff0565b5b03614702576003600680925081935050505b915091565b600083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ad30a75846040518263ffffffff1660e01b81526004016147659190614a55565b602060405180830381865afa158015614782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147a6919061556d565b6147b09190615e05565b90508281101561488557600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a30338860016040518563ffffffff1660e01b815260040161481c94939291906159dc565b600060405180830381600087803b15801561483657600080fd5b505af115801561484a573d6000803e3d6000fd5b5050505060006008600088815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff1602179055505b505050505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600065ffffffffffff168152602001600065ffffffffffff1681525090565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600081526020016000600281111561493e5761493d614ff0565b5b81525090565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681526020016000815260200160008152602001600060028111156149d3576149d2614ff0565b5b81525090565b600080fd5b600080fd5b6000819050919050565b6149f6816149e3565b8114614a0157600080fd5b50565b600081359050614a13816149ed565b92915050565b600060208284031215614a2f57614a2e6149d9565b5b6000614a3d84828501614a04565b91505092915050565b614a4f816149e3565b82525050565b6000602082019050614a6a6000830184614a46565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112614a9557614a94614a70565b5b8235905067ffffffffffffffff811115614ab257614ab1614a75565b5b602083019150836020820283011115614ace57614acd614a7a565b5b9250929050565b60008060208385031215614aec57614aeb6149d9565b5b600083013567ffffffffffffffff811115614b0a57614b096149de565b5b614b1685828601614a7f565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614b4d82614b22565b9050919050565b614b5d81614b42565b8114614b6857600080fd5b50565b600081359050614b7a81614b54565b92915050565b600080600080600080600060e0888a031215614b9f57614b9e6149d9565b5b6000614bad8a828b01614b6b565b9750506020614bbe8a828b01614b6b565b9650506040614bcf8a828b01614b6b565b9550506060614be08a828b01614b6b565b9450506080614bf18a828b01614b6b565b93505060a0614c028a828b01614b6b565b92505060c0614c138a828b01614b6b565b91505092959891949750929550565b614c2b81614b42565b82525050565b600060e082019050614c46600083018a614c22565b614c536020830189614c22565b614c606040830188614c22565b614c6d6060830187614c22565b614c7a6080830186614c22565b614c8760a0830185614c22565b614c9460c0830184614c22565b98975050505050505050565b60008060008060408587031215614cba57614cb96149d9565b5b600085013567ffffffffffffffff811115614cd857614cd76149de565b5b614ce487828801614a7f565b9450945050602085013567ffffffffffffffff811115614d0757614d066149de565b5b614d1387828801614a7f565b925092505092959194509250565b60008083601f840112614d3757614d36614a70565b5b8235905067ffffffffffffffff811115614d5457614d53614a75565b5b602083019150836020820283011115614d7057614d6f614a7a565b5b9250929050565b60008060008060008060608789031215614d9457614d936149d9565b5b600087013567ffffffffffffffff811115614db257614db16149de565b5b614dbe89828a01614a7f565b9650965050602087013567ffffffffffffffff811115614de157614de06149de565b5b614ded89828a01614a7f565b9450945050604087013567ffffffffffffffff811115614e1057614e0f6149de565b5b614e1c89828a01614d21565b92509250509295509295509295565b614e3481614b42565b82525050565b600065ffffffffffff82169050919050565b614e5581614e3a565b82525050565b606082016000820151614e716000850182614e2b565b506020820151614e846020850182614e4c565b506040820151614e976040850182614e4c565b50505050565b6000606082019050614eb26000830184614e5b565b92915050565b60008083601f840112614ece57614ecd614a70565b5b8235905067ffffffffffffffff811115614eeb57614eea614a75565b5b602083019150836020820283011115614f0757614f06614a7a565b5b9250929050565b60008060008060008060608789031215614f2b57614f2a6149d9565b5b600087013567ffffffffffffffff811115614f4957614f486149de565b5b614f5589828a01614a7f565b9650965050602087013567ffffffffffffffff811115614f7857614f776149de565b5b614f8489828a01614a7f565b9450945050604087013567ffffffffffffffff811115614fa757614fa66149de565b5b614fb389828a01614eb8565b92509250509295509295509295565b600063ffffffff82169050919050565b614fdb81614fc2565b82525050565b614fea816149e3565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106150305761502f614ff0565b5b50565b60008190506150418261501f565b919050565b600061505182615033565b9050919050565b61506181615046565b82525050565b60c08201600082015161507d6000850182614e2b565b5060208201516150906020850182614fd2565b5060408201516150a36040850182614fd2565b5060608201516150b66060850182614fd2565b5060808201516150c96080850182614fe1565b5060a08201516150dc60a0850182615058565b50505050565b600060c0820190506150f76000830184615067565b92915050565b60008083601f84011261511357615112614a70565b5b8235905067ffffffffffffffff8111156151305761512f614a75565b5b60208301915083602082028301111561514c5761514b614a7a565b5b9250929050565b6000806000806040858703121561516d5761516c6149d9565b5b600085013567ffffffffffffffff81111561518b5761518a6149de565b5b61519787828801614a7f565b9450945050602085013567ffffffffffffffff8111156151ba576151b96149de565b5b6151c6878288016150fd565b925092505092959194509250565b600067ffffffffffffffff82169050919050565b6151f1816151d4565b82525050565b6003811061520857615207614ff0565b5b50565b6000819050615219826151f7565b919050565b60006152298261520b565b9050919050565b6152398161521e565b82525050565b610100820160008201516152566000850182614e2b565b50602082015161526960208501826151e8565b50604082015161527c60408501826151e8565b50606082015161528f60608501826151e8565b5060808201516152a260808501826151e8565b5060a08201516152b560a0850182614fe1565b5060c08201516152c860c0850182614fe1565b5060e08201516152db60e0850182615230565b50505050565b6000610100820190506152f7600083018461523f565b92915050565b60008083601f84011261531357615312614a70565b5b8235905067ffffffffffffffff8111156153305761532f614a75565b5b60208301915083600182028301111561534c5761534b614a7a565b5b9250929050565b60008060008060008060a087890312156153705761536f6149d9565b5b600061537e89828a01614b6b565b965050602061538f89828a01614b6b565b95505060406153a089828a01614a04565b94505060606153b189828a01614a04565b935050608087013567ffffffffffffffff8111156153d2576153d16149de565b5b6153de89828a016152fd565b92509250509295509295509295565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b615422816153ed565b82525050565b600060208201905061543d6000830184615419565b92915050565b61544c816149e3565b82525050565b6000819050919050565b600061547761547261546d846151d4565b615452565b6149e3565b9050919050565b6154878161545c565b82525050565b60006154a86154a361549e84614b22565b615452565b614b22565b9050919050565b60006154ba8261548d565b9050919050565b60006154cc826154af565b9050919050565b6154dc816154c1565b82525050565b8082525050565b600060e0820190506154fe600083018a615443565b61550b602083018961547e565b6155186040830188615443565b6155256060830187615443565b61553260808301866154d3565b61553f60a08301856154e2565b61554c60c08301846154e2565b98975050505050505050565b600081519050615567816149ed565b92915050565b600060208284031215615583576155826149d9565b5b600061559184828501615558565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061560382614e3a565b915061560e83614e3a565b9250828201905065ffffffffffff81111561562c5761562b6155c9565b5b92915050565b60006060820190506156476000830186614c22565b6156546020830185614c22565b6156616040830184614a46565b949350505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006156d6602e83615669565b91506156e18261567a565b604082019050919050565b60006020820190508181036000830152615705816156c9565b9050919050565b6000819050919050565b600060ff82169050919050565b600061573e6157396157348461570c565b615452565b615716565b9050919050565b61574e81615723565b82525050565b60006020820190506157696000830184615745565b92915050565b60006080820190506157846000830187615443565b615791602083018661547e565b61579e604083018561547e565b6157ab60608301846154d3565b95945050505050565b6000815190506157c381614b54565b92915050565b6000602082840312156157df576157de6149d9565b5b60006157ed848285016157b4565b91505092915050565b600060208201905061580b60008301846154d3565b92915050565b8082525050565b6000615823826154af565b9050919050565b61583381615818565b82525050565b600060608201905061584e6000830186615811565b61585b602083018561582a565b6158686040830184615443565b949350505050565b600061587b826154af565b9050919050565b61588b81615870565b82525050565b60006060820190506158a66000830186615882565b6158b36020830185615443565b6158c06040830184615443565b949350505050565b600381106158d557600080fd5b50565b6000813590506158e7816158c8565b92915050565b600060208284031215615903576159026149d9565b5b6000615911848285016158d8565b91505092915050565b6159238161521e565b82525050565b600060408201905061593e6000830185614a46565b61594b602083018461591a565b9392505050565b8082525050565b600060208201905061596e6000830184615952565b92915050565b600061598f61598a6159858461570c565b615452565b6149e3565b9050919050565b61599f81615974565b82525050565b600082825260208201905092915050565b50565b60006159c66000836159a5565b91506159d1826159b6565b600082019050919050565b600060a0820190506159f16000830187614c22565b6159fe6020830186614c22565b615a0b6040830185614a46565b615a186060830184615996565b8181036080830152615a29816159b9565b905095945050505050565b6000604082019050615a496000830185615952565b615a566020830184615443565b9392505050565b60038110615a6a57600080fd5b50565b600081359050615a7c81615a5d565b92915050565b600060208284031215615a9857615a976149d9565b5b6000615aa684828501615a6d565b91505092915050565b615ab881615046565b82525050565b6000608082019050615ad36000830187615882565b615ae06020830186615443565b615aed6040830185615443565b615afa6060830184615aaf565b95945050505050565b615b0c81615046565b82525050565b6000602082019050615b276000830184615b03565b92915050565b60008115159050919050565b615b4281615b2d565b8114615b4d57600080fd5b50565b600081359050615b5f81615b39565b92915050565b600060208284031215615b7b57615b7a6149d9565b5b6000615b8984828501615b50565b91505092915050565b6000615b9d82614fc2565b9150615ba883614fc2565b9250828203905063ffffffff811115615bc457615bc36155c9565b5b92915050565b6000615be5615be0615bdb84614fc2565b615452565b6149e3565b9050919050565b615bf581615bca565b82525050565b600060a082019050615c106000830187614c22565b615c1d6020830186614c22565b615c2a6040830185615bec565b615c376060830184615996565b8181036080830152615c48816159b9565b905095945050505050565b6000615c5e826149e3565b9150615c69836149e3565b9250828203905081811115615c8157615c806155c9565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000615cc1826149e3565b9150615ccc836149e3565b925082615cdc57615cdb615c87565b5b828204905092915050565b6000615cf2826149e3565b9150615cfd836149e3565b9250828202615d0b816149e3565b91508282048414831517615d2257615d216155c9565b5b5092915050565b6000604082019050615d3e6000830185614c22565b615d4b6020830184614a46565b9392505050565b6000615d5d82614fc2565b9150615d6883614fc2565b9250828201905063ffffffff811115615d8457615d836155c9565b5b92915050565b6000606082019050615d9f6000830186614c22565b615dac6020830185614a46565b615db96040830184615996565b949350505050565b6000604082019050615dd66000830185614a46565b615de36020830184614a46565b9392505050565b6000602082019050615dff6000830184615811565b92915050565b6000615e10826149e3565b9150615e1b836149e3565b925082615e2b57615e2a615c87565b5b82820690509291505056fea26469706673582212203a1574272710ef0e4047e9ed195f64aef2098827d6c7a82f7a89cb4f652b663464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c80639426dba2116100b8578063d4053d5b1161007c578063d4053d5b1461035f578063dd4fcc161461037b578063ea32dac5146103ab578063ec42cb77146103c7578063eee0eaa0146103e3578063f23a6e611461041357610142565b80639426dba2146102bf5780639c1a2678146102db578063b3259e14146102f7578063bd69b15714610327578063cb2fe05e1461034357610142565b806342f390d41161010a57806342f390d414610203578063547ac0711461021f5780635970f4531461023b5780635ac384be1461025757806370914034146102735780638de38dda1461028f57610142565b80632a1f4146146101475780633336ddde14610177578063358764761461019357806338cc4831146101af5780633e39953a146101d3575b600080fd5b610161600480360381019061015c9190614a19565b610443565b60405161016e9190614a55565b60405180910390f35b610191600480360381019061018c9190614ad5565b610690565b005b6101ad60048036038101906101a89190614b80565b610975565b005b6101b7610c79565b6040516101ca9796959493929190614c31565b60405180910390f35b6101ed60048036038101906101e89190614a19565b610d8f565b6040516101fa9190614a55565b60405180910390f35b61021d60048036038101906102189190614ad5565b610fd4565b005b61023960048036038101906102349190614ca0565b611290565b005b61025560048036038101906102509190614d77565b6114a5565b005b610271600480360381019061026c9190614ad5565b611937565b005b61028d60048036038101906102889190614ca0565b611977565b005b6102a960048036038101906102a49190614a19565b611b72565b6040516102b69190614e9d565b60405180910390f35b6102d960048036038101906102d49190614ca0565b611c4d565b005b6102f560048036038101906102f09190614f0e565b611e48565b005b610311600480360381019061030c9190614a19565b6122d3565b60405161031e91906150e2565b60405180910390f35b610341600480360381019061033c9190614ad5565b61240d565b005b61035d60048036038101906103589190615153565b61244d565b005b61037960048036038101906103749190614ad5565b612518565b005b61039560048036038101906103909190614a19565b612963565b6040516103a291906152e1565b60405180910390f35b6103c560048036038101906103c09190615153565b612afe565b005b6103e160048036038101906103dc9190614ad5565b612ba7565b005b6103fd60048036038101906103f89190614a19565b612be7565b60405161040a9190614a55565b60405180910390f35b61042d60048036038101906104289190615353565b612d24565b60405161043a9190615428565b60405180910390f35b60008060096000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660028111156105bc576105bb614ff0565b5b60028111156105ce576105cd614ff0565b5b81525050905073__$c89922958da0ecd017c5bfa382f5c80a2d$__6366ea43f08260a0015183604001518460c0015187600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a600b6040518863ffffffff1660e01b815260040161064797969594939291906154e9565b602060405180830381865af4158015610664573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610688919061556d565b915050919050565b60005b828290508110156109705760008383838181106106b3576106b261559a565b5b9050602002013590506000600760008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff168152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146107f5576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4281602001516283d60061080991906155f8565b65ffffffffffff161115610849576040517ff5dcc1e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061085483612be7565b146108635761086282612d3a565b5b60076000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549065ffffffffffff021916905560008201601a6101000a81549065ffffffffffff02191690555050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b815260040161093193929190615632565b600060405180830381600087803b15801561094b57600080fd5b505af115801561095f573d6000803e3d6000fd5b505050508260010192505050610693565b505050565b60008060019054906101000a900460ff161590508080156109a65750600160008054906101000a900460ff1660ff16105b806109d357506109b530612e92565b1580156109d25750600160008054906101000a900460ff1660ff16145b5b610a12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a09906156ec565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610a4f576001600060016101000a81548160ff0219169083151502179055505b86600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610c6f5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610c669190615754565b60405180910390a15b5050505050505050565b60008060008060008060008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16965096509650965096509650965090919293949596565b60008060096000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115610f0857610f07614ff0565b5b6002811115610f1a57610f19614ff0565b5b81525050905073__$c89922958da0ecd017c5bfa382f5c80a2d$__63f674f6b78260c0015183602001518460800151600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff1660e01b8152600401610f8b949392919061576f565b602060405180830381865af4158015610fa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcc919061556d565b915050919050565b60005b8282905081101561128b576000838383818110610ff757610ff661559a565b5b90506020020135905060006007600083815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016110899190614a55565b602060405180830381865afa1580156110a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ca91906157c9565b73ffffffffffffffffffffffffffffffffffffffff1614611117576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161117693929190615632565b600060405180830381600087803b15801561119057600080fd5b505af11580156111a4573d6000803e3d6000fd5b50505050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160000160146101000a81548165ffffffffffff021916908365ffffffffffff1602179055504281600001601a6101000a81548165ffffffffffff021916908365ffffffffffff16021790555042823373ffffffffffffffffffffffffffffffffffffffff167fc691aa41315aadaa128475ed80fa49569e5bd8ce86b076d71695700d4972014760405160405180910390a48260010192505050610fd7565b505050565b73__$c89922958da0ecd017c5bfa382f5c80a2d$__6371fcf204600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016112e991906157f6565b60006040518083038186803b15801561130157600080fd5b505af4158015611315573d6000803e3d6000fd5b5050505061132584848484612eb5565b60005b8484905081101561149e576000808484848181106113495761134861559a565b5b905060200201358787858181106113635761136261559a565b5b9050602002013591509150600060096000848152602001908152602001600020905073__$c89922958da0ecd017c5bfa382f5c80a2d$__63e04bed1282600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b81526004016113e293929190615839565b60006040518083038186803b1580156113fa57600080fd5b505af415801561140e573d6000803e3d6000fd5b50505050611440600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16333085612efa565b61144b818484612f4a565b82823373ffffffffffffffffffffffffffffffffffffffff167f1004c640a4c8dbc3c9dd5ff33837d99e4882aaf2b20fb8e7c419fc83c8ca5bd060405160405180910390a4836001019350505050611328565b5050505050565b60006114b387878787612eb5565b8282905085859050146114f2576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73__$c89922958da0ecd017c5bfa382f5c80a2d$__6371fcf204600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b815260040161154b91906157f6565b60006040518083038186803b15801561156357600080fd5b505af4158015611577573d6000803e3d6000fd5b505050505b8686905081101561192e5760008088888481811061159d5761159c61559a565b5b905060200201358787858181106115b7576115b661559a565b5b9050602002013591509150600060096000848152602001908152602001600020905073__$c89922958da0ecd017c5bfa382f5c80a2d$__633c1c74ab600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685856040518463ffffffff1660e01b815260040161163693929190615891565b60006040518083038186803b15801561164e57600080fd5b505af4158015611662573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016116c593929190615632565b600060405180830381600087803b1580156116df57600080fd5b505af11580156116f3573d6000803e3d6000fd5b50505050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550818160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550428160010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508585858181106117ce576117cd61559a565b5b90506020020160208101906117e391906158ed565b8160040160006101000a81548160ff0219169083600281111561180957611808614ff0565b5b0217905550600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b688d9f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561187b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189f919061556d565b816003018190555081833373ffffffffffffffffffffffffffffffffffffffff167ff0a4b106684863ac7bbc666f47a082e4f6a197f11447743c5347b3344b6b527e428a8a8a8181106118f5576118f461559a565b5b905060200201602081019061190a91906158ed565b604051611918929190615929565b60405180910390a483600101935050505061157c565b50505050505050565b60005b828290508110156119725761196783838381811061195b5761195a61559a565b5b90506020020135612d3a565b80600101905061193a565b505050565b61198384848484612eb5565b60005b84849050811015611b6b5760008383838181106119a6576119a561559a565b5b9050602002013590506000600860008888868181106119c8576119c761559a565b5b905060200201358152602001908152602001600020905073__$c89922958da0ecd017c5bfa382f5c80a2d$__6398390484826040518263ffffffff1660e01b8152600401611a169190615959565b60006040518083038186803b158015611a2e57600080fd5b505af4158015611a42573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a33308560016040518563ffffffff1660e01b8152600401611aa894939291906159dc565b600060405180830381600087803b158015611ac257600080fd5b505af1158015611ad6573d6000803e3d6000fd5b505050506001820181600001601c6101000a81548163ffffffff021916908363ffffffff16021790555081878785818110611b1457611b1361559a565b5b905060200201353373ffffffffffffffffffffffffffffffffffffffff167f085b924bab9c71a3a17b45cf23191479522f5088263b5d8e87eb68f16ac1a0a860405160405180910390a48260010192505050611986565b5050505050565b611b7a61488d565b600760008381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815250509050919050565b611c5984848484612eb5565b60005b84849050811015611e41576000838383818110611c7c57611c7b61559a565b5b905060200201359050600060086000888886818110611c9e57611c9d61559a565b5b905060200201358152602001908152602001600020905073__$c89922958da0ecd017c5bfa382f5c80a2d$__639b0114ec82846040518363ffffffff1660e01b8152600401611cee929190615a34565b60006040518083038186803b158015611d0657600080fd5b505af4158015611d1a573d6000803e3d6000fd5b50505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a30338560016040518563ffffffff1660e01b8152600401611d8094939291906159dc565b600060405180830381600087803b158015611d9a57600080fd5b505af1158015611dae573d6000803e3d6000fd5b50505050600081600001601c6101000a81548163ffffffff021916908363ffffffff16021790555081878785818110611dea57611de961559a565b5b905060200201353373ffffffffffffffffffffffffffffffffffffffff167f7db14b2c864954e7ddaa6550066e524715079a7e4e01a90e1011e357bbc10c6960405160405180910390a48260010192505050611c5c565b5050505050565b611e5486868686612eb5565b818190508484905014611e93576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b868690508110156122ca57600080888884818110611eb757611eb661559a565b5b90506020020135878785818110611ed157611ed061559a565b5b9050602002013591509150600060086000848152602001908152602001600020905073__$c89922958da0ecd017c5bfa382f5c80a2d$__6319bfe45c600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685858a8a8a818110611f4557611f4461559a565b5b9050602002016020810190611f5a9190615a82565b6040518563ffffffff1660e01b8152600401611f799493929190615abe565b60006040518083038186803b158015611f9157600080fd5b505af4158015611fa5573d6000803e3d6000fd5b50505050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a33308560016040518563ffffffff1660e01b815260040161200b94939291906159dc565b600060405180830381600087803b15801561202557600080fd5b505af1158015612039573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161209c93929190615632565b600060405180830381600087803b1580156120b657600080fd5b505af11580156120ca573d6000803e3d6000fd5b50505050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550428160000160146101000a81548163ffffffff021916908363ffffffff160217905550818160000160186101000a81548163ffffffff021916908363ffffffff16021790555085858581811061216a5761216961559a565b5b905060200201602081019061217f9190615a82565b8160020160006101000a81548160ff021916908360028111156121a5576121a4614ff0565b5b0217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638678a7b26040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223d919061556d565b816001018190555081833373ffffffffffffffffffffffffffffffffffffffff167faf1d047d6158df0c7beade7a6810e77e0817265bf671190ebad2b03dd889a2b28989898181106122925761229161559a565b5b90506020020160208101906122a79190615a82565b6040516122b49190615b12565b60405180910390a4836001019350505050611e96565b50505050505050565b6122db6148d4565b600860008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820160009054906101000a900460ff1660028111156123f0576123ef614ff0565b5b600281111561240257612401614ff0565b5b815250509050919050565b60005b828290508110156124485761243d8383838181106124315761243061559a565b5b90506020020135613019565b806001019050612410565b505050565b81819050848490501461248c576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b84849050811015612511576124bc8585838181106124b0576124af61559a565b5b90506020020135613348565b6125068585838181106124d2576124d161559a565b5b905060200201358484848181106124ec576124eb61559a565b5b90506020020160208101906125019190615b65565b613704565b80600101905061248f565b5050505050565b60005b8282905081101561295e57600083838381811061253b5761253a61559a565b5b90506020020135905061254d81613019565b6000600860008381526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820160009054906101000a900460ff16600281111561266457612663614ff0565b5b600281111561267657612675614ff0565b5b81525050905060086000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549063ffffffff02191690556000820160186101000a81549063ffffffff021916905560008201601c6101000a81549063ffffffff021916905560018201600090556002820160006101000a81549060ff021916905550506000816060015163ffffffff16146127d157600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a30336001856060015161277d9190615b92565b60016040518563ffffffff1660e01b815260040161279e9493929190615bfb565b600060405180830381600087803b1580156127b857600080fd5b505af11580156127cc573d6000803e3d6000fd5b505050505b6000816040015163ffffffff161461287c57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a3033846040015160016040518563ffffffff1660e01b81526004016128499493929190615bfb565b600060405180830381600087803b15801561286357600080fd5b505af1158015612877573d6000803e3d6000fd5b505050505b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b81526004016128db93929190615632565b600060405180830381600087803b1580156128f557600080fd5b505af1158015612909573d6000803e3d6000fd5b50505050813373ffffffffffffffffffffffffffffffffffffffff167f829b142282bbe71c01b98e565ed26a8cc7cdc9446201b49bf41b184efa57ed5960405160405180910390a3826001019250505061251b565b505050565b61296b614944565b60096000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115612ae157612ae0614ff0565b5b6002811115612af357612af2614ff0565b5b815250509050919050565b818190508484905014612b3d576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b84849050811015612ba057612b95858583818110612b6157612b6061559a565b5b90506020020135848484818110612b7b57612b7a61559a565b5b9050602002016020810190612b909190615b65565b613be2565b806001019050612b40565b5050505050565b60005b82829050811015612be257612bd7838383818110612bcb57612bca61559a565b5b90506020020135613f50565b806001019050612baa565b505050565b600080600760008481526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff16815260200160008201601a9054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff168152505090506000816040015165ffffffffffff1603612cd6576000915050612d1f565b670de0b6b3a7640000600a62015180836040015165ffffffffffff1642612cfd9190615c53565b612d079190615cb6565b612d119190615ce7565b612d1b9190615ce7565b9150505b919050565b600063f23a6e6160e01b90509695505050505050565b6000612d4582612be7565b905060008103612d81576040517f9b4bb81b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4260076000848152602001908152602001600020600001601a6101000a81548165ffffffffffff021916908365ffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401612e17929190615d29565b600060405180830381600087803b158015612e3157600080fd5b505af1158015612e45573d6000803e3d6000fd5b5050505080823373ffffffffffffffffffffffffffffffffffffffff167f97c662bac04c9fd14924d37fb5267cb2203e308f338f2c92418adecab0681b2a60405160405180910390a45050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b818190508484905014612ef4576040517f22cb666100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6040516323b872dd600052836020528260405281606052602060006064601c6000895af13d156001600051141716612f3a57637939f4246000526004601cfd5b6000606052806040525050505050565b80836002016000828254019250508190555082600101600081819054906101000a900467ffffffffffffffff1660010191906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600b600084815260200190815260200160002060004281526020019081526020016000208190555042600a600084815260200190815260200160002060008560010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002081905550505050565b60006008600083815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146130b9576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6203f4808160000160149054906101000a900463ffffffff166130dc9190615d52565b63ffffffff1642101561311b576040517f5488a9fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061323f83836040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160189054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820160009054906101000a900460ff16600281111561322457613223614ff0565b5b600281111561323657613235614ff0565b5b815250506141aa565b9050600081146132dc57600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663156e29f6338360016040518463ffffffff1660e01b81526004016132a993929190615d8a565b600060405180830381600087803b1580156132c357600080fd5b505af11580156132d7573d6000803e3d6000fd5b505050505b428260000160146101000a81548163ffffffff021916908363ffffffff160217905550823373ffffffffffffffffffffffffffffffffffffffff167f5a0db36dd607437cb4689c3ac30ccb5940e032dab1c80eefe397f5f43202b34e60405160405180910390a3505050565b600060096000838152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660028111156134c0576134bf614ff0565b5b60028111156134d2576134d1614ff0565b5b8152505090506000806134e484610443565b8360e00151915091506000600281111561350157613500614ff0565b5b81600281111561351457613513614ff0565b5b036135ad57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663743f4e9485846040518363ffffffff1660e01b8152600401613576929190615dc1565b600060405180830381600087803b15801561359057600080fd5b505af11580156135a4573d6000803e3d6000fd5b505050506136fe565b600160028111156135c1576135c0614ff0565b5b8160028111156135d4576135d3614ff0565b5b0361366d57600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663067ea39285846040518363ffffffff1660e01b8152600401613636929190615dc1565b600060405180830381600087803b15801561365057600080fd5b505af1158015613664573d6000803e3d6000fd5b505050506136fd565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e0c5057785846040518363ffffffff1660e01b81526004016136ca929190615dc1565b600060405180830381600087803b1580156136e457600080fd5b505af11580156136f8573d6000803e3d6000fd5b505050505b5b50505050565b600060096000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16600281111561387c5761387b614ff0565b5b600281111561388e5761388d614ff0565b5b81525050905060008160a00151036138d2576040517f9b4bb81b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600190506000805b846040015167ffffffffffffffff168311613a9957600080600a60008a8152602001908152602001600020600086815260200190815260200160002054600a60008b81526020019081526020016000206000600188018152602001908152602001600020549150915062278d00820142108015613958575087155b15613964575050613a8e565b62278d008201421080156139755750875b6139a857600b60008a815260200190815260200160002060008381526020019081526020016000205484019350836139e4565b6002600b60008b8152602001908152602001600020600084815260200190815260200160002054816139dd576139dc615c87565b5b0484019350835b5087806139ff57506001876040015167ffffffffffffffff16145b613a305780600a60008b81526020019081526020016000206000878152602001908152602001600020819055613a5a565b6000600a60008b815260200190815260200160002060008781526020019081526020016000208190555b506000600b60008b815260200190815260200160002060008481526020019081526020016000208190555082600101925050505b8260010192506138dd565b806009600089815260200190815260200160002060010160008282829054906101000a900467ffffffffffffffff160392506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550816009600089815260200190815260200160002060020160008282540392505081905550818560a0015103935060008414158015613b2a5750855b15613b5e57613b5d600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660018661441b565b5b60008214613b9457613b93600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338661441b565b5b81873373ffffffffffffffffffffffffffffffffffffffff167fa720e44767e2cddb37cfa697023b1f3875d107b58722b1cb628083a465290af860405160405180910390a450505050505050565b600060096000848152602001908152602001600020604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115613d5a57613d59614ff0565b5b6002811115613d6c57613d6b614ff0565b5b8152505090503373ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614613ddb576040517f091fe61c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000613de684610d8f565b905060008103613e22576040517f9b4bb81b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426009600086815260200190815260200160002060010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555082613ef857600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401613ec1929190615d29565b600060405180830381600087803b158015613edb57600080fd5b505af1158015613eef573d6000803e3d6000fd5b50505050613f03565b613f028482614464565b5b821515843373ffffffffffffffffffffffffffffffffffffffff167f10fffc2725e2f04d2e9a7aa7762d3db31dd4051420267e5be076a5b13e8bb07760405160405180910390a450505050565b600060096000838152602001908152602001600020905073__$c89922958da0ecd017c5bfa382f5c80a2d$__639d79d148826040518263ffffffff1660e01b8152600401613f9e9190615dea565b60006040518083038186803b158015613fb657600080fd5b505af4158015613fca573d6000803e3d6000fd5b505050506000613fd983610d8f565b1115613feb57613fea826000613be2565b5b60008160020154111561400457614003826001613704565b5b60096000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549067ffffffffffffffff02191690556001820160006101000a81549067ffffffffffffffff02191690556001820160086101000a81549067ffffffffffffffff02191690556001820160106101000a81549067ffffffffffffffff0219169055600282016000905560038201600090556004820160006101000a81549060ff02191690555050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b815260040161413093929190615632565b600060405180830381600087803b15801561414a57600080fd5b505af115801561415e573d6000803e3d6000fd5b50505050813373ffffffffffffffffffffffffffffffffffffffff167f26727522aa20721ee01410aea547e7fc187973e8abf49394168d3c9cb4c90cf260405160405180910390a35050565b6000806065600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ad30a7585608001516040518263ffffffff1660e01b815260040161420e9190614a55565b602060405180830381865afa15801561422b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061424f919061556d565b6142599190615e05565b90506000836060015163ffffffff169050600080600061427c8760a00151614655565b91509150600080600086036142c457603d87101561429c578394506142c3565b603c871180156142ac5750605187105b156142b9578294506142c2565b60039150600290505b5b5b600186036143055760428710156142dd57839450614304565b6042871180156142ed5750605687105b156142fa57829450614303565b60109150600590505b5b5b6002860361434657604287101561431e57839450614345565b60418711801561432e5750606087105b1561433b57829450614344565b600b9150600690505b5b5b6003860361438757604787101561435f57839450614386565b60468711801561436f5750606087105b1561437c57829450614385565b60069150600190505b5b5b60008214158015614399575060008114155b156143ba576143b98a8a6040015163ffffffff1684848d60800151614707565b5b600486036143d557604787106143d057826143d2565b835b94505b600586036143f057604287106143eb57826143ed565b835b94505b6006860361440b57603d87106144065782614408565b835b94505b8497505050505050505092915050565b81601a5280603a5269a9059cbb00000000000060005260206000604460166000875af13d15600160005114171661445a576390b8ec186000526004601cfd5b6000603a52505050565b6000683635c9adc5dea000008261447b9190615e05565b90508181036144b6576040517f1d823d0700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000811461454e57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b815260040161451b929190615d29565b600060405180830381600087803b15801561453557600080fd5b505af1158015614549573d6000803e3d6000fd5b505050505b6000818361455c9190615c53565b905061457b600960008681526020019081526020016000208583612f4a565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b81526004016145d8929190615d29565b600060405180830381600087803b1580156145f257600080fd5b505af1158015614606573d6000803e3d6000fd5b5050505083813373ffffffffffffffffffffffffffffffffffffffff167f1004c640a4c8dbc3c9dd5ff33837d99e4882aaf2b20fb8e7c419fc83c8ca5bd060405160405180910390a450505050565b6000806000600281111561466c5761466b614ff0565b5b83600281111561467f5761467e614ff0565b5b03614691576001600480925081935050505b600160028111156146a5576146a4614ff0565b5b8360028111156146b8576146b7614ff0565b5b036146ca576002600580925081935050505b6002808111156146dd576146dc614ff0565b5b8360028111156146f0576146ef614ff0565b5b03614702576003600680925081935050505b915091565b600083600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ad30a75846040518263ffffffff1660e01b81526004016147659190614a55565b602060405180830381865afa158015614782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147a6919061556d565b6147b09190615e05565b90508281101561488557600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a30338860016040518563ffffffff1660e01b815260040161481c94939291906159dc565b600060405180830381600087803b15801561483657600080fd5b505af115801561484a573d6000803e3d6000fd5b5050505060006008600088815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff1602179055505b505050505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600065ffffffffffff168152602001600065ffffffffffff1681525090565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600081526020016000600281111561493e5761493d614ff0565b5b81525090565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681526020016000815260200160008152602001600060028111156149d3576149d2614ff0565b5b81525090565b600080fd5b600080fd5b6000819050919050565b6149f6816149e3565b8114614a0157600080fd5b50565b600081359050614a13816149ed565b92915050565b600060208284031215614a2f57614a2e6149d9565b5b6000614a3d84828501614a04565b91505092915050565b614a4f816149e3565b82525050565b6000602082019050614a6a6000830184614a46565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112614a9557614a94614a70565b5b8235905067ffffffffffffffff811115614ab257614ab1614a75565b5b602083019150836020820283011115614ace57614acd614a7a565b5b9250929050565b60008060208385031215614aec57614aeb6149d9565b5b600083013567ffffffffffffffff811115614b0a57614b096149de565b5b614b1685828601614a7f565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614b4d82614b22565b9050919050565b614b5d81614b42565b8114614b6857600080fd5b50565b600081359050614b7a81614b54565b92915050565b600080600080600080600060e0888a031215614b9f57614b9e6149d9565b5b6000614bad8a828b01614b6b565b9750506020614bbe8a828b01614b6b565b9650506040614bcf8a828b01614b6b565b9550506060614be08a828b01614b6b565b9450506080614bf18a828b01614b6b565b93505060a0614c028a828b01614b6b565b92505060c0614c138a828b01614b6b565b91505092959891949750929550565b614c2b81614b42565b82525050565b600060e082019050614c46600083018a614c22565b614c536020830189614c22565b614c606040830188614c22565b614c6d6060830187614c22565b614c7a6080830186614c22565b614c8760a0830185614c22565b614c9460c0830184614c22565b98975050505050505050565b60008060008060408587031215614cba57614cb96149d9565b5b600085013567ffffffffffffffff811115614cd857614cd76149de565b5b614ce487828801614a7f565b9450945050602085013567ffffffffffffffff811115614d0757614d066149de565b5b614d1387828801614a7f565b925092505092959194509250565b60008083601f840112614d3757614d36614a70565b5b8235905067ffffffffffffffff811115614d5457614d53614a75565b5b602083019150836020820283011115614d7057614d6f614a7a565b5b9250929050565b60008060008060008060608789031215614d9457614d936149d9565b5b600087013567ffffffffffffffff811115614db257614db16149de565b5b614dbe89828a01614a7f565b9650965050602087013567ffffffffffffffff811115614de157614de06149de565b5b614ded89828a01614a7f565b9450945050604087013567ffffffffffffffff811115614e1057614e0f6149de565b5b614e1c89828a01614d21565b92509250509295509295509295565b614e3481614b42565b82525050565b600065ffffffffffff82169050919050565b614e5581614e3a565b82525050565b606082016000820151614e716000850182614e2b565b506020820151614e846020850182614e4c565b506040820151614e976040850182614e4c565b50505050565b6000606082019050614eb26000830184614e5b565b92915050565b60008083601f840112614ece57614ecd614a70565b5b8235905067ffffffffffffffff811115614eeb57614eea614a75565b5b602083019150836020820283011115614f0757614f06614a7a565b5b9250929050565b60008060008060008060608789031215614f2b57614f2a6149d9565b5b600087013567ffffffffffffffff811115614f4957614f486149de565b5b614f5589828a01614a7f565b9650965050602087013567ffffffffffffffff811115614f7857614f776149de565b5b614f8489828a01614a7f565b9450945050604087013567ffffffffffffffff811115614fa757614fa66149de565b5b614fb389828a01614eb8565b92509250509295509295509295565b600063ffffffff82169050919050565b614fdb81614fc2565b82525050565b614fea816149e3565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106150305761502f614ff0565b5b50565b60008190506150418261501f565b919050565b600061505182615033565b9050919050565b61506181615046565b82525050565b60c08201600082015161507d6000850182614e2b565b5060208201516150906020850182614fd2565b5060408201516150a36040850182614fd2565b5060608201516150b66060850182614fd2565b5060808201516150c96080850182614fe1565b5060a08201516150dc60a0850182615058565b50505050565b600060c0820190506150f76000830184615067565b92915050565b60008083601f84011261511357615112614a70565b5b8235905067ffffffffffffffff8111156151305761512f614a75565b5b60208301915083602082028301111561514c5761514b614a7a565b5b9250929050565b6000806000806040858703121561516d5761516c6149d9565b5b600085013567ffffffffffffffff81111561518b5761518a6149de565b5b61519787828801614a7f565b9450945050602085013567ffffffffffffffff8111156151ba576151b96149de565b5b6151c6878288016150fd565b925092505092959194509250565b600067ffffffffffffffff82169050919050565b6151f1816151d4565b82525050565b6003811061520857615207614ff0565b5b50565b6000819050615219826151f7565b919050565b60006152298261520b565b9050919050565b6152398161521e565b82525050565b610100820160008201516152566000850182614e2b565b50602082015161526960208501826151e8565b50604082015161527c60408501826151e8565b50606082015161528f60608501826151e8565b5060808201516152a260808501826151e8565b5060a08201516152b560a0850182614fe1565b5060c08201516152c860c0850182614fe1565b5060e08201516152db60e0850182615230565b50505050565b6000610100820190506152f7600083018461523f565b92915050565b60008083601f84011261531357615312614a70565b5b8235905067ffffffffffffffff8111156153305761532f614a75565b5b60208301915083600182028301111561534c5761534b614a7a565b5b9250929050565b60008060008060008060a087890312156153705761536f6149d9565b5b600061537e89828a01614b6b565b965050602061538f89828a01614b6b565b95505060406153a089828a01614a04565b94505060606153b189828a01614a04565b935050608087013567ffffffffffffffff8111156153d2576153d16149de565b5b6153de89828a016152fd565b92509250509295509295509295565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b615422816153ed565b82525050565b600060208201905061543d6000830184615419565b92915050565b61544c816149e3565b82525050565b6000819050919050565b600061547761547261546d846151d4565b615452565b6149e3565b9050919050565b6154878161545c565b82525050565b60006154a86154a361549e84614b22565b615452565b614b22565b9050919050565b60006154ba8261548d565b9050919050565b60006154cc826154af565b9050919050565b6154dc816154c1565b82525050565b8082525050565b600060e0820190506154fe600083018a615443565b61550b602083018961547e565b6155186040830188615443565b6155256060830187615443565b61553260808301866154d3565b61553f60a08301856154e2565b61554c60c08301846154e2565b98975050505050505050565b600081519050615567816149ed565b92915050565b600060208284031215615583576155826149d9565b5b600061559184828501615558565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061560382614e3a565b915061560e83614e3a565b9250828201905065ffffffffffff81111561562c5761562b6155c9565b5b92915050565b60006060820190506156476000830186614c22565b6156546020830185614c22565b6156616040830184614a46565b949350505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006156d6602e83615669565b91506156e18261567a565b604082019050919050565b60006020820190508181036000830152615705816156c9565b9050919050565b6000819050919050565b600060ff82169050919050565b600061573e6157396157348461570c565b615452565b615716565b9050919050565b61574e81615723565b82525050565b60006020820190506157696000830184615745565b92915050565b60006080820190506157846000830187615443565b615791602083018661547e565b61579e604083018561547e565b6157ab60608301846154d3565b95945050505050565b6000815190506157c381614b54565b92915050565b6000602082840312156157df576157de6149d9565b5b60006157ed848285016157b4565b91505092915050565b600060208201905061580b60008301846154d3565b92915050565b8082525050565b6000615823826154af565b9050919050565b61583381615818565b82525050565b600060608201905061584e6000830186615811565b61585b602083018561582a565b6158686040830184615443565b949350505050565b600061587b826154af565b9050919050565b61588b81615870565b82525050565b60006060820190506158a66000830186615882565b6158b36020830185615443565b6158c06040830184615443565b949350505050565b600381106158d557600080fd5b50565b6000813590506158e7816158c8565b92915050565b600060208284031215615903576159026149d9565b5b6000615911848285016158d8565b91505092915050565b6159238161521e565b82525050565b600060408201905061593e6000830185614a46565b61594b602083018461591a565b9392505050565b8082525050565b600060208201905061596e6000830184615952565b92915050565b600061598f61598a6159858461570c565b615452565b6149e3565b9050919050565b61599f81615974565b82525050565b600082825260208201905092915050565b50565b60006159c66000836159a5565b91506159d1826159b6565b600082019050919050565b600060a0820190506159f16000830187614c22565b6159fe6020830186614c22565b615a0b6040830185614a46565b615a186060830184615996565b8181036080830152615a29816159b9565b905095945050505050565b6000604082019050615a496000830185615952565b615a566020830184615443565b9392505050565b60038110615a6a57600080fd5b50565b600081359050615a7c81615a5d565b92915050565b600060208284031215615a9857615a976149d9565b5b6000615aa684828501615a6d565b91505092915050565b615ab881615046565b82525050565b6000608082019050615ad36000830187615882565b615ae06020830186615443565b615aed6040830185615443565b615afa6060830184615aaf565b95945050505050565b615b0c81615046565b82525050565b6000602082019050615b276000830184615b03565b92915050565b60008115159050919050565b615b4281615b2d565b8114615b4d57600080fd5b50565b600081359050615b5f81615b39565b92915050565b600060208284031215615b7b57615b7a6149d9565b5b6000615b8984828501615b50565b91505092915050565b6000615b9d82614fc2565b9150615ba883614fc2565b9250828203905063ffffffff811115615bc457615bc36155c9565b5b92915050565b6000615be5615be0615bdb84614fc2565b615452565b6149e3565b9050919050565b615bf581615bca565b82525050565b600060a082019050615c106000830187614c22565b615c1d6020830186614c22565b615c2a6040830185615bec565b615c376060830184615996565b8181036080830152615c48816159b9565b905095945050505050565b6000615c5e826149e3565b9150615c69836149e3565b9250828203905081811115615c8157615c806155c9565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000615cc1826149e3565b9150615ccc836149e3565b925082615cdc57615cdb615c87565b5b828204905092915050565b6000615cf2826149e3565b9150615cfd836149e3565b9250828202615d0b816149e3565b91508282048414831517615d2257615d216155c9565b5b5092915050565b6000604082019050615d3e6000830185614c22565b615d4b6020830184614a46565b9392505050565b6000615d5d82614fc2565b9150615d6883614fc2565b9250828201905063ffffffff811115615d8457615d836155c9565b5b92915050565b6000606082019050615d9f6000830186614c22565b615dac6020830185614a46565b615db96040830184615996565b949350505050565b6000604082019050615dd66000830185614a46565b615de36020830184614a46565b9392505050565b6000602082019050615dff6000830184615811565b92915050565b6000615e10826149e3565b9150615e1b836149e3565b925082615e2b57615e2a615c87565b5b82820690509291505056fea26469706673582212203a1574272710ef0e4047e9ed195f64aef2098827d6c7a82f7a89cb4f652b663464736f6c63430008110033",
  "libraries": {
    "Lib": "0x4536332EA1b71739428BcE498EaDa851683d4Eb4"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bringInAnimalsToLaborGround(uint256[],uint256[])": {
        "params": {
          "_animalsId": "An array of token IDs representing the animals.",
          "_tokenId": "An array of token IDs representing the labor grounds."
        }
      },
      "claimCaveReward(uint256[])": {
        "details": "Function to allow the caller to claim rewards for multiple Cave tokens.",
        "params": {
          "_tokenId": "An array of Cave token IDs to claim rewards for."
        }
      },
      "claimCollectables(uint256[])": {
        "details": "This function allows a user to claim multiple collectables at once by providing an array of token IDs.",
        "params": {
          "_tokenId": "An array of token IDs that the user wants to claim."
        }
      },
      "claimDevelopmentGroundBonesReward(uint256[],bool[])": {
        "params": {
          "_stake": "Whether to stake the reward bones in the development ground",
          "_tokenId": "ID of the development ground"
        }
      },
      "enterCaves(uint256[])": {
        "details": "Allows the owner to enter the caves. This will transfer the token to the contract and set the owner, staking time, and last reward timestamp for the caves.",
        "params": {
          "_tokenId": "The token ID of the caves to enter."
        }
      },
      "enterDevelopmentGround(uint256[],uint256[],uint8[])": {
        "details": "Enters the DevelopmentGround by transferring the tokens from the sender to the contract and setting the development ground data such as owner, entry time, lock period, etc.",
        "params": {
          "_ground": "Array of grounds for each corresponding token",
          "_lockTime": "Array of lock times for each corresponding token",
          "_tokenId": "Array of token IDs to be transferred"
        }
      },
      "enterLaborGround(uint256[],uint256[],uint8[])": {
        "params": {
          "_job": "Array of jobs assigned to the labor grounds.",
          "_supplyId": "Array of supply IDs associated with the labor grounds.",
          "_tokenId": "Array of token IDs of the labor grounds."
        }
      },
      "getCavesInfo(uint256)": {
        "details": "This function returns a Caves struct containing information about a Cave token, specified by its ID, _tokenId.",
        "params": {
          "_tokenId": "ID of the Cave token to retrieve information for"
        },
        "returns": {
          "_0": "The Caves struct containing information about the specified Cave token."
        }
      },
      "getCavesReward(uint256)": {
        "details": "Function to retrieve the rewards for a Cave token.",
        "params": {
          "_tokenId": "The ID of the Cave token to retrieve rewards for."
        },
        "returns": {
          "_0": "The rewards for the specified Cave token."
        }
      },
      "getDevelopmentGroundBonesReward(uint256)": {
        "details": "Returns the reward for the bones staked in the development ground.",
        "params": {
          "_tokenId": "The token ID for the development ground."
        },
        "returns": {
          "_0": "The reward for the bones staked in the development ground."
        }
      },
      "getDevelopmentGroundInfo(uint256)": {
        "details": "This function returns a DevelopmentGround struct containing information about a Development Ground token, specified by its ID, _tokenId.",
        "params": {
          "_tokenId": "ID of the Development Ground token to retrieve information for"
        },
        "returns": {
          "_0": "The DevelopmentGround struct containing information about the specified Development Ground token."
        }
      },
      "getLaborGroundInfo(uint256)": {
        "details": "This function returns a LaborGround struct containing information about a Labor Ground token, specified by its ID, _tokenId.",
        "params": {
          "_tokenId": "ID of the Labor Ground token to retrieve information for"
        },
        "returns": {
          "_0": "The LaborGround struct containing information about the specified Labor Ground token."
        }
      },
      "getPrimarySkill(uint256)": {
        "params": {
          "_tokenId": "ID of the development ground"
        },
        "returns": {
          "_0": "The primary skill level"
        }
      },
      "leaveCave(uint256[])": {
        "details": "Function to allow the owner of a Cave token to leave the cave and claim any rewards.",
        "params": {
          "_tokenId": "An array of Cave token IDs to be claimed and left."
        }
      },
      "leaveDevelopmentGround(uint256[])": {
        "details": "Allows the owner to leave the development ground. This will transfer the token back to the owner and remove any bones staked in the development ground.",
        "params": {
          "_tokenId": "The token ID of the development ground to leave."
        }
      },
      "leaveLaborGround(uint256[])": {
        "details": "This function allows a user to leave the LaborGround and receive their animal, supply, and collectable.",
        "params": {
          "_tokenId": "An array of token IDs that the user wants to leave."
        }
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "This function is the onERC1155Received fallback function for the contract, which is triggered when the contract receives an ERC1155 token transfer.",
        "returns": {
          "_0": "The selector for this function, \"0x20f90a7e\"."
        }
      },
      "removeAnimalsFromLaborGround(uint256[],uint256[])": {
        "params": {
          "_animalsId": "Array of animals IDs associated with the labor grounds.",
          "_tokenId": "Array of token IDs of the labor grounds."
        }
      },
      "removeBones(uint256[],bool[])": {
        "details": "Removes bones from a specific development ground.",
        "params": {
          "_all": "Indicates whether to remove all bones or just a portion of them",
          "_tokenId": "The unique identifier for the development ground"
        }
      },
      "stakeBonesInDevelopmentGround(uint256[],uint256[])": {
        "details": "Stakes the bones in the DevelopmentGround by transferring the bones from the sender to the contract and updating the development ground data.",
        "params": {
          "_amount": "Array of amounts of bones to be transferred",
          "_tokenId": "Array of token IDs for the corresponding amounts of bones"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bringInAnimalsToLaborGround(uint256[],uint256[])": {
        "notice": "Brings in animals to the labor ground by calling the bringInAnimalsToLaborGround function in the Lib library and transferring the ownership of the animal token from the sender to the contract."
      },
      "claimDevelopmentGroundBonesReward(uint256[],bool[])": {
        "notice": "This function allows the owner of multiple development grounds to claim rewards earned by them."
      },
      "enterLaborGround(uint256[],uint256[],uint8[])": {
        "notice": "Enters the labor ground with specified token ID and supply ID, and assigns the job to it. Transfers the token and supply ownership to the contract. Emits the \"EnterLaborGround\" event."
      },
      "getAddress()": {
        "notice": "Returns the addresses of various contract instances that are used in this contract."
      },
      "getCavesInfo(uint256)": {
        "notice": "Retrieve information about a Cave token."
      },
      "getDevelopmentGroundInfo(uint256)": {
        "notice": "Retrieve information about a Development Ground token."
      },
      "getLaborGroundInfo(uint256)": {
        "notice": "Retrieve information about a Labor Ground token."
      },
      "getPrimarySkill(uint256)": {
        "notice": "This function retrieves the primary skill of the `_tokenId` development ground."
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "notice": "Handle incoming ERC1155 token transfers."
      },
      "removeAnimalsFromLaborGround(uint256[],uint256[])": {
        "notice": "Removes the animals from the specified labor ground. Transfers the ownership of the animals back to the sender."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/Phase2.sol:Phase2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/Phase2.sol:Phase2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6364,
        "contract": "contracts/Phase2.sol:Phase2",
        "label": "pits",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IPits)9548"
      },
      {
        "astId": 6367,
        "contract": "contracts/Phase2.sol:Phase2",
        "label": "bones",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IBones)9467"
      },
      {
        "astId": 6370,
        "contract": "contracts/Phase2.sol:Phase2",
        "label": "randomizer",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IRandomizer)9570"
      },
      {
        "astId": 6373,
        "contract": "contracts/Phase2.sol:Phase2",
        "label": "consumables",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IConsumables)9483"
      },
      {
        "astId": 6376,
        "contract": "contracts/Phase2.sol:Phase2",
        "label": "neandersmol",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(INeandersmol)9518"
      },
      {
        "astId": 6379,
        "contract": "contracts/Phase2.sol:Phase2",
        "label": "animals",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC1155Upgradeable)1576"
      },
      {
        "astId": 6382,
        "contract": "contracts/Phase2.sol:Phase2",
        "label": "supplies",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC1155Upgradeable)1576"
      },
      {
        "astId": 6394,
        "contract": "contracts/Phase2.sol:Phase2",
        "label": "caves",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Caves)9665_storage)"
      },
      {
        "astId": 6399,
        "contract": "contracts/Phase2.sol:Phase2",
        "label": "laborGround",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(LaborGround)9658_storage)"
      },
      {
        "astId": 6404,
        "contract": "contracts/Phase2.sol:Phase2",
        "label": "developmentGround",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(DevelopmentGround)9644_storage)"
      },
      {
        "astId": 6410,
        "contract": "contracts/Phase2.sol:Phase2",
        "label": "trackTime",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6416,
        "contract": "contracts/Phase2.sol:Phase2",
        "label": "trackToken",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBones)9467": {
        "encoding": "inplace",
        "label": "contract IBones",
        "numberOfBytes": "20"
      },
      "t_contract(IConsumables)9483": {
        "encoding": "inplace",
        "label": "contract IConsumables",
        "numberOfBytes": "20"
      },
      "t_contract(IERC1155Upgradeable)1576": {
        "encoding": "inplace",
        "label": "contract IERC1155Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(INeandersmol)9518": {
        "encoding": "inplace",
        "label": "contract INeandersmol",
        "numberOfBytes": "20"
      },
      "t_contract(IPits)9548": {
        "encoding": "inplace",
        "label": "contract IPits",
        "numberOfBytes": "20"
      },
      "t_contract(IRandomizer)9570": {
        "encoding": "inplace",
        "label": "contract IRandomizer",
        "numberOfBytes": "20"
      },
      "t_enum(Grounds)9673": {
        "encoding": "inplace",
        "label": "enum Lib.Grounds",
        "numberOfBytes": "1"
      },
      "t_enum(Jobs)9669": {
        "encoding": "inplace",
        "label": "enum Lib.Jobs",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Caves)9665_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Lib.Caves)",
        "numberOfBytes": "32",
        "value": "t_struct(Caves)9665_storage"
      },
      "t_mapping(t_uint256,t_struct(DevelopmentGround)9644_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Lib.DevelopmentGround)",
        "numberOfBytes": "32",
        "value": "t_struct(DevelopmentGround)9644_storage"
      },
      "t_mapping(t_uint256,t_struct(LaborGround)9658_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Lib.LaborGround)",
        "numberOfBytes": "32",
        "value": "t_struct(LaborGround)9658_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Caves)9665_storage": {
        "encoding": "inplace",
        "label": "struct Lib.Caves",
        "members": [
          {
            "astId": 9660,
            "contract": "contracts/Phase2.sol:Phase2",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9662,
            "contract": "contracts/Phase2.sol:Phase2",
            "label": "stakingTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 9664,
            "contract": "contracts/Phase2.sol:Phase2",
            "label": "lastRewardTimestamp",
            "offset": 26,
            "slot": "0",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DevelopmentGround)9644_storage": {
        "encoding": "inplace",
        "label": "struct Lib.DevelopmentGround",
        "members": [
          {
            "astId": 9628,
            "contract": "contracts/Phase2.sol:Phase2",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9630,
            "contract": "contracts/Phase2.sol:Phase2",
            "label": "lockPeriod",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 9632,
            "contract": "contracts/Phase2.sol:Phase2",
            "label": "amountPosition",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 9634,
            "contract": "contracts/Phase2.sol:Phase2",
            "label": "entryTime",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 9636,
            "contract": "contracts/Phase2.sol:Phase2",
            "label": "lastRewardTime",
            "offset": 16,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 9638,
            "contract": "contracts/Phase2.sol:Phase2",
            "label": "bonesStaked",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9640,
            "contract": "contracts/Phase2.sol:Phase2",
            "label": "currentPitsLockPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9643,
            "contract": "contracts/Phase2.sol:Phase2",
            "label": "ground",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(Grounds)9673"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(LaborGround)9658_storage": {
        "encoding": "inplace",
        "label": "struct Lib.LaborGround",
        "members": [
          {
            "astId": 9646,
            "contract": "contracts/Phase2.sol:Phase2",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9648,
            "contract": "contracts/Phase2.sol:Phase2",
            "label": "lockTime",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 9650,
            "contract": "contracts/Phase2.sol:Phase2",
            "label": "supplyId",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 9652,
            "contract": "contracts/Phase2.sol:Phase2",
            "label": "animalId",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 9654,
            "contract": "contracts/Phase2.sol:Phase2",
            "label": "requestId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9657,
            "contract": "contracts/Phase2.sol:Phase2",
            "label": "job",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(Jobs)9669"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}