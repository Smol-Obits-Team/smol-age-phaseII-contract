{
  "address": "0xC3a1ea37E1AFd770A3106E528120e5881796702c",
  "abi": [
    {
      "inputs": [],
      "name": "BalanceIsInsufficient",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RemoveBonesFromYard",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeBonesInYard",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bones",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonesStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getBonesStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getDaysOff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimeOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalBonesStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalDaysOff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bones",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeBonesFromYard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeBonesInYard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDaysOff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xedd2ccc034365e8b4d70e669390b8b1742361b9d869bab33cf2486140f64edc8",
  "receipt": {
    "to": null,
    "from": "0xF454A9675f7fDb9D5431AEab276979fDed1428e4",
    "contractAddress": "0xC3a1ea37E1AFd770A3106E528120e5881796702c",
    "transactionIndex": 1,
    "gasUsed": "3314755",
    "logsBloom": "0x
    "blockHash": "0x41347b379fd662767a7204931dc834808f2a06f3826ac249fa9cd46d6394e2d8",
    "transactionHash": "0xedd2ccc034365e8b4d70e669390b8b1742361b9d869bab33cf2486140f64edc8",
    "logs": [],
    "blockNumber": 8002354,
    "cumulativeGasUsed": "3314755",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6361f1d7e0b69cf5c6ebba581cc5ae31",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BalanceIsInsufficient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveBonesFromYard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBonesInYard\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bones\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonesStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getBonesStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getDaysOff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBonesStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDaysOff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bones\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeBonesFromYard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeBonesInYard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDaysOff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pits.sol\":\"Pits\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Pits.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport {Lib} from \\\"./library/Lib.sol\\\";\\r\\nimport {SafeTransferLib} from \\\"solady/src/utils/SafeTransferLib.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ncontract Pits is Initializable {\\r\\n    IERC20 public bones;\\r\\n    uint256 public bonesStaked;\\r\\n\\r\\n    uint256 public timeOut;\\r\\n\\r\\n    uint256 public totalDaysOff;\\r\\n\\r\\n    mapping(address => uint256) private balance;\\r\\n    mapping(uint256 => uint256) private trackDaysOff;\\r\\n\\r\\n    function initialize(address _bones) external initializer {\\r\\n        bones = IERC20(_bones);\\r\\n    }\\r\\n\\r\\n    function stakeBonesInYard(uint256 _amount) external {\\r\\n        if (bones.balanceOf(msg.sender) < _amount)\\r\\n            revert Lib.BalanceIsInsufficient();\\r\\n        uint256 bonesBalance = bonesStaked;\\r\\n        SafeTransferLib.safeTransferFrom(\\r\\n            address(bones),\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n        balance[msg.sender] += _amount;\\r\\n        bonesStaked += _amount;\\r\\n        if (bonesBalance < minimumBonesRequired() && validation()) {\\r\\n            uint256 daysOut;\\r\\n            timeOut == 0 ? daysOut = 0 : daysOut =\\r\\n                (block.timestamp - timeOut) /\\r\\n                1 days;\\r\\n            trackDaysOff[timeOut] = daysOut;\\r\\n            totalDaysOff += daysOut;\\r\\n        }\\r\\n\\r\\n        emit StakeBonesInYard(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function removeBonesFromYard(uint256 _amount) external {\\r\\n        if (_amount > balance[msg.sender]) revert Lib.BalanceIsInsufficient();\\r\\n        uint256 bonesBalance = bonesStaked;\\r\\n        balance[msg.sender] -= _amount;\\r\\n        bonesStaked -= _amount;\\r\\n        /**\\r\\n         * The balance before was greater than the minimum\\r\\n         * and now it is smaller than it\\r\\n         */\\r\\n        if (bonesBalance >= minimumBonesRequired() && !validation())\\r\\n            timeOut = block.timestamp;\\r\\n        SafeTransferLib.safeTransfer(address(bones), msg.sender, _amount);\\r\\n        emit RemoveBonesFromYard(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function getTotalDaysOff() external view returns (uint256) {\\r\\n        return totalDaysOff;\\r\\n    }\\r\\n\\r\\n    function getDaysOff(uint256 _timestamp) external view returns (uint256) {\\r\\n        return trackDaysOff[_timestamp];\\r\\n    }\\r\\n\\r\\n    function minimumBonesRequired() internal view returns (uint256) {\\r\\n        return (bones.totalSupply() * 3) / 10;\\r\\n    }\\r\\n\\r\\n    function getBonesStaked(address _addr) external view returns (uint256) {\\r\\n        return balance[_addr];\\r\\n    }\\r\\n\\r\\n    function getTimeOut() external view returns (uint256) {\\r\\n        return timeOut;\\r\\n    }\\r\\n\\r\\n    function getTotalBonesStaked() external view returns (uint256) {\\r\\n        return bonesStaked;\\r\\n    }\\r\\n\\r\\n    function validation() public view returns (bool) {\\r\\n        return bonesStaked >= minimumBonesRequired();\\r\\n    }\\r\\n\\r\\n    event StakeBonesInYard(address indexed owner, uint256 indexed amount);\\r\\n    event RemoveBonesFromYard(address indexed owner, uint256 indexed amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x2ed7a07f077a6f50c76d8e3916a6d8c162243d26a538fd66e4fe76a483b15f73\",\"license\":\"MIT\"},\"contracts/interfaces/IBones.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\n\\r\\ninterface IBones is IERC20Upgradeable {\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n\\r\\n    function burn(address _from, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x8637ea23284e83e14816895394ef0a70f8dacf7244b13193547c271444f74f54\",\"license\":\"MIT\"},\"contracts/interfaces/INeandersmol.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\r\\n\\r\\ninterface INeandersmol is IERC721Upgradeable {\\r\\n    function getCommonSense(uint256 _tokenId) external view returns (uint256);\\r\\n\\r\\n    function developMystics(uint256 _tokenId, uint256 _amount) external;\\r\\n\\r\\n    function developFarmers(uint256 _tokenId, uint256 _amount) external;\\r\\n\\r\\n    function developFighter(uint256 _tokenId, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4f4c0cd1d29d2407a64f29d6007840788ca955fd17b2d31f8824415e2281561b\",\"license\":\"MIT\"},\"contracts/interfaces/IPits.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\ninterface IPits {\\r\\n    function validation() external view returns (bool);\\r\\n\\r\\n    function getTimeOut() external view returns (uint256);\\r\\n\\r\\n    function getTimeBelowMinimum() external view returns (uint256);\\r\\n\\r\\n    function getDaysOff(uint256 _timestamp) external view returns (uint256);\\r\\n\\r\\n    function getTotalDaysOff() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x490033dae4f4a91bd8ff6367d7112a32d2495d4d5e4a61bebecb5d8903b0d291\",\"license\":\"MIT\"},\"contracts/library/Lib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport {IPits} from \\\"../interfaces/IPits.sol\\\";\\r\\nimport {INeandersmol} from \\\"../interfaces/INeandersmol.sol\\\";\\r\\nimport {IBones} from \\\"../interfaces/IBones.sol\\\";\\r\\n\\r\\nlibrary Lib {\\r\\n    error CsToHigh();\\r\\n    error NotAContract();\\r\\n    error NotYourToken();\\r\\n    error NotAuthorized();\\r\\n    error WrongMultiple();\\r\\n    error CannotClaimNow();\\r\\n    error TransferFailed();\\r\\n    error InvalidTokenId();\\r\\n    error InvalidLockTime();\\r\\n    error NoMoreAnimalsAllowed();\\r\\n    error LengthsNotEqual();\\r\\n    error ZeroBalanceError();\\r\\n    error CsIsBellowHundred();\\r\\n    error NeandersmolsIsLocked();\\r\\n    error BalanceIsInsufficient();\\r\\n    error InvalidTokenForThisJob();\\r\\n    error DevelopmentGroundIsLocked();\\r\\n    error NeandersmolIsNotInDevelopmentGround();\\r\\n\\r\\n    struct DevelopmentGround {\\r\\n        address owner;\\r\\n        uint64 lockPeriod;\\r\\n        uint64 amountPosition;\\r\\n        uint64 entryTime;\\r\\n        uint64 lastRewardTime;\\r\\n        uint256 bonesStaked;\\r\\n        uint256 currentPitsLockPeriod;\\r\\n        Grounds ground;\\r\\n    }\\r\\n\\r\\n    struct LaborGround {\\r\\n        address owner;\\r\\n        uint32 lockTime;\\r\\n        uint32 supplyId;\\r\\n        uint32 animalId;\\r\\n        uint256 requestId;\\r\\n        Jobs job;\\r\\n    }\\r\\n\\r\\n    struct Caves {\\r\\n        address owner;\\r\\n        uint48 stakingTime;\\r\\n        uint48 lastRewardTimestamp;\\r\\n    }\\r\\n\\r\\n    enum Jobs {\\r\\n        Digging,\\r\\n        Foraging,\\r\\n        Mining\\r\\n    }\\r\\n\\r\\n    enum Grounds {\\r\\n        Chambers,\\r\\n        Garden,\\r\\n        Battlefield\\r\\n    }\\r\\n\\r\\n    uint256 private constant MINIMUM_BONE_STAKE = 1000 * 10 ** 18;\\r\\n\\r\\n    function getDevelopmentGroundBonesReward(\\r\\n        uint256 _currentLockPeriod,\\r\\n        uint256 _lockPeriod,\\r\\n        uint256 _lastRewardTime,\\r\\n        IPits _pits\\r\\n    ) external view returns (uint256) {\\r\\n        if (_lockPeriod == 0) return 0;\\r\\n        uint256 rewardRate = getRewardRate(_lockPeriod);\\r\\n\\r\\n        uint256 time = (block.timestamp - _lastRewardTime) / 1 days;\\r\\n\\r\\n        return\\r\\n            (rewardRate *\\r\\n                time -\\r\\n                calculateFinalReward(_currentLockPeriod, _pits)) * 10 ** 18;\\r\\n    }\\r\\n\\r\\n    // check if this can be fixed to reduce gas cost\\r\\n    function calculatePrimarySkill(\\r\\n        uint256 _bonesStaked,\\r\\n        uint256 _amountPosition,\\r\\n        uint256 _currentLockPeriod,\\r\\n        uint256 _tokenId,\\r\\n        IPits _pits,\\r\\n        mapping(uint256 => mapping(uint256 => uint256)) storage trackTime,\\r\\n        mapping(uint256 => mapping(uint256 => uint256)) storage trackToken\\r\\n    ) external view returns (uint256) {\\r\\n        if (_bonesStaked == 0) return 0;\\r\\n        uint256 amount;\\r\\n        for (uint256 i = 1; i <= _amountPosition; ) {\\r\\n            uint256 time = (block.timestamp - trackTime[_tokenId][i]) / 1 days;\\r\\n            uint256 stakedAmount = trackToken[_tokenId][trackTime[_tokenId][i]];\\r\\n            amount += (time * stakedAmount);\\r\\n\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return\\r\\n            (amount -\\r\\n                calculateFinalReward(_currentLockPeriod, _pits) *\\r\\n                10 ** 20) / 10 ** 4;\\r\\n    }\\r\\n\\r\\n    function calculateFinalReward(\\r\\n        uint256 _currentLockPeriod,\\r\\n        IPits _pits\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 amount;\\r\\n\\r\\n        if (_currentLockPeriod != _pits.getTimeOut()) {\\r\\n            uint256 howLong = (block.timestamp - _pits.getTimeOut()) / 1 days;\\r\\n            amount = (_pits.getTotalDaysOff() -\\r\\n                _pits.getDaysOff(_currentLockPeriod) +\\r\\n                howLong);\\r\\n        }\\r\\n        if (_currentLockPeriod == 0) {\\r\\n            uint256 off;\\r\\n            _pits.getTimeOut() != 0\\r\\n                ? off = (block.timestamp - _pits.getTimeOut()) / 1 days\\r\\n                : 0;\\r\\n            if (_pits.validation()) off = _pits.getTotalDaysOff();\\r\\n            amount = off;\\r\\n        }\\r\\n        return amount * 10;\\r\\n    }\\r\\n\\r\\n    function getRewardRate(\\r\\n        uint _lockTime\\r\\n    ) internal pure returns (uint256 rewardRate) {\\r\\n        if (_lockTime == 50 days) rewardRate = 10;\\r\\n        if (_lockTime == 100 days) rewardRate = 50;\\r\\n        if (_lockTime == 150 days) rewardRate = 100;\\r\\n    }\\r\\n\\r\\n    function enterDevelopmentGround(\\r\\n        INeandersmol _neandersmol,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _lockTime\\r\\n    ) external view {\\r\\n        if (_neandersmol.getCommonSense(_tokenId) < 100)\\r\\n            revert CsIsBellowHundred();\\r\\n        if (_neandersmol.ownerOf(_tokenId) != msg.sender) revert NotYourToken();\\r\\n        if (!lockTimeExists(_lockTime)) revert InvalidLockTime();\\r\\n    }\\r\\n\\r\\n    function lockTimeExists(uint256 _lockTime) internal pure returns (bool) {\\r\\n        return\\r\\n            _lockTime == 50 days ||\\r\\n            _lockTime == 100 days ||\\r\\n            _lockTime == 150 days;\\r\\n    }\\r\\n\\r\\n    function enterLaborGround(\\r\\n        INeandersmol _neandersmol,\\r\\n        uint256 _tokenId,\\r\\n        uint256 _supplyId,\\r\\n        Jobs _job\\r\\n    ) external view {\\r\\n        if (_neandersmol.ownerOf(_tokenId) != msg.sender) revert NotYourToken();\\r\\n        if (_neandersmol.getCommonSense(_tokenId) > 99) revert CsToHigh();\\r\\n        if (!validateTokenId(_supplyId, _job)) revert InvalidTokenForThisJob();\\r\\n    }\\r\\n\\r\\n    function validateTokenId(\\r\\n        uint256 _tokenId,\\r\\n        Jobs _job\\r\\n    ) internal pure returns (bool res) {\\r\\n        if (_job == Jobs.Digging) return _tokenId == 1;\\r\\n        if (_job == Jobs.Foraging) return _tokenId == 2;\\r\\n        if (_job == Jobs.Mining) return _tokenId == 3;\\r\\n    }\\r\\n\\r\\n    function pitsValidation(IPits _pits) external view {\\r\\n        if (!_pits.validation()) revert DevelopmentGroundIsLocked();\\r\\n    }\\r\\n\\r\\n    function leaveDevelopmentGround(\\r\\n        DevelopmentGround storage _devGround\\r\\n    ) external view {\\r\\n        DevelopmentGround memory devGround = _devGround;\\r\\n        if (devGround.owner != msg.sender) revert NotYourToken();\\r\\n        if (block.timestamp < devGround.entryTime + devGround.lockPeriod)\\r\\n            revert NeandersmolsIsLocked();\\r\\n    }\\r\\n\\r\\n    function stakeBonesInDevelopmentGround(\\r\\n        DevelopmentGround storage _devGround,\\r\\n        IBones _bones,\\r\\n        uint256 _amount\\r\\n    ) external view {\\r\\n        if (_bones.balanceOf(msg.sender) < _amount)\\r\\n            revert BalanceIsInsufficient();\\r\\n        if (_devGround.owner != msg.sender)\\r\\n            revert NeandersmolIsNotInDevelopmentGround();\\r\\n        if (_amount % MINIMUM_BONE_STAKE != 0) revert WrongMultiple();\\r\\n    }\\r\\n\\r\\n    function bringInAnimalsToLaborGround(\\r\\n        LaborGround storage _labor\\r\\n    ) external view {\\r\\n        if (_labor.owner != msg.sender) revert NotYourToken();\\r\\n        if (_labor.animalId != 0) revert NoMoreAnimalsAllowed();\\r\\n    }\\r\\n\\r\\n    function removeAnimalsFromLaborGround(\\r\\n        LaborGround storage _labor,\\r\\n        uint256 _animalsId\\r\\n    ) external view {\\r\\n        if (_labor.owner != msg.sender && _labor.animalId != _animalsId + 1)\\r\\n            revert Lib.NotYourToken();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa0e72777885f386da6a0b94c8dfcde14bad617e0c547b1a6d9e741be3e6784f4\",\"license\":\"MIT\"},\"solady/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Caution! This library won't check that a token has code, responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ETH transfer has failed.\\n    error ETHTransferFailed();\\n\\n    /// @dev The ERC20 `transferFrom` has failed.\\n    error TransferFromFailed();\\n\\n    /// @dev The ERC20 `transfer` has failed.\\n    error TransferFailed();\\n\\n    /// @dev The ERC20 `approve` has failed.\\n    error ApproveFailed();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH\\n    /// that disallows any storage writes.\\n    uint256 internal constant _GAS_STIPEND_NO_STORAGE_WRITES = 2300;\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\\n    /// storage reads and writes, but low enough to prevent griefing.\\n    /// Multiply by a small constant (e.g. 2), if needed.\\n    uint256 internal constant _GAS_STIPEND_NO_GRIEF = 100000;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       ETH OPERATIONS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gasStipend, to, amount, 0, 0, 0, 0)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                pop(create(amount, 0x0b, 0x16))\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a gas stipend\\n    /// equal to `_GAS_STIPEND_NO_GRIEF`. This gas stipend is a reasonable default\\n    /// for 99% of cases and can be overriden with the three-argument version of this\\n    /// function if necessary.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount) internal {\\n        // Manually inlined because the compiler doesn't inline functions with branches.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(_GAS_STIPEND_NO_GRIEF, to, amount, 0, 0, 0, 0)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                pop(create(amount, 0x0b, 0x16))\\n            }\\n        }\\n    }\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// Simply use `gasleft()` for `gasStipend` if you don't need a gas stipend.\\n    ///\\n    /// Note: Does NOT revert upon failure.\\n    /// Returns whether the transfer of ETH is successful instead.\\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\\n        internal\\n        returns (bool success)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            success := call(gasStipend, to, amount, 0, 0, 0, 0)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC20 OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x00, 0x23b872dd)\\n            mstore(0x20, from) // Store the `from` argument.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x60, amount) // Store the `amount` argument.\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferAllFrom(address token, address from, address to)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, from) // Store the `from` argument.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x00, 0x23b872dd)\\n            mstore(0x40, to) // Store the `to` argument.\\n            // The `amount` argument is already written to the memory word at 0x6a.\\n            amount := mload(0x60)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1a, to) // Store the `to` argument.\\n            mstore(0x3a, amount) // Store the `amount` argument.\\n            // Store the function selector of `transfer(address,uint256)`,\\n            // left by 6 bytes (enough for 8tb of memory represented by the free memory pointer).\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\n            mstore(0x00, 0xa9059cbb000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x16, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, address()) // Store the address of the current contract.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x3a, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x1a, to) // Store the `to` argument.\\n            // The `amount` argument is already written to the memory word at 0x3a.\\n            amount := mload(0x3a)\\n            // Store the function selector of `transfer(address,uint256)`,\\n            // left by 6 bytes (enough for 8tb of memory represented by the free memory pointer).\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\n            mstore(0x00, 0xa9059cbb000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x16, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// Reverts upon failure.\\n    function safeApprove(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1a, to) // Store the `to` argument.\\n            mstore(0x3a, amount) // Store the `amount` argument.\\n            // Store the function selector of `approve(address,uint256)`,\\n            // left by 6 bytes (enough for 8tb of memory represented by the free memory pointer).\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\n            mstore(0x00, 0x095ea7b3000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x16, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `ApproveFailed()`.\\n                mstore(0x00, 0x3e3f8f73)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\\n    /// Returns zero if the `token` does not exist.\\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, account) // Store the `account` argument.\\n            amount :=\\n                mul(\\n                    mload(0x20),\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                        staticcall(gas(), token, 0x1c, 0x24, 0x20, 0x20)\\n                    )\\n                )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd90b1d9017a6969dce31df5199f92f1b6f5a0a59fa2ac06217a83a2815700082\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610eb2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806389626bbb1161008c578063c4d66de811610066578063c4d66de8146101de578063d09f53c0146101fa578063d88ad8871461022a578063e30aadc014610248576100cf565b806389626bbb146101865780638d32b0b0146101a4578063ae4b37e4146101c0576100cf565b806311f77b6c146100d45780631b688d9f146100f2578063229f45701461011057806360dc175d1461012c578063614d85e11461014a5780637bd90cc214610168575b600080fd5b6100dc610278565b6040516100e99190610a1d565b60405180910390f35b6100fa61027e565b6040516101079190610a1d565b60405180910390f35b61012a60048036038101906101259190610a69565b610288565b005b6101346104d3565b6040516101419190610a1d565b60405180910390f35b6101526104dd565b60405161015f9190610a1d565b60405180910390f35b6101706104e3565b60405161017d9190610a1d565b60405180910390f35b61018e6104ed565b60405161019b9190610a1d565b60405180910390f35b6101be60048036038101906101b99190610a69565b6104f3565b005b6101c8610680565b6040516101d59190610ab1565b60405180910390f35b6101f860048036038101906101f39190610b2a565b610694565b005b610214600480360381019061020f9190610a69565b61080c565b6040516102219190610a1d565b60405180910390f35b610232610829565b60405161023f9190610bb6565b60405180910390f35b610262600480360381019061025d9190610b2a565b61084f565b60405161026f9190610a1d565b60405180910390f35b60015481565b6000600254905090565b80600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016102e49190610be0565b602060405180830381865afa158015610301573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103259190610c10565b101561035d576040517f7276110900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001549050610392600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16333085610898565b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103e19190610c6c565b9250508190555081600160008282546103fa9190610c6c565b925050819055506104096108e8565b8110801561041b575061041a610680565b5b1561048b576000806002541461044f57620151806002544261043d9190610ca0565b6104479190610d03565b905080610455565b60009050805b50806005600060025481526020019081526020016000208190555080600360008282546104829190610c6c565b92505081905550505b813373ffffffffffffffffffffffffffffffffffffffff167feee583b3a9abd3fc0b4ec61ae41e4945daef0730d6e2ff18701a2eccf5a14fc360405160405180910390a35050565b6000600154905090565b60025481565b6000600354905090565b60035481565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111561056c576040517f7276110900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600154905081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105c29190610ca0565b9250508190555081600160008282546105db9190610ca0565b925050819055506105ea6108e8565b81101580156105fe57506105fc610680565b155b1561060b57426002819055505b610638600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff163384610998565b813373ffffffffffffffffffffffffffffffffffffffff167f890a9eede17bad064866e98bf8a4b0039775595030c55e9c2a142bbe4913a85b60405160405180910390a35050565b600061068a6108e8565b6001541015905090565b60008060019054906101000a900460ff161590508080156106c55750600160008054906101000a900460ff1660ff16105b806106f257506106d4306109e1565b1580156106f15750600160008054906101000a900460ff1660ff16145b5b610731576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072890610db7565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561076e576001600060016101000a81548160ff0219169083151502179055505b81600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156108085760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516107ff9190610e1f565b60405180910390a15b5050565b600060056000838152602001908152602001600020549050919050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040516323b872dd600052836020528260405281606052602060006064601c6000895af13d1560016000511417166108d857637939f4246000526004601cfd5b6000606052806040525050505050565b6000600a6003600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561095b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097f9190610c10565b6109899190610e3a565b6109939190610d03565b905090565b81601a5280603a5269a9059cbb00000000000060005260206000604460166000875af13d1560016000511417166109d7576390b8ec186000526004601cfd5b6000603a52505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b610a1781610a04565b82525050565b6000602082019050610a326000830184610a0e565b92915050565b600080fd5b610a4681610a04565b8114610a5157600080fd5b50565b600081359050610a6381610a3d565b92915050565b600060208284031215610a7f57610a7e610a38565b5b6000610a8d84828501610a54565b91505092915050565b60008115159050919050565b610aab81610a96565b82525050565b6000602082019050610ac66000830184610aa2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610af782610acc565b9050919050565b610b0781610aec565b8114610b1257600080fd5b50565b600081359050610b2481610afe565b92915050565b600060208284031215610b4057610b3f610a38565b5b6000610b4e84828501610b15565b91505092915050565b6000819050919050565b6000610b7c610b77610b7284610acc565b610b57565b610acc565b9050919050565b6000610b8e82610b61565b9050919050565b6000610ba082610b83565b9050919050565b610bb081610b95565b82525050565b6000602082019050610bcb6000830184610ba7565b92915050565b610bda81610aec565b82525050565b6000602082019050610bf56000830184610bd1565b92915050565b600081519050610c0a81610a3d565b92915050565b600060208284031215610c2657610c25610a38565b5b6000610c3484828501610bfb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7782610a04565b9150610c8283610a04565b9250828201905080821115610c9a57610c99610c3d565b5b92915050565b6000610cab82610a04565b9150610cb683610a04565b9250828203905081811115610cce57610ccd610c3d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610d0e82610a04565b9150610d1983610a04565b925082610d2957610d28610cd4565b5b828204905092915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000610da1602e83610d34565b9150610dac82610d45565b604082019050919050565b60006020820190508181036000830152610dd081610d94565b9050919050565b6000819050919050565b600060ff82169050919050565b6000610e09610e04610dff84610dd7565b610b57565b610de1565b9050919050565b610e1981610dee565b82525050565b6000602082019050610e346000830184610e10565b92915050565b6000610e4582610a04565b9150610e5083610a04565b9250828202610e5e81610a04565b91508282048414831517610e7557610e74610c3d565b5b509291505056fea26469706673582212205ee2b20622a561e53b2cf967ae66b85c4e9f8be6f7eb2b0ebc3e07524582af5464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806389626bbb1161008c578063c4d66de811610066578063c4d66de8146101de578063d09f53c0146101fa578063d88ad8871461022a578063e30aadc014610248576100cf565b806389626bbb146101865780638d32b0b0146101a4578063ae4b37e4146101c0576100cf565b806311f77b6c146100d45780631b688d9f146100f2578063229f45701461011057806360dc175d1461012c578063614d85e11461014a5780637bd90cc214610168575b600080fd5b6100dc610278565b6040516100e99190610a1d565b60405180910390f35b6100fa61027e565b6040516101079190610a1d565b60405180910390f35b61012a60048036038101906101259190610a69565b610288565b005b6101346104d3565b6040516101419190610a1d565b60405180910390f35b6101526104dd565b60405161015f9190610a1d565b60405180910390f35b6101706104e3565b60405161017d9190610a1d565b60405180910390f35b61018e6104ed565b60405161019b9190610a1d565b60405180910390f35b6101be60048036038101906101b99190610a69565b6104f3565b005b6101c8610680565b6040516101d59190610ab1565b60405180910390f35b6101f860048036038101906101f39190610b2a565b610694565b005b610214600480360381019061020f9190610a69565b61080c565b6040516102219190610a1d565b60405180910390f35b610232610829565b60405161023f9190610bb6565b60405180910390f35b610262600480360381019061025d9190610b2a565b61084f565b60405161026f9190610a1d565b60405180910390f35b60015481565b6000600254905090565b80600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016102e49190610be0565b602060405180830381865afa158015610301573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103259190610c10565b101561035d576040517f7276110900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001549050610392600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16333085610898565b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103e19190610c6c565b9250508190555081600160008282546103fa9190610c6c565b925050819055506104096108e8565b8110801561041b575061041a610680565b5b1561048b576000806002541461044f57620151806002544261043d9190610ca0565b6104479190610d03565b905080610455565b60009050805b50806005600060025481526020019081526020016000208190555080600360008282546104829190610c6c565b92505081905550505b813373ffffffffffffffffffffffffffffffffffffffff167feee583b3a9abd3fc0b4ec61ae41e4945daef0730d6e2ff18701a2eccf5a14fc360405160405180910390a35050565b6000600154905090565b60025481565b6000600354905090565b60035481565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111561056c576040517f7276110900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600154905081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105c29190610ca0565b9250508190555081600160008282546105db9190610ca0565b925050819055506105ea6108e8565b81101580156105fe57506105fc610680565b155b1561060b57426002819055505b610638600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff163384610998565b813373ffffffffffffffffffffffffffffffffffffffff167f890a9eede17bad064866e98bf8a4b0039775595030c55e9c2a142bbe4913a85b60405160405180910390a35050565b600061068a6108e8565b6001541015905090565b60008060019054906101000a900460ff161590508080156106c55750600160008054906101000a900460ff1660ff16105b806106f257506106d4306109e1565b1580156106f15750600160008054906101000a900460ff1660ff16145b5b610731576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072890610db7565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561076e576001600060016101000a81548160ff0219169083151502179055505b81600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156108085760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516107ff9190610e1f565b60405180910390a15b5050565b600060056000838152602001908152602001600020549050919050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040516323b872dd600052836020528260405281606052602060006064601c6000895af13d1560016000511417166108d857637939f4246000526004601cfd5b6000606052806040525050505050565b6000600a6003600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561095b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097f9190610c10565b6109899190610e3a565b6109939190610d03565b905090565b81601a5280603a5269a9059cbb00000000000060005260206000604460166000875af13d1560016000511417166109d7576390b8ec186000526004601cfd5b6000603a52505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b610a1781610a04565b82525050565b6000602082019050610a326000830184610a0e565b92915050565b600080fd5b610a4681610a04565b8114610a5157600080fd5b50565b600081359050610a6381610a3d565b92915050565b600060208284031215610a7f57610a7e610a38565b5b6000610a8d84828501610a54565b91505092915050565b60008115159050919050565b610aab81610a96565b82525050565b6000602082019050610ac66000830184610aa2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610af782610acc565b9050919050565b610b0781610aec565b8114610b1257600080fd5b50565b600081359050610b2481610afe565b92915050565b600060208284031215610b4057610b3f610a38565b5b6000610b4e84828501610b15565b91505092915050565b6000819050919050565b6000610b7c610b77610b7284610acc565b610b57565b610acc565b9050919050565b6000610b8e82610b61565b9050919050565b6000610ba082610b83565b9050919050565b610bb081610b95565b82525050565b6000602082019050610bcb6000830184610ba7565b92915050565b610bda81610aec565b82525050565b6000602082019050610bf56000830184610bd1565b92915050565b600081519050610c0a81610a3d565b92915050565b600060208284031215610c2657610c25610a38565b5b6000610c3484828501610bfb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7782610a04565b9150610c8283610a04565b9250828201905080821115610c9a57610c99610c3d565b5b92915050565b6000610cab82610a04565b9150610cb683610a04565b9250828203905081811115610cce57610ccd610c3d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610d0e82610a04565b9150610d1983610a04565b925082610d2957610d28610cd4565b5b828204905092915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000610da1602e83610d34565b9150610dac82610d45565b604082019050919050565b60006020820190508181036000830152610dd081610d94565b9050919050565b6000819050919050565b600060ff82169050919050565b6000610e09610e04610dff84610dd7565b610b57565b610de1565b9050919050565b610e1981610dee565b82525050565b6000602082019050610e346000830184610e10565b92915050565b6000610e4582610a04565b9150610e5083610a04565b9250828202610e5e81610a04565b91508282048414831517610e7557610e74610c3d565b5b509291505056fea26469706673582212205ee2b20622a561e53b2cf967ae66b85c4e9f8be6f7eb2b0ebc3e07524582af5464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/Pits.sol:Pits",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/Pits.sol:Pits",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 751,
        "contract": "contracts/Pits.sol:Pits",
        "label": "bones",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IERC20)736"
      },
      {
        "astId": 753,
        "contract": "contracts/Pits.sol:Pits",
        "label": "bonesStaked",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 755,
        "contract": "contracts/Pits.sol:Pits",
        "label": "timeOut",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 757,
        "contract": "contracts/Pits.sol:Pits",
        "label": "totalDaysOff",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 761,
        "contract": "contracts/Pits.sol:Pits",
        "label": "balance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 765,
        "contract": "contracts/Pits.sol:Pits",
        "label": "trackDaysOff",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)736": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}