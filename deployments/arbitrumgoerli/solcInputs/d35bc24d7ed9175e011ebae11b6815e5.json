{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Caves.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport { Lib } from \"./library/Lib.sol\";\nimport { IBones } from \"./interfaces/IBones.sol\";\nimport { Cave, CavesFeInfo } from \"./library/StructsEnums.sol\";\nimport { IPits } from \"./interfaces/IPits.sol\";\n\nimport { INeandersmol } from \"./interfaces/INeandersmol.sol\";\n\nimport {\n    NotYourToken,\n    NeandersmolsIsLocked,\n    ZeroBalanceError\n} from \"./library/Error.sol\";\n\nimport {\n    Initializable\n} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract Caves is Initializable {\n    IPits public pits;\n    IBones public bones;\n    INeandersmol public neandersmol;\n\n    mapping(uint256 => Cave) private caves;\n\n    mapping(address => uint256[]) private ownerToTokens;\n\n    function initialize(\n        address _pits,\n        address _bones,\n        address _neandersmol\n    ) external initializer {\n        bones = IBones(_bones);\n        pits = IPits(_pits);\n        neandersmol = INeandersmol(_neandersmol);\n    }\n\n    /**\n     * @dev Allows the owner to enter the caves. This will transfer the token to the contract and set the owner, staking time, and last reward timestamp for the caves.\n     * @param _tokenId The token ID of the caves to enter.\n     */\n\n    function enterCaves(uint256[] calldata _tokenId) external {\n        Lib.pitsValidation(pits);\n        uint256 i;\n        for (; i < _tokenId.length; ++i) {\n            uint256 tokenId = _tokenId[i];\n            Cave storage cave = caves[tokenId];\n            if (neandersmol.ownerOf(tokenId) != msg.sender)\n                revert NotYourToken();\n            neandersmol.transferFrom(msg.sender, address(this), tokenId);\n            cave.owner = msg.sender;\n            cave.stakingTime = uint48(block.timestamp);\n            cave.lastRewardTimestamp = uint48(block.timestamp);\n            ownerToTokens[msg.sender].push(tokenId);\n            emit EnterCaves(msg.sender, tokenId, block.timestamp);\n        }\n    }\n\n    /**\n     *  @dev Function to allow the owner of a Cave token to leave the cave and claim any rewards.\n     * @param _tokenId An array of Cave token IDs to be claimed and left.\n     */\n\n    function leaveCave(uint256[] calldata _tokenId) external {\n        uint256 i;\n        for (; i < _tokenId.length; ++i) {\n            uint256 tokenId = _tokenId[i];\n            Cave memory cave = caves[tokenId];\n            if (cave.owner != msg.sender) revert NotYourToken();\n            if (100 days + cave.stakingTime > block.timestamp)\n                revert NeandersmolsIsLocked();\n            if (getCavesReward(tokenId) != 0) claimCaveReward(tokenId);\n            Lib.removeItem(ownerToTokens[msg.sender], tokenId);\n            delete caves[tokenId];\n            neandersmol.transferFrom(address(this), msg.sender, tokenId);\n            emit LeaveCave(msg.sender, tokenId);\n        }\n    }\n\n    /**\n     * @dev Internal function to claim the rewards for a Cave token.\n     * @param _tokenId The ID of the Cave token to claim rewards for.\n     */\n\n    function claimCaveReward(uint256 _tokenId) internal {\n        uint256 reward = getCavesReward(_tokenId);\n        if (reward == 0) revert ZeroBalanceError();\n        caves[_tokenId].lastRewardTimestamp = uint48(block.timestamp);\n        bones.mint(msg.sender, reward);\n        emit ClaimCaveReward(msg.sender, _tokenId, reward);\n    }\n\n    /**\n     * @dev Function to allow the caller to claim rewards for multiple Cave tokens.\n     * @param _tokenId An array of Cave token IDs to claim rewards for.\n     */\n\n    function claimCaveReward(uint256[] calldata _tokenId) external {\n        uint256 i;\n        for (; i < _tokenId.length; ++i) claimCaveReward(_tokenId[i]);\n    }\n\n    /**\n     * @dev Function to retrieve the rewards for a Cave token.\n     * @param _tokenId The ID of the Cave token to retrieve rewards for.\n     * @return The rewards for the specified Cave token.\n     */\n\n    function getCavesReward(uint256 _tokenId) public view returns (uint256) {\n        Cave memory cave = caves[_tokenId];\n        if (cave.lastRewardTimestamp == 0) return 0;\n        return\n            ((block.timestamp - cave.lastRewardTimestamp) / 1 days) *\n            10 *\n            10 ** 18;\n    }\n\n    /**\n     * Retrieve information about a Cave token.\n     * @dev This function returns a Caves struct containing information about a Cave token, specified by its ID, _tokenId.\n     * @param _tokenId ID of the Cave token to retrieve information for\n     * @return  The Caves struct containing information about the specified Cave token.\n     */\n\n    function getCavesInfo(uint256 _tokenId) public view returns (Cave memory) {\n        return caves[_tokenId];\n    }\n\n    function getStakedTokens(\n        address _owner\n    ) public view returns (uint256[] memory res) {\n        return ownerToTokens[_owner];\n    }\n\n    function getCavesFeInfo(\n        address _user\n    ) external view returns (CavesFeInfo[] memory) {\n        uint256[] memory tokenIds = getStakedTokens(_user);\n        CavesFeInfo[] memory userInfo = new CavesFeInfo[](tokenIds.length);\n        for (uint256 i; i < tokenIds.length; ++i) {\n            uint256 timeLeft = 100 days +\n                getCavesInfo(tokenIds[i]).stakingTime >\n                block.timestamp\n                ? 100 days +\n                    getCavesInfo(tokenIds[i]).stakingTime -\n                    block.timestamp\n                : 0;\n            userInfo[i] = CavesFeInfo(\n                getCavesReward(tokenIds[i]),\n                uint128(tokenIds[i]),\n                uint128(timeLeft)\n            );\n        }\n\n        return userInfo;\n    }\n\n    /**\n     * start---------------current-time----------opener\n     * timeLeft opener - currentTime\n     */\n\n    event EnterCaves(\n        address indexed owner,\n        uint256 indexed tokenId,\n        uint256 indexed stakeTime\n    );\n\n    event LeaveCave(address indexed owner, uint256 indexed tokenId);\n\n    event ClaimCaveReward(\n        address indexed owner,\n        uint256 indexed tokenId,\n        uint256 indexed amount\n    );\n}\n"
    },
    "contracts/interfaces/IBones.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {IERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface IBones is IERC20Upgradeable {\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/INeandersmol.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {IERC721Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\n\ninterface INeandersmol is IERC721Upgradeable {\n    function getCommonSense(uint256 _tokenId) external view returns (uint256);\n\n    function developMystics(uint256 _tokenId, uint256 _amount) external;\n\n    function developFarmers(uint256 _tokenId, uint256 _amount) external;\n\n    function developFighter(uint256 _tokenId, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IPits.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\ninterface IPits {\n    function validation() external view returns (bool);\n\n    function getTimeOut() external view returns (uint256);\n\n    function getTimeBelowMinimum() external view returns (uint256);\n\n    function getDaysOff(uint256 _timestamp) external view returns (uint256);\n\n    function getTotalDaysOff() external view returns (uint256);\n}\n"
    },
    "contracts/library/Error.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nerror CsToHigh();\nerror NotAContract();\nerror NotYourToken();\nerror NotAuthorized();\nerror WrongMultiple();\nerror CannotClaimNow();\nerror TransferFailed();\nerror InvalidTokenId();\nerror InvalidLockTime();\nerror NoMoreAnimalsAllowed();\nerror LengthsNotEqual();\nerror ZeroBalanceError();\nerror CsIsBellowHundred();\nerror NeandersmolsIsLocked();\nerror BalanceIsInsufficient();\nerror InvalidTokenForThisJob();\nerror DevelopmentGroundIsLocked();\nerror NeandersmolIsNotInDevelopmentGround();\n"
    },
    "contracts/library/Lib.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport { IPits } from \"../interfaces/IPits.sol\";\nimport { DevelopmentGroundIsLocked } from \"./Error.sol\";\n\nlibrary Lib {\n    function getDevelopmentGroundBonesReward(\n        uint256 _currentLockPeriod,\n        uint256 _lockPeriod,\n        uint256 _lastRewardTime,\n        IPits _pits\n    ) internal view returns (uint256) {\n        if (_lockPeriod == 0) return 0;\n        uint256 rewardRate = getRewardRate(_lockPeriod);\n\n        uint256 time = (block.timestamp - _lastRewardTime) / 1 days;\n\n        return\n            (rewardRate *\n                time -\n                calculateFinalReward(_currentLockPeriod, _pits)) * 10 ** 18;\n    }\n\n    function calculatePrimarySkill(\n        uint256 _bonesStaked,\n        uint256 _amountPosition,\n        uint256 _currentLockPeriod,\n        uint256 _tokenId,\n        IPits _pits,\n        mapping(uint256 => mapping(uint256 => uint256)) storage trackTime,\n        mapping(uint256 => mapping(uint256 => uint256)) storage trackToken\n    ) internal view returns (uint256) {\n        if (_bonesStaked == 0) return 0;\n        uint256 amount;\n        for (uint256 i = 1; i <= _amountPosition; ) {\n            uint256 time = (block.timestamp - trackTime[_tokenId][i]) / 1 days;\n            uint256 stakedAmount = trackToken[_tokenId][trackTime[_tokenId][i]];\n            amount += (time * stakedAmount);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return\n            (amount -\n                calculateFinalReward(_currentLockPeriod, _pits) *\n                10 ** 20) / 10 ** 4;\n    }\n\n    function calculateFinalReward(\n        uint256 _currentLockPeriod,\n        IPits _pits\n    ) internal view returns (uint256) {\n        uint256 amount;\n\n        if (_currentLockPeriod != _pits.getTimeOut()) {\n            uint256 howLong = (block.timestamp - _pits.getTimeOut()) / 1 days;\n            amount = (_pits.getTotalDaysOff() -\n                _pits.getDaysOff(_currentLockPeriod) +\n                howLong);\n        }\n        if (_currentLockPeriod == 0) {\n            uint256 off;\n            _pits.getTimeOut() != 0\n                ? off = (block.timestamp - _pits.getTimeOut()) / 1 days\n                : 0;\n            if (_pits.validation()) off = _pits.getTotalDaysOff();\n            amount = off;\n        }\n        return amount * 10;\n    }\n\n    function getRewardRate(\n        uint _lockTime\n    ) internal pure returns (uint256 rewardRate) {\n        if (_lockTime == 50 days) rewardRate = 10;\n        if (_lockTime == 100 days) rewardRate = 50;\n        if (_lockTime == 150 days) rewardRate = 100;\n    }\n\n    function pitsValidation(IPits _pits) internal view {\n        if (!_pits.validation()) revert DevelopmentGroundIsLocked();\n    }\n\n    function removeItem(\n        uint256[] storage _element,\n        uint256 _removeElement\n    ) internal {\n        uint256 i;\n        for (; i < _element.length; ) {\n            if (_element[i] == _removeElement) {\n                _element[i] = _element[_element.length - 1];\n                _element.pop();\n                break;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n"
    },
    "contracts/library/StructsEnums.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nstruct DevelopmentGround {\n    address owner;\n    uint64 lockPeriod;\n    uint64 amountPosition;\n    uint64 entryTime;\n    uint64 lastRewardTime;\n    uint256 bonesStaked;\n    uint256 currentPitsLockPeriod;\n    Grounds ground;\n}\n\nstruct LaborGround {\n    address owner;\n    uint32 lockTime;\n    uint32 supplyId;\n    uint32 animalId;\n    uint256 requestId;\n    Jobs job;\n}\n\nstruct Cave {\n    address owner;\n    uint48 stakingTime;\n    uint48 lastRewardTimestamp;\n}\n\nstruct CavesFeInfo {\n    uint256 reward;\n    uint128 stakedSmols;\n    uint128 timeLeft;\n}\n\nstruct DevGroundFe {\n    uint96 timeLeft;\n    uint96 daysStaked;\n    uint64 stakedSmols;\n    uint256 skillLevel;\n    uint256 bonesOccured;\n}\n\n/**\n * token id\n * bones occured\n * primary skill level\n * days left\n */\n\nenum Jobs {\n    Digging,\n    Foraging,\n    Mining\n}\n\nenum Grounds {\n    Chambers,\n    Garden,\n    Battlefield\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}